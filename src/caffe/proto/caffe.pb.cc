// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/caffe/proto/caffe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/caffe/proto/caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe {
class BlobShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobShape> {
} _BlobShape_default_instance_;
class BlobProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlobProto> {
} _BlobProto_default_instance_;
class DatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Datum> {
} _Datum_default_instance_;
class FillerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FillerParameter> {
} _FillerParameter_default_instance_;
class InnerProductParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InnerProductParameter> {
} _InnerProductParameter_default_instance_;
class ConvolutionParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionParameter> {
} _ConvolutionParameter_default_instance_;
class DataParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataParameter> {
} _DataParameter_default_instance_;
class TransformationParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransformationParameter> {
} _TransformationParameter_default_instance_;
class ParamSpecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParamSpec> {
} _ParamSpec_default_instance_;
class LayerPropDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LayerProp> {
} _LayerProp_default_instance_;
class LayerParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LayerParameter> {
} _LayerParameter_default_instance_;
class ConcatParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConcatParameter> {
} _ConcatParameter_default_instance_;
class ReLUParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReLUParameter> {
} _ReLUParameter_default_instance_;
class NoiseParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoiseParameter> {
} _NoiseParameter_default_instance_;
class SecParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SecParameter> {
} _SecParameter_default_instance_;
class InterpParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InterpParameter> {
} _InterpParameter_default_instance_;
class DropoutParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropoutParameter> {
} _DropoutParameter_default_instance_;
class ParseEvaluateParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParseEvaluateParameter> {
} _ParseEvaluateParameter_default_instance_;
class EltwiseParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EltwiseParameter> {
} _EltwiseParameter_default_instance_;
class CRFParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CRFParameter> {
} _CRFParameter_default_instance_;
class ContextPoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContextPoolingParameter> {
} _ContextPoolingParameter_default_instance_;
class NormalizeParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NormalizeParameter> {
} _NormalizeParameter_default_instance_;
class AccuracyParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccuracyParameter> {
} _AccuracyParameter_default_instance_;
class ShortcutParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShortcutParameter> {
} _ShortcutParameter_default_instance_;
class BatchNormParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchNormParameter> {
} _BatchNormParameter_default_instance_;
class InputBlobDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InputBlob> {
} _InputBlob_default_instance_;
class NetParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetParameter> {
} _NetParameter_default_instance_;
class NetOptimizerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetOptimizer> {
} _NetOptimizer_default_instance_;
class SolverStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverState> {
} _SolverState_default_instance_;
class NetStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetState> {
} _NetState_default_instance_;
class SolverParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverParameter> {
} _SolverParameter_default_instance_;
class PoolingParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PoolingParameter> {
} _PoolingParameter_default_instance_;
class LossParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LossParameter> {
} _LossParameter_default_instance_;

namespace protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[33];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, forced_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, encoded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, multi_label_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, variance_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, weight_filler_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, filter_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, multi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, random_field_),
  2,
  5,
  3,
  4,
  9,
  10,
  1,
  8,
  0,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, root_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, random_skip_),
  ~0u,
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, augment_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, alter_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, pad_img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, simple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, center_crop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, ignore_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, random_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, random_aspect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, random_rotate_),
  7,
  0,
  1,
  ~0u,
  8,
  2,
  3,
  4,
  10,
  9,
  5,
  11,
  12,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, weight_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, weight_penalty_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProp, loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProp, need_backward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProp, sec_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProp, norm_value_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_flow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_flow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, include_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, branch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bind_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bind_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, transform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_norm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, shortcut_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, accuracy_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, norm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, context_pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crf_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, parse_evaluate_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, interp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sec_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, noise_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, shape_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, first_moment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, second_moment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_index_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, channels_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, negative_slope_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseParameter, classes_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecParameter, sec_feature_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpParameter, interp_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpParameter, num_classes_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseEvaluateParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseEvaluateParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseEvaluateParameter, num_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseEvaluateParameter, ignore_label_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, stable_prod_grad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, backward_),
  0,
  ~0u,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRFParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRFParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRFParameter, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRFParameter, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRFParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRFParameter, eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRFParameter, alpha_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextPoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextPoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextPoolingParameter, context_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextPoolingParameter, context_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextPoolingParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextPoolingParameter, mode_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, scale_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeParameter, eps_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, top_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, ignore_label_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutParameter, dropout_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutParameter, groups_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, bn_state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBlob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBlob, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBlob, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBlob, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBlob, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBlob, width_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, num_flow_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, base_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, lr_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, stepsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, stepvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, weight_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, average_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, momentum2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetOptimizer, delta_),
  2,
  0,
  1,
  3,
  4,
  5,
  ~0u,
  8,
  6,
  7,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, net_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, d_state_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, g_state_file_),
  4,
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, adam_iter_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, eval_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, accumulate_batch_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, accumulate_test_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, accumulate_max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, iter_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, bn_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, drop_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, second_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, g_net_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, d_net_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, g_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, g_net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, d_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, d_net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, d_interp_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, d_aux_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, d_interp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, d_aux_param_),
  0,
  11,
  12,
  19,
  24,
  20,
  21,
  1,
  25,
  22,
  23,
  29,
  27,
  2,
  3,
  28,
  4,
  5,
  26,
  6,
  13,
  14,
  7,
  15,
  8,
  16,
  9,
  10,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, global_pool_),
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, ignore_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, keep_portion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, single_term_),
  0,
  2,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(BlobShape)},
  { 16, 27, sizeof(BlobProto)},
  { 34, 46, sizeof(Datum)},
  { 54, 62, sizeof(FillerParameter)},
  { 66, 73, sizeof(InnerProductParameter)},
  { 76, 91, sizeof(ConvolutionParameter)},
  { 102, 111, sizeof(DataParameter)},
  { 116, 134, sizeof(TransformationParameter)},
  { 148, 156, sizeof(ParamSpec)},
  { 160, 168, sizeof(LayerProp)},
  { 172, 212, sizeof(LayerParameter)},
  { 248, 253, sizeof(ConcatParameter)},
  { 254, 259, sizeof(ReLUParameter)},
  { 260, 267, sizeof(NoiseParameter)},
  { 270, 275, sizeof(SecParameter)},
  { 276, 284, sizeof(InterpParameter)},
  { 288, 293, sizeof(DropoutParameter)},
  { 294, 300, sizeof(ParseEvaluateParameter)},
  { 302, 310, sizeof(EltwiseParameter)},
  { 314, 323, sizeof(CRFParameter)},
  { 328, 336, sizeof(ContextPoolingParameter)},
  { 340, 346, sizeof(NormalizeParameter)},
  { 348, 354, sizeof(AccuracyParameter)},
  { 356, 363, sizeof(ShortcutParameter)},
  { 366, 371, sizeof(BatchNormParameter)},
  { 372, 381, sizeof(InputBlob)},
  { 386, 395, sizeof(NetParameter)},
  { 400, 417, sizeof(NetOptimizer)},
  { 430, 439, sizeof(SolverState)},
  { 444, 450, sizeof(NetState)},
  { 452, 486, sizeof(SolverParameter)},
  { 516, 525, sizeof(PoolingParameter)},
  { 530, 537, sizeof(LossParameter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Datum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FillerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InnerProductParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolutionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransformationParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParamSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LayerProp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LayerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConcatParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReLUParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoiseParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SecParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InterpParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropoutParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParseEvaluateParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EltwiseParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CRFParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContextPoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NormalizeParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccuracyParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShortcutParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchNormParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputBlob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetOptimizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LossParameter_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "src/caffe/proto/caffe.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

}  // namespace

void TableStruct::Shutdown() {
  _BlobShape_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BlobProto_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Datum_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _FillerParameter_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  FillerParameter::_default_type_.Shutdown();
  FillerParameter::_default_variance_norm_.Shutdown();
  _InnerProductParameter_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ConvolutionParameter_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DataParameter_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TransformationParameter_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ParamSpec_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _LayerProp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _LayerParameter_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ConcatParameter_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ReLUParameter_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _NoiseParameter_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SecParameter_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _InterpParameter_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _DropoutParameter_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ParseEvaluateParameter_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _EltwiseParameter_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  EltwiseParameter::_default_operation_.Shutdown();
  _CRFParameter_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ContextPoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _NormalizeParameter_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _AccuracyParameter_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ShortcutParameter_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _BatchNormParameter_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  BatchNormParameter::_default_bn_state_.Shutdown();
  _InputBlob_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _NetParameter_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _NetOptimizer_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  NetOptimizer::_default_type_.Shutdown();
  _SolverState_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _NetState_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _SolverParameter_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  SolverParameter::_default_eval_type_.Shutdown();
  SolverParameter::_default_solver_type_.Shutdown();
  SolverParameter::_default_bn_state_.Shutdown();
  SolverParameter::_default_drop_state_.Shutdown();
  _PoolingParameter_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  PoolingParameter::_default_pool_.Shutdown();
  _LossParameter_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BlobShape_default_instance_.DefaultConstruct();
  _BlobProto_default_instance_.DefaultConstruct();
  _Datum_default_instance_.DefaultConstruct();
  FillerParameter::_default_type_.DefaultConstruct();
  *FillerParameter::_default_type_.get_mutable() = ::std::string("msra", 4);
  FillerParameter::_default_variance_norm_.DefaultConstruct();
  *FillerParameter::_default_variance_norm_.get_mutable() = ::std::string("fan_in", 6);
  _FillerParameter_default_instance_.DefaultConstruct();
  _InnerProductParameter_default_instance_.DefaultConstruct();
  _ConvolutionParameter_default_instance_.DefaultConstruct();
  _DataParameter_default_instance_.DefaultConstruct();
  _TransformationParameter_default_instance_.DefaultConstruct();
  _ParamSpec_default_instance_.DefaultConstruct();
  _LayerProp_default_instance_.DefaultConstruct();
  _LayerParameter_default_instance_.DefaultConstruct();
  _ConcatParameter_default_instance_.DefaultConstruct();
  _ReLUParameter_default_instance_.DefaultConstruct();
  _NoiseParameter_default_instance_.DefaultConstruct();
  _SecParameter_default_instance_.DefaultConstruct();
  _InterpParameter_default_instance_.DefaultConstruct();
  _DropoutParameter_default_instance_.DefaultConstruct();
  _ParseEvaluateParameter_default_instance_.DefaultConstruct();
  EltwiseParameter::_default_operation_.DefaultConstruct();
  *EltwiseParameter::_default_operation_.get_mutable() = ::std::string("sum", 3);
  _EltwiseParameter_default_instance_.DefaultConstruct();
  _CRFParameter_default_instance_.DefaultConstruct();
  _ContextPoolingParameter_default_instance_.DefaultConstruct();
  _NormalizeParameter_default_instance_.DefaultConstruct();
  _AccuracyParameter_default_instance_.DefaultConstruct();
  _ShortcutParameter_default_instance_.DefaultConstruct();
  BatchNormParameter::_default_bn_state_.DefaultConstruct();
  *BatchNormParameter::_default_bn_state_.get_mutable() = ::std::string("learned", 7);
  _BatchNormParameter_default_instance_.DefaultConstruct();
  _InputBlob_default_instance_.DefaultConstruct();
  _NetParameter_default_instance_.DefaultConstruct();
  NetOptimizer::_default_type_.DefaultConstruct();
  *NetOptimizer::_default_type_.get_mutable() = ::std::string("SGD", 3);
  _NetOptimizer_default_instance_.DefaultConstruct();
  _SolverState_default_instance_.DefaultConstruct();
  _NetState_default_instance_.DefaultConstruct();
  SolverParameter::_default_eval_type_.DefaultConstruct();
  *SolverParameter::_default_eval_type_.get_mutable() = ::std::string("classification", 14);
  SolverParameter::_default_solver_type_.DefaultConstruct();
  *SolverParameter::_default_solver_type_.get_mutable() = ::std::string("CNN", 3);
  SolverParameter::_default_bn_state_.DefaultConstruct();
  *SolverParameter::_default_bn_state_.get_mutable() = ::std::string("learned", 7);
  SolverParameter::_default_drop_state_.DefaultConstruct();
  *SolverParameter::_default_drop_state_.get_mutable() = ::std::string("rand", 4);
  _SolverParameter_default_instance_.DefaultConstruct();
  PoolingParameter::_default_pool_.DefaultConstruct();
  *PoolingParameter::_default_pool_.get_mutable() = ::std::string("ave", 3);
  _PoolingParameter_default_instance_.DefaultConstruct();
  _LossParameter_default_instance_.DefaultConstruct();
  _BlobProto_default_instance_.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
  _InnerProductParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ConvolutionParameter_default_instance_.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->include_ = const_cast< ::caffe::LayerProp*>(
      ::caffe::LayerProp::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->data_param_ = const_cast< ::caffe::DataParameter*>(
      ::caffe::DataParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->transform_param_ = const_cast< ::caffe::TransformationParameter*>(
      ::caffe::TransformationParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
      ::caffe::ConvolutionParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->loss_param_ = const_cast< ::caffe::LossParameter*>(
      ::caffe::LossParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
      ::caffe::InnerProductParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->batch_norm_param_ = const_cast< ::caffe::BatchNormParameter*>(
      ::caffe::BatchNormParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->shortcut_param_ = const_cast< ::caffe::ShortcutParameter*>(
      ::caffe::ShortcutParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
      ::caffe::AccuracyParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->norm_param_ = const_cast< ::caffe::NormalizeParameter*>(
      ::caffe::NormalizeParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->context_pooling_param_ = const_cast< ::caffe::ContextPoolingParameter*>(
      ::caffe::ContextPoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->crf_param_ = const_cast< ::caffe::CRFParameter*>(
      ::caffe::CRFParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
      ::caffe::EltwiseParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->parse_evaluate_param_ = const_cast< ::caffe::ParseEvaluateParameter*>(
      ::caffe::ParseEvaluateParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
      ::caffe::DropoutParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->interp_param_ = const_cast< ::caffe::InterpParameter*>(
      ::caffe::InterpParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->sec_param_ = const_cast< ::caffe::SecParameter*>(
      ::caffe::SecParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->noise_param_ = const_cast< ::caffe::NoiseParameter*>(
      ::caffe::NoiseParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->shape_param_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
  _LayerParameter_default_instance_.get_mutable()->concat_param_ = const_cast< ::caffe::ConcatParameter*>(
      ::caffe::ConcatParameter::internal_default_instance());
  _SolverState_default_instance_.get_mutable()->net_state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->net_opt_ = const_cast< ::caffe::NetOptimizer*>(
      ::caffe::NetOptimizer::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->g_net_opt_ = const_cast< ::caffe::NetOptimizer*>(
      ::caffe::NetOptimizer::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->d_net_opt_ = const_cast< ::caffe::NetOptimizer*>(
      ::caffe::NetOptimizer::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->g_net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->d_net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->d_interp_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_.get_mutable()->d_aux_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033src/caffe/proto/caffe.proto\022\005caffe\"q\n\t"
      "BlobShape\022\017\n\003dim\030\005 \003(\003B\002\020\001\022\013\n\003num\030\001 \001(\005\022"
      "\020\n\010channels\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\r\n\005wid"
      "th\030\004 \001(\005\022\025\n\006forced\030\006 \001(\010:\005false\"\232\001\n\tBlob"
      "Proto\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020"
      "\001\022\037\n\005shape\030\007 \001(\0132\020.caffe.BlobShape\022\016\n\003nu"
      "m\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006heigh"
      "t\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\"\226\001\n\005Datum\022\020"
      "\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r\n\005widt"
      "h\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030\005 \001(\005\022\022\n\n"
      "float_data\030\006 \003(\002\022\026\n\007encoded\030\007 \001(\010:\005false"
      "\022\023\n\013multi_label\030\010 \003(\005\"_\n\017FillerParameter"
      "\022\022\n\004type\030\001 \001(\t:\004msra\022\035\n\rvariance_norm\030\002 "
      "\001(\t:\006fan_in\022\014\n\004mean\030\003 \001(\002\022\013\n\003std\030\004 \001(\002\"t"
      "\n\025InnerProductParameter\022\022\n\nnum_output\030\001 "
      "\001(\r\022\030\n\tbias_term\030\002 \001(\010:\005false\022-\n\rweight_"
      "filler\030\003 \001(\0132\026.caffe.FillerParameter\"\230\002\n"
      "\024ConvolutionParameter\022\022\n\nnum_output\030\001 \001("
      "\r\022\030\n\tbias_term\030\002 \001(\010:\005false\022\016\n\003pad\030\003 \001(\r"
      ":\0010\022\023\n\013kernel_size\030\004 \001(\r\022\021\n\006stride\030\005 \001(\r"
      ":\0011\022\030\n\rfilter_stride\030\006 \001(\r:\0011\022-\n\rweight_"
      "filler\030\007 \001(\0132\026.caffe.FillerParameter\022\020\n\005"
      "group\030\010 \001(\r:\0011\022\023\n\013weight_file\030\t \001(\t\022\r\n\005m"
      "ulti\030\n \001(\r\022\033\n\014random_field\030\013 \001(\010:\005false\""
      "\201\001\n\rDataParameter\022\016\n\006source\030\001 \003(\t\022\025\n\013roo"
      "t_folder\030\002 \001(\t:\000\022\025\n\nbatch_size\030\003 \001(\r:\0011\022"
      "\026\n\007shuffle\030\005 \001(\010:\005false\022\032\n\013random_skip\030\006"
      " \001(\010:\005false\"\367\002\n\027TransformationParameter\022"
      "\024\n\006mirror\030\001 \001(\010:\004true\022\024\n\tcrop_size\030\002 \001(\005"
      ":\0010\022\027\n\014augment_size\030\003 \001(\005:\0010\022\022\n\nmean_val"
      "ue\030\004 \003(\002\022\031\n\013alter_color\030\005 \001(\010:\004true\022\026\n\007p"
      "ad_img\030\006 \001(\010:\005false\022\025\n\006simple\030\007 \001(\010:\005fal"
      "se\022\032\n\013center_crop\030\010 \001(\010:\005false\022\031\n\014ignore"
      "_label\030\t \001(\005:\003255\022\032\n\014random_scale\030\n \001(\010:"
      "\004true\022\034\n\rrandom_aspect\030\013 \001(\010:\005false\022\025\n\nr"
      "esolution\030\014 \001(\005:\0011\022\023\n\007classes\030\r \001(\005:\00221\022"
      "\034\n\rrandom_rotate\030\016 \001(\010:\005false\"`\n\tParamSp"
      "ec\022\017\n\007lr_mult\030\001 \001(\002\022\022\n\ndecay_mult\030\002 \001(\002\022"
      "\023\n\013weight_norm\030\003 \001(\002\022\031\n\016weight_penalty\030\004"
      " \001(\002:\0010\"s\n\tLayerProp\022\026\n\013loss_weight\030\002 \001("
      "\002:\0010\022\033\n\rneed_backward\030\003 \001(\010:\004true\022\032\n\017sec"
      "_loss_weight\030\004 \001(\002:\0010\022\025\n\nnorm_value\030\005 \001("
      "\002:\0011\"\206\013\n\016LayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n"
      "\004type\030\002 \001(\t\022\016\n\006bottom\030\003 \003(\t\022\013\n\003top\030\004 \003(\t"
      "\022\023\n\013bottom_flow\030e \003(\005\022\020\n\010top_flow\030f \003(\005\022"
      "!\n\007include\030\005 \001(\0132\020.caffe.LayerProp\022\037\n\005pa"
      "ram\030\006 \003(\0132\020.caffe.ParamSpec\022\037\n\005blobs\030\007 \003"
      "(\0132\020.caffe.BlobProto\022%\n\006branch\030\010 \003(\0132\025.c"
      "affe.LayerParameter\022\020\n\010bind_key\030\t \001(\t\022\022\n"
      "\nbind_value\030\n \001(\t\022(\n\ndata_param\030\031 \001(\0132\024."
      "caffe.DataParameter\0227\n\017transform_param\030\032"
      " \001(\0132\036.caffe.TransformationParameter\0226\n\021"
      "convolution_param\030\033 \001(\0132\033.caffe.Convolut"
      "ionParameter\022(\n\nloss_param\030\034 \001(\0132\024.caffe"
      ".LossParameter\022.\n\rpooling_param\030\035 \001(\0132\027."
      "caffe.PoolingParameter\0229\n\023inner_product_"
      "param\030\036 \001(\0132\034.caffe.InnerProductParamete"
      "r\0223\n\020batch_norm_param\030\037 \001(\0132\031.caffe.Batc"
      "hNormParameter\0220\n\016shortcut_param\030  \001(\0132\030"
      ".caffe.ShortcutParameter\0220\n\016accuracy_par"
      "am\030! \001(\0132\030.caffe.AccuracyParameter\022-\n\nno"
      "rm_param\030\" \001(\0132\031.caffe.NormalizeParamete"
      "r\022=\n\025context_pooling_param\030# \001(\0132\036.caffe"
      ".ContextPoolingParameter\022&\n\tcrf_param\030$ "
      "\001(\0132\023.caffe.CRFParameter\022.\n\reltwise_para"
      "m\030% \001(\0132\027.caffe.EltwiseParameter\022;\n\024pars"
      "e_evaluate_param\030& \001(\0132\035.caffe.ParseEval"
      "uateParameter\022.\n\rdropout_param\030\' \001(\0132\027.c"
      "affe.DropoutParameter\022,\n\014interp_param\030( "
      "\001(\0132\026.caffe.InterpParameter\022&\n\tsec_param"
      "\030) \001(\0132\023.caffe.SecParameter\022*\n\013noise_par"
      "am\030* \001(\0132\025.caffe.NoiseParameter\022(\n\nrelu_"
      "param\030+ \001(\0132\024.caffe.ReLUParameter\022%\n\013sha"
      "pe_param\030, \001(\0132\020.caffe.BlobShape\022,\n\014conc"
      "at_param\030- \001(\0132\026.caffe.ConcatParameter\022&"
      "\n\014first_moment\030. \003(\0132\020.caffe.BlobProto\022\'"
      "\n\rsecond_moment\030/ \003(\0132\020.caffe.BlobProto\022"
      "\024\n\014bottom_index\0300 \003(\005\"#\n\017ConcatParameter"
      "\022\020\n\010channels\030\001 \003(\005\"*\n\rReLUParameter\022\031\n\016n"
      "egative_slope\030\001 \001(\002:\0010\"@\n\016NoiseParameter"
      "\022\013\n\003num\030\001 \001(\005\022\020\n\010channels\030\002 \001(\005\022\017\n\007class"
      "es\030\003 \001(\005\"#\n\014SecParameter\022\023\n\013sec_feature\030"
      "\001 \001(\t\"a\n\017InterpParameter\022\024\n\014interp_ratio"
      "\030\001 \001(\002\022\016\n\006stride\030\002 \001(\005\022\023\n\013kernel_size\030\003 "
      "\001(\005\022\023\n\013num_classes\030\004 \001(\005\".\n\020DropoutParam"
      "eter\022\032\n\rdropout_ratio\030\001 \001(\002:\0030.5\"B\n\026Pars"
      "eEvaluateParameter\022\022\n\nnum_labels\030\001 \001(\005\022\024"
      "\n\014ignore_label\030\002 \003(\005\"k\n\020EltwiseParameter"
      "\022\026\n\toperation\030\001 \001(\t:\003sum\022\r\n\005coeff\030\002 \003(\002\022"
      "\036\n\020stable_prod_grad\030\003 \001(\010:\004true\022\020\n\010backw"
      "ard\030\004 \003(\010\"p\n\014CRFParameter\022\023\n\010max_iter\030\001 "
      "\001(\005:\0011\022\016\n\006radius\030\002 \001(\002\022\023\n\005scale\030\003 \001(\002:\0040"
      ".01\022\021\n\003eps\030\004 \001(\002:\0040.01\022\023\n\005alpha\030\005 \001(\002:\0040"
      ".01\"a\n\027ContextPoolingParameter\022\024\n\tcontex"
      "t_h\030\001 \001(\r:\0010\022\024\n\tcontext_w\030\002 \001(\r:\0010\022\014\n\004po"
      "ol\030\003 \001(\t\022\014\n\004mode\030\004 \001(\t\"@\n\022NormalizeParam"
      "eter\022\026\n\013scale_value\030\001 \001(\002:\0011\022\022\n\003eps\030\002 \001("
      "\002:\0051e-10\";\n\021AccuracyParameter\022\020\n\005top_k\030\001"
      " \001(\r:\0011\022\024\n\014ignore_label\030\002 \001(\005\"Q\n\021Shortcu"
      "tParameter\022\r\n\005scale\030\001 \001(\002\022\032\n\rdropout_rat"
      "io\030\002 \001(\002:\0030.5\022\021\n\006groups\030\003 \001(\r:\0011\"/\n\022Batc"
      "hNormParameter\022\031\n\010bn_state\030\001 \001(\t:\007learne"
      "d\"W\n\tInputBlob\022\014\n\004name\030\001 \001(\t\022\013\n\003num\030\002 \001("
      "\005\022\020\n\010channels\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\r\n\005w"
      "idth\030\005 \001(\005\"\214\001\n\014NetParameter\022\014\n\004name\030\001 \001("
      "\t\022$\n\005layer\030d \003(\0132\025.caffe.LayerParameter\022"
      "\r\n\005input\030\003 \003(\t\022$\n\ninput_blob\030\005 \003(\0132\020.caf"
      "fe.InputBlob\022\023\n\010num_flow\030\006 \001(\005:\0010\"\217\002\n\014Ne"
      "tOptimizer\022\017\n\007base_lr\030\001 \001(\002\022\021\n\004type\030\002 \001("
      "\t:\003SGD\022\021\n\tlr_policy\030\003 \001(\t\022\r\n\005gamma\030\004 \001(\002"
      "\022\r\n\005power\030\005 \001(\002\022\020\n\010stepsize\030\006 \001(\005\022\021\n\tste"
      "pvalue\030\007 \003(\005\022\025\n\010momentum\030\010 \001(\002:\0030.9\022\024\n\014w"
      "eight_decay\030\t \001(\002\022\017\n\007display\030\013 \001(\005\022\027\n\014av"
      "erage_loss\030\014 \001(\005:\0011\022\030\n\tmomentum2\030\r \001(\002:\005"
      "0.999\022\024\n\005delta\030\016 \001(\002:\0051e-08\"\200\001\n\013SolverSt"
      "ate\022\014\n\004iter\030\001 \001(\005\022\023\n\013learned_net\030\002 \001(\t\022\""
      "\n\tnet_state\030\003 \001(\0132\017.caffe.NetState\022\024\n\014d_"
      "state_file\030\004 \001(\t\022\024\n\014g_state_file\030\005 \001(\t\"C"
      "\n\010NetState\022$\n\005layer\030\001 \003(\0132\025.caffe.LayerP"
      "arameter\022\021\n\tadam_iter\030\002 \001(\005\"\335\006\n\017SolverPa"
      "rameter\022\013\n\003net\030\001 \001(\t\022&\n\tnet_param\030\002 \001(\0132"
      "\023.caffe.NetParameter\022$\n\007net_opt\030\003 \001(\0132\023."
      "caffe.NetOptimizer\022\020\n\010max_iter\030\004 \001(\005\022\033\n\023"
      "test_initialization\030\005 \001(\010\022\025\n\rtest_interv"
      "al\030\006 \001(\005\022\021\n\ttest_iter\030\007 \001(\005\022!\n\teval_type"
      "\030\010 \001(\t:\016classification\022$\n\025accumulate_bat"
      "ch_norm\030\t \001(\010:\005false\022\034\n\024accumulate_test_"
      "iter\030\n \001(\r\022\033\n\023accumulate_max_iter\030\013 \001(\r\022"
      "\024\n\titer_size\030\014 \001(\005:\0011\022\023\n\010snapshot\030\r \001(\005:"
      "\0010\022\027\n\017snapshot_prefix\030\016 \001(\t\022\030\n\013solver_ty"
      "pe\030\017 \001(\t:\003CNN\022\017\n\007display\030\020 \001(\005\022\031\n\010bn_sta"
      "te\030\022 \001(\t:\007learned\022\030\n\ndrop_state\030\023 \001(\t:\004r"
      "and\022\032\n\013second_pass\030\024 \001(\010:\005false\022\020\n\010test_"
      "net\030\025 \001(\t\022&\n\tg_net_opt\030d \001(\0132\023.caffe.Net"
      "Optimizer\022&\n\td_net_opt\030e \001(\0132\023.caffe.Net"
      "Optimizer\022\r\n\005g_net\030f \001(\t\022(\n\013g_net_param\030"
      "g \001(\0132\023.caffe.NetParameter\022\r\n\005d_net\030j \001("
      "\t\022(\n\013d_net_param\030k \001(\0132\023.caffe.NetParame"
      "ter\022\024\n\014d_interp_net\030n \001(\t\022\021\n\td_aux_net\030o"
      " \001(\t\022+\n\016d_interp_param\030p \001(\0132\023.caffe.Net"
      "Parameter\022(\n\013d_aux_param\030q \001(\0132\023.caffe.N"
      "etParameter\"y\n\020PoolingParameter\022\021\n\004pool\030"
      "\001 \001(\t:\003ave\022\016\n\003pad\030\002 \001(\r:\0010\022\023\n\013kernel_siz"
      "e\030\003 \001(\r\022\021\n\006stride\030\004 \001(\r:\0011\022\032\n\013global_poo"
      "l\030\005 \001(\010:\005false\"\\\n\rLossParameter\022\024\n\014ignor"
      "e_label\030\001 \001(\005\022\031\n\014keep_portion\030\002 \001(\002:\0030.5"
      "\022\032\n\013single_term\030\003 \001(\010:\005false"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/caffe/proto/caffe.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobShape::kDimFieldNumber;
const int BlobShape::kNumFieldNumber;
const int BlobShape::kChannelsFieldNumber;
const int BlobShape::kHeightFieldNumber;
const int BlobShape::kWidthFieldNumber;
const int BlobShape::kForcedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobShape::BlobShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    reinterpret_cast<char*>(&forced_) -
    reinterpret_cast<char*>(&num_) + sizeof(forced_));
  // @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_, 0, reinterpret_cast<char*>(&forced_) -
    reinterpret_cast<char*>(&num_) + sizeof(forced_));
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:caffe.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
}

void BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[0].descriptor;
}

const BlobShape& BlobShape::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobShape* BlobShape::New(::google::protobuf::Arena* arena) const {
  BlobShape* n = new BlobShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobShape)
  dim_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&num_, 0, reinterpret_cast<char*>(&forced_) -
      reinterpret_cast<char*>(&num_) + sizeof(forced_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channels = 2;
      case 2: {
        if (tag == 16u) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dim = 5 [packed = true];
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42u, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forced = 6 [default = false];
      case 6: {
        if (tag == 48u) {
          set_has_forced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobShape)
  return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobShape)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated int64 dim = 5 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dim(i), output);
  }

  // optional bool forced = 6 [default = false];
  if (has_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->forced(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated int64 dim = 5 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dim(i), target);
  }

  // optional bool forced = 6 [default = false];
  if (has_forced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->forced(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int64 dim = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional bool forced = 6 [default = false];
    if (has_forced()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobShape)
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dim_.MergeFrom(from.dim_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_forced()) {
      set_forced(from.forced());
    }
  }
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
  return true;
}

void BlobShape::Swap(BlobShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobShape::InternalSwap(BlobShape* other) {
  dim_.UnsafeArenaSwap(&other->dim_);
  std::swap(num_, other->num_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(forced_, other->forced_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 5 [packed = true];
int BlobShape::dim_size() const {
  return dim_.size();
}
void BlobShape::clear_dim() {
  dim_.Clear();
}
::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

// optional int32 num = 1;
bool BlobShape::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobShape::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobShape::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobShape::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 BlobShape::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.num)
  return num_;
}
void BlobShape::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobShape.num)
}

// optional int32 channels = 2;
bool BlobShape::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobShape::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobShape::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobShape::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 BlobShape::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.channels)
  return channels_;
}
void BlobShape::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobShape.channels)
}

// optional int32 height = 3;
bool BlobShape::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobShape::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobShape::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobShape::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 BlobShape::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.height)
  return height_;
}
void BlobShape::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobShape.height)
}

// optional int32 width = 4;
bool BlobShape::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlobShape::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void BlobShape::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlobShape::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 BlobShape::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.width)
  return width_;
}
void BlobShape::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobShape.width)
}

// optional bool forced = 6 [default = false];
bool BlobShape::has_forced() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlobShape::set_has_forced() {
  _has_bits_[0] |= 0x00000010u;
}
void BlobShape::clear_has_forced() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlobShape::clear_forced() {
  forced_ = false;
  clear_has_forced();
}
bool BlobShape::forced() const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.forced)
  return forced_;
}
void BlobShape::set_forced(bool value) {
  set_has_forced();
  forced_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobShape.forced)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_),
      diff_(from.diff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::caffe::BlobShape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&num_, &from.num_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&num_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shape_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&shape_) + sizeof(width_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shape_;
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[1].descriptor;
}

const BlobProto& BlobProto::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
  BlobProto* n = new BlobProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProto)
  data_.Clear();
  diff_.Clear();
  if (has_shape()) {
    GOOGLE_DCHECK(shape_ != NULL);
    shape_->::caffe::BlobShape::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&num_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&num_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (tag == 8u) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (tag == 16u) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (tag == 24u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (tag == 32u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 45u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (tag == 53u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BlobShape shape = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->diff().data(), this->diff_size(), output);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->shape_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->shape_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float data = 5 [packed = true];
  {
    unsigned int count = this->data_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    unsigned int count = this->diff_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.BlobShape shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProto)
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
  data_.UnsafeArenaSwap(&other->data_);
  diff_.UnsafeArenaSwap(&other->diff_);
  std::swap(shape_, other->shape_);
  std::swap(num_, other->num_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// repeated float data = 5 [packed = true];
int BlobProto::data_size() const {
  return data_.size();
}
void BlobProto::clear_data() {
  data_.Clear();
}
float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
int BlobProto::diff_size() const {
  return diff_.size();
}
void BlobProto::clear_diff() {
  diff_.Clear();
}
float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// optional .caffe.BlobShape shape = 7;
bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// optional int32 num = 1 [default = 0];
bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
const int Datum::kMultiLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Datum)
}
Datum::Datum(const Datum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      float_data_(from.float_data_),
      multi_label_(from.multi_label_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&channels_, &from.channels_,
    reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
  // @@protoc_insertion_point(copy_constructor:caffe.Datum)
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channels_, 0, reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:caffe.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[2].descriptor;
}

const Datum& Datum::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Datum)
  float_data_.Clear();
  multi_label_.Clear();
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&channels_, 0, reinterpret_cast<char*>(&encoded_) -
      reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (tag == 8u) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (tag == 40u) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (tag == 53u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_float_data())));
        } else if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (tag == 56u) {
          set_has_encoded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 multi_label = 8;
      case 8: {
        if (tag == 64u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_multi_label())));
        } else if (tag == 66u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_multi_label())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  // repeated int32 multi_label = 8;
  for (int i = 0; i < this->multi_label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->multi_label(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Datum)
}

::google::protobuf::uint8* Datum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->float_data(i), target);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  // repeated int32 multi_label = 8;
  for (int i = 0; i < this->multi_label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->multi_label(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Datum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float float_data = 6;
  {
    unsigned int count = this->float_data_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->float_data_size());
    total_size += data_size;
  }

  // repeated int32 multi_label = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->multi_label_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->multi_label_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  const Datum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Datum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Datum)
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  float_data_.MergeFrom(from.float_data_);
  multi_label_.MergeFrom(from.multi_label_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_encoded()) {
      set_encoded(from.encoded());
    }
  }
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  float_data_.UnsafeArenaSwap(&other->float_data_);
  multi_label_.UnsafeArenaSwap(&other->multi_label_);
  data_.Swap(&other->data_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(label_, other->label_);
  std::swap(encoded_, other->encoded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// optional int32 channels = 1;
bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena();
}
void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
#if LANG_CXX11
void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Datum.data)
}
#endif
void Datum::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
int Datum::float_data_size() const {
  return float_data_.size();
}
void Datum::clear_float_data() {
  float_data_.Clear();
}
float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

// repeated int32 multi_label = 8;
int Datum::multi_label_size() const {
  return multi_label_.size();
}
void Datum::clear_multi_label() {
  multi_label_.Clear();
}
::google::protobuf::int32 Datum::multi_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.multi_label)
  return multi_label_.Get(index);
}
void Datum::set_multi_label(int index, ::google::protobuf::int32 value) {
  multi_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.multi_label)
}
void Datum::add_multi_label(::google::protobuf::int32 value) {
  multi_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.multi_label)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Datum::multi_label() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.multi_label)
  return multi_label_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Datum::mutable_multi_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.multi_label)
  return &multi_label_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> FillerParameter::_default_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> FillerParameter::_default_variance_norm_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kVarianceNormFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillerParameter::FillerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FillerParameter)
}
FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
  }
  variance_norm_.UnsafeSetDefault(&FillerParameter::_default_variance_norm_.get());
  if (from.has_variance_norm()) {
    variance_norm_.AssignWithDefault(&FillerParameter::_default_variance_norm_.get(), from.variance_norm_);
  }
  ::memcpy(&mean_, &from.mean_,
    reinterpret_cast<char*>(&std_) -
    reinterpret_cast<char*>(&mean_) + sizeof(std_));
  // @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  variance_norm_.UnsafeSetDefault(&FillerParameter::_default_variance_norm_.get());
  ::memset(&mean_, 0, reinterpret_cast<char*>(&std_) -
    reinterpret_cast<char*>(&mean_) + sizeof(std_));
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:caffe.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  type_.DestroyNoArena(&FillerParameter::_default_type_.get());
  variance_norm_.DestroyNoArena(&FillerParameter::_default_variance_norm_.get());
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[3].descriptor;
}

const FillerParameter& FillerParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FillerParameter* FillerParameter::New(::google::protobuf::Arena* arena) const {
  FillerParameter* n = new FillerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FillerParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&FillerParameter::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&FillerParameter::_default_type_.get());
    }
    if (has_variance_norm()) {
      GOOGLE_DCHECK(!variance_norm_.IsDefault(&FillerParameter::_default_variance_norm_.get()));
      (*variance_norm_.UnsafeRawStringPointer())->assign(*&FillerParameter::_default_variance_norm_.get());
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&mean_, 0, reinterpret_cast<char*>(&std_) -
      reinterpret_cast<char*>(&mean_) + sizeof(std_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FillerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "msra"];
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FillerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string variance_norm = 2 [default = "fan_in"];
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variance_norm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->variance_norm().data(), this->variance_norm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FillerParameter.variance_norm");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean = 3;
      case 3: {
        if (tag == 29u) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float std = 4;
      case 4: {
        if (tag == 37u) {
          set_has_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FillerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
  return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
  // optional string type = 1 [default = "msra"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string variance_norm = 2 [default = "fan_in"];
  if (has_variance_norm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variance_norm().data(), this->variance_norm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.variance_norm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variance_norm(), output);
  }

  // optional float mean = 3;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mean(), output);
  }

  // optional float std = 4;
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->std(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
  // optional string type = 1 [default = "msra"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string variance_norm = 2 [default = "fan_in"];
  if (has_variance_norm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variance_norm().data(), this->variance_norm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.variance_norm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variance_norm(), target);
  }

  // optional float mean = 3;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mean(), target);
  }

  // optional float std = 4;
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->std(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
  return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FillerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string type = 1 [default = "msra"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string variance_norm = 2 [default = "fan_in"];
    if (has_variance_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variance_norm());
    }

    // optional float mean = 3;
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 4;
    if (has_std()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FillerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FillerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FillerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FillerParameter)
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
    }
    if (from.has_variance_norm()) {
      set_has_variance_norm();
      variance_norm_.AssignWithDefault(&FillerParameter::_default_variance_norm_.get(), from.variance_norm_);
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
  }
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillerParameter::InternalSwap(FillerParameter* other) {
  type_.Swap(&other->type_);
  variance_norm_.Swap(&other->variance_norm_);
  std::swap(mean_, other->mean_);
  std::swap(std_, other->std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillerParameter

// optional string type = 1 [default = "msra"];
bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&FillerParameter::_default_type_.get());
  clear_has_type();
}
const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &FillerParameter::_default_type_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
void FillerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&FillerParameter::_default_type_.get());
}
::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&FillerParameter::_default_type_.get());
}
void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&FillerParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional string variance_norm = 2 [default = "fan_in"];
bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000002u;
}
void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillerParameter::clear_variance_norm() {
  variance_norm_.ClearToDefaultNoArena(&FillerParameter::_default_variance_norm_.get());
  clear_has_variance_norm();
}
const ::std::string& FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return variance_norm_.GetNoArena();
}
void FillerParameter::set_variance_norm(const ::std::string& value) {
  set_has_variance_norm();
  variance_norm_.SetNoArena(&FillerParameter::_default_variance_norm_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}
#if LANG_CXX11
void FillerParameter::set_variance_norm(::std::string&& value) {
  set_has_variance_norm();
  variance_norm_.SetNoArena(
    &FillerParameter::_default_variance_norm_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.variance_norm)
}
#endif
void FillerParameter::set_variance_norm(const char* value) {
  set_has_variance_norm();
  variance_norm_.SetNoArena(&FillerParameter::_default_variance_norm_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.variance_norm)
}
void FillerParameter::set_variance_norm(const char* value, size_t size) {
  set_has_variance_norm();
  variance_norm_.SetNoArena(&FillerParameter::_default_variance_norm_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.variance_norm)
}
::std::string* FillerParameter::mutable_variance_norm() {
  set_has_variance_norm();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.variance_norm)
  return variance_norm_.MutableNoArena(&FillerParameter::_default_variance_norm_.get());
}
::std::string* FillerParameter::release_variance_norm() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.variance_norm)
  clear_has_variance_norm();
  return variance_norm_.ReleaseNoArena(&FillerParameter::_default_variance_norm_.get());
}
void FillerParameter::set_allocated_variance_norm(::std::string* variance_norm) {
  if (variance_norm != NULL) {
    set_has_variance_norm();
  } else {
    clear_has_variance_norm();
  }
  variance_norm_.SetAllocatedNoArena(&FillerParameter::_default_variance_norm_.get(), variance_norm);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.variance_norm)
}

// optional float mean = 3;
bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 4;
bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000008u;
}
void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillerParameter::clear_std() {
  std_ = 0;
  clear_has_std();
}
float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerProductParameter)
}
InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&bias_term_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(bias_term_));
  // @@protoc_insertion_point(copy_constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&bias_term_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(bias_term_));
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[4].descriptor;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InnerProductParameter* InnerProductParameter::New(::google::protobuf::Arena* arena) const {
  InnerProductParameter* n = new InnerProductParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerProductParameter)
  if (has_weight_filler()) {
    GOOGLE_DCHECK(weight_filler_ != NULL);
    weight_filler_->::caffe::FillerParameter::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&num_output_, 0, reinterpret_cast<char*>(&bias_term_) -
      reinterpret_cast<char*>(&num_output_) + sizeof(bias_term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = false];
      case 2: {
        if (tag == 16u) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerProductParameter)
  return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = false];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = false];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weight_filler_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductParameter)
  return target;
}

size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerProductParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = false];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerProductParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerProductParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerProductParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerProductParameter)
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
  }
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {
  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerProductParameter

// optional uint32 num_output = 1;
bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = false];
bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerProductParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kFilterStrideFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kWeightFileFieldNumber;
const int ConvolutionParameter::kMultiFieldNumber;
const int ConvolutionParameter::kRandomFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConvolutionParameter)
}
ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weight_file()) {
    weight_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_file_);
  }
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    reinterpret_cast<char*>(&filter_stride_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(filter_stride_));
  // @@protoc_insertion_point(copy_constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  weight_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&weight_filler_, 0, reinterpret_cast<char*>(&multi_) -
    reinterpret_cast<char*>(&weight_filler_) + sizeof(multi_));
  group_ = 1u;
  stride_ = 1u;
  filter_stride_ = 1u;
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  weight_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete weight_filler_;
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[5].descriptor;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvolutionParameter* ConvolutionParameter::New(::google::protobuf::Arena* arena) const {
  ConvolutionParameter* n = new ConvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConvolutionParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_weight_file()) {
      GOOGLE_DCHECK(!weight_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weight_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_weight_filler()) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&num_output_, 0, reinterpret_cast<char*>(&multi_) -
      reinterpret_cast<char*>(&num_output_) + sizeof(multi_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    group_ = 1u;
    stride_ = 1u;
    filter_stride_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = false];
      case 2: {
        if (tag == 16u) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 3 [default = 0];
      case 3: {
        if (tag == 24u) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_size = 4;
      case 4: {
        if (tag == 32u) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 5 [default = 1];
      case 5: {
        if (tag == 40u) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_stride = 6 [default = 1];
      case 6: {
        if (tag == 48u) {
          set_has_filter_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 8 [default = 1];
      case 8: {
        if (tag == 64u) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string weight_file = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight_file().data(), this->weight_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ConvolutionParameter.weight_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 multi = 10;
      case 10: {
        if (tag == 80u) {
          set_has_multi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool random_field = 11 [default = false];
      case 11: {
        if (tag == 88u) {
          set_has_random_field();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_field_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = false];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional uint32 pad = 3 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad(), output);
  }

  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kernel_size(), output);
  }

  // optional uint32 stride = 5 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stride(), output);
  }

  // optional uint32 filter_stride = 6 [default = 1];
  if (has_filter_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->filter_stride(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional uint32 group = 8 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->group(), output);
  }

  // optional string weight_file = 9;
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConvolutionParameter.weight_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->weight_file(), output);
  }

  // optional uint32 multi = 10;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->multi(), output);
  }

  // optional bool random_field = 11 [default = false];
  if (has_random_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->random_field(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = false];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional uint32 pad = 3 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad(), target);
  }

  // optional uint32 kernel_size = 4;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kernel_size(), target);
  }

  // optional uint32 stride = 5 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stride(), target);
  }

  // optional uint32 filter_stride = 6 [default = 1];
  if (has_filter_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->filter_stride(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, false, target);
  }

  // optional uint32 group = 8 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->group(), target);
  }

  // optional string weight_file = 9;
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConvolutionParameter.weight_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->weight_file(), target);
  }

  // optional uint32 multi = 10;
  if (has_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->multi(), target);
  }

  // optional bool random_field = 11 [default = false];
  if (has_random_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->random_field(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionParameter)
  return target;
}

size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConvolutionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string weight_file = 9;
    if (has_weight_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight_file());
    }

    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad = 3 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernel_size = 4;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional bool bias_term = 2 [default = false];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional bool random_field = 11 [default = false];
    if (has_random_field()) {
      total_size += 1 + 1;
    }

    // optional uint32 multi = 10;
    if (has_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 group = 8 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 stride = 5 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional uint32 filter_stride = 6 [default = 1];
    if (has_filter_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_stride());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConvolutionParameter)
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_weight_file()) {
      set_has_weight_file();
      weight_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_file_);
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_random_field()) {
      set_random_field(from.random_field());
    }
    if (from.has_multi()) {
      set_multi(from.multi());
    }
  }
  if (from._has_bits_[8 / 32] & 1792u) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_filter_stride()) {
      set_filter_stride(from.filter_stride());
    }
  }
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {
  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  weight_file_.Swap(&other->weight_file_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(num_output_, other->num_output_);
  std::swap(pad_, other->pad_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(random_field_, other->random_field_);
  std::swap(multi_, other->multi_);
  std::swap(group_, other->group_);
  std::swap(stride_, other->stride_);
  std::swap(filter_stride_, other->filter_stride_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionParameter

// optional uint32 num_output = 1;
bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = false];
bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConvolutionParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// optional uint32 pad = 3 [default = 0];
bool ConvolutionParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConvolutionParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000008u;
}
void ConvolutionParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConvolutionParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_;
}
void ConvolutionParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}

// optional uint32 kernel_size = 4;
bool ConvolutionParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConvolutionParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
void ConvolutionParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConvolutionParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
void ConvolutionParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}

// optional uint32 stride = 5 [default = 1];
bool ConvolutionParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConvolutionParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
void ConvolutionParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConvolutionParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_;
}
void ConvolutionParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}

// optional uint32 filter_stride = 6 [default = 1];
bool ConvolutionParameter::has_filter_stride() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConvolutionParameter::set_has_filter_stride() {
  _has_bits_[0] |= 0x00000400u;
}
void ConvolutionParameter::clear_has_filter_stride() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConvolutionParameter::clear_filter_stride() {
  filter_stride_ = 1u;
  clear_has_filter_stride();
}
::google::protobuf::uint32 ConvolutionParameter::filter_stride() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.filter_stride)
  return filter_stride_;
}
void ConvolutionParameter::set_filter_stride(::google::protobuf::uint32 value) {
  set_has_filter_stride();
  filter_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.filter_stride)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional uint32 group = 8 [default = 1];
bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional string weight_file = 9;
bool ConvolutionParameter::has_weight_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionParameter::set_has_weight_file() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionParameter::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionParameter::clear_weight_file() {
  weight_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight_file();
}
const ::std::string& ConvolutionParameter::weight_file() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_file)
  return weight_file_.GetNoArena();
}
void ConvolutionParameter::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.weight_file)
}
#if LANG_CXX11
void ConvolutionParameter::set_weight_file(::std::string&& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ConvolutionParameter.weight_file)
}
#endif
void ConvolutionParameter::set_weight_file(const char* value) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConvolutionParameter.weight_file)
}
void ConvolutionParameter::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConvolutionParameter.weight_file)
}
::std::string* ConvolutionParameter::mutable_weight_file() {
  set_has_weight_file();
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_file)
  return weight_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConvolutionParameter::release_weight_file() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_file)
  clear_has_weight_file();
  return weight_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConvolutionParameter::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file != NULL) {
    set_has_weight_file();
  } else {
    clear_has_weight_file();
  }
  weight_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_file)
}

// optional uint32 multi = 10;
bool ConvolutionParameter::has_multi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConvolutionParameter::set_has_multi() {
  _has_bits_[0] |= 0x00000080u;
}
void ConvolutionParameter::clear_has_multi() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConvolutionParameter::clear_multi() {
  multi_ = 0u;
  clear_has_multi();
}
::google::protobuf::uint32 ConvolutionParameter::multi() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.multi)
  return multi_;
}
void ConvolutionParameter::set_multi(::google::protobuf::uint32 value) {
  set_has_multi();
  multi_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.multi)
}

// optional bool random_field = 11 [default = false];
bool ConvolutionParameter::has_random_field() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConvolutionParameter::set_has_random_field() {
  _has_bits_[0] |= 0x00000040u;
}
void ConvolutionParameter::clear_has_random_field() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConvolutionParameter::clear_random_field() {
  random_field_ = false;
  clear_has_random_field();
}
bool ConvolutionParameter::random_field() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.random_field)
  return random_field_;
}
void ConvolutionParameter::set_random_field(bool value) {
  set_has_random_field();
  random_field_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.random_field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kRootFolderFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kShuffleFieldNumber;
const int DataParameter::kRandomSkipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataParameter::DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DataParameter)
}
DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      source_(from.source_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_root_folder()) {
    root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&shuffle_, &from.shuffle_,
    reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&shuffle_) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:caffe.DataParameter)
}

void DataParameter::SharedCtor() {
  _cached_size_ = 0;
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shuffle_, 0, reinterpret_cast<char*>(&random_skip_) -
    reinterpret_cast<char*>(&shuffle_) + sizeof(random_skip_));
  batch_size_ = 1u;
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[6].descriptor;
}

const DataParameter& DataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataParameter* DataParameter::New(::google::protobuf::Arena* arena) const {
  DataParameter* n = new DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DataParameter)
  source_.Clear();
  if (has_root_folder()) {
    GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*root_folder_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&shuffle_, 0, reinterpret_cast<char*>(&random_skip_) -
      reinterpret_cast<char*>(&shuffle_) + sizeof(random_skip_));
    batch_size_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string source = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source(this->source_size() - 1).data(),
            this->source(this->source_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string root_folder = 2 [default = ""];
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 3 [default = 1];
      case 3: {
        if (tag == 24u) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 5 [default = false];
      case 5: {
        if (tag == 40u) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool random_skip = 6 [default = false];
      case 6: {
        if (tag == 48u) {
          set_has_random_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DataParameter)
  // repeated string source = 1;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source(i).data(), this->source(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(i), output);
  }

  // optional string root_folder = 2 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->root_folder(), output);
  }

  // optional uint32 batch_size = 3 [default = 1];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->batch_size(), output);
  }

  // optional bool shuffle = 5 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shuffle(), output);
  }

  // optional bool random_skip = 6 [default = false];
  if (has_random_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->random_skip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DataParameter)
}

::google::protobuf::uint8* DataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DataParameter)
  // repeated string source = 1;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source(i).data(), this->source(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->source(i), target);
  }

  // optional string root_folder = 2 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->root_folder(), target);
  }

  // optional uint32 batch_size = 3 [default = 1];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->batch_size(), target);
  }

  // optional bool shuffle = 5 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shuffle(), target);
  }

  // optional bool random_skip = 6 [default = false];
  if (has_random_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->random_skip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DataParameter)
  return target;
}

size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string source = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_size());
  for (int i = 0; i < this->source_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string root_folder = 2 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

    // optional bool shuffle = 5 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool random_skip = 6 [default = false];
    if (has_random_skip()) {
      total_size += 1 + 1;
    }

    // optional uint32 batch_size = 3 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DataParameter)
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.MergeFrom(from.source_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_root_folder()) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
    if (from.has_random_skip()) {
      set_random_skip(from.random_skip());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
  }
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {
  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataParameter::InternalSwap(DataParameter* other) {
  source_.UnsafeArenaSwap(&other->source_);
  root_folder_.Swap(&other->root_folder_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(random_skip_, other->random_skip_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataParameter

// repeated string source = 1;
int DataParameter::source_size() const {
  return source_.size();
}
void DataParameter::clear_source() {
  source_.Clear();
}
const ::std::string& DataParameter::source(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.Get(index);
}
::std::string* DataParameter::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.Mutable(index);
}
void DataParameter::set_source(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
  source_.Mutable(index)->assign(value);
}
void DataParameter::set_source(int index, const char* value) {
  source_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
void DataParameter::set_source(int index, const char* value, size_t size) {
  source_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
::std::string* DataParameter::add_source() {
  // @@protoc_insertion_point(field_add_mutable:caffe.DataParameter.source)
  return source_.Add();
}
void DataParameter::add_source(const ::std::string& value) {
  source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.DataParameter.source)
}
void DataParameter::add_source(const char* value) {
  source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.DataParameter.source)
}
void DataParameter::add_source(const char* value, size_t size) {
  source_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.DataParameter.source)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataParameter::source() const {
  // @@protoc_insertion_point(field_list:caffe.DataParameter.source)
  return source_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DataParameter.source)
  return &source_;
}

// optional string root_folder = 2 [default = ""];
bool DataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000001u;
}
void DataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& DataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.root_folder)
  return root_folder_.GetNoArena();
}
void DataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.root_folder)
}
#if LANG_CXX11
void DataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.root_folder)
}
#endif
void DataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.root_folder)
}
void DataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.root_folder)
}
::std::string* DataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.root_folder)
}

// optional uint32 batch_size = 3 [default = 1];
bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional bool shuffle = 5 [default = false];
bool DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000002u;
}
void DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.shuffle)
  return shuffle_;
}
void DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.shuffle)
}

// optional bool random_skip = 6 [default = false];
bool DataParameter::has_random_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataParameter::set_has_random_skip() {
  _has_bits_[0] |= 0x00000004u;
}
void DataParameter::clear_has_random_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataParameter::clear_random_skip() {
  random_skip_ = false;
  clear_has_random_skip();
}
bool DataParameter::random_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.random_skip)
  return random_skip_;
}
void DataParameter::set_random_skip(bool value) {
  set_has_random_skip();
  random_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.random_skip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationParameter::kMirrorFieldNumber;
const int TransformationParameter::kCropSizeFieldNumber;
const int TransformationParameter::kAugmentSizeFieldNumber;
const int TransformationParameter::kMeanValueFieldNumber;
const int TransformationParameter::kAlterColorFieldNumber;
const int TransformationParameter::kPadImgFieldNumber;
const int TransformationParameter::kSimpleFieldNumber;
const int TransformationParameter::kCenterCropFieldNumber;
const int TransformationParameter::kIgnoreLabelFieldNumber;
const int TransformationParameter::kRandomScaleFieldNumber;
const int TransformationParameter::kRandomAspectFieldNumber;
const int TransformationParameter::kResolutionFieldNumber;
const int TransformationParameter::kClassesFieldNumber;
const int TransformationParameter::kRandomRotateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationParameter::TransformationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TransformationParameter)
}
TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mean_value_(from.mean_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&crop_size_, &from.crop_size_,
    reinterpret_cast<char*>(&classes_) -
    reinterpret_cast<char*>(&crop_size_) + sizeof(classes_));
  // @@protoc_insertion_point(copy_constructor:caffe.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&crop_size_, 0, reinterpret_cast<char*>(&random_rotate_) -
    reinterpret_cast<char*>(&crop_size_) + sizeof(random_rotate_));
  mirror_ = true;
  alter_color_ = true;
  random_scale_ = true;
  ignore_label_ = 255;
  resolution_ = 1;
  classes_ = 21;
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:caffe.TransformationParameter)
  SharedDtor();
}

void TransformationParameter::SharedDtor() {
}

void TransformationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[7].descriptor;
}

const TransformationParameter& TransformationParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransformationParameter* TransformationParameter::New(::google::protobuf::Arena* arena) const {
  TransformationParameter* n = new TransformationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TransformationParameter)
  mean_value_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&crop_size_, 0, reinterpret_cast<char*>(&random_rotate_) -
      reinterpret_cast<char*>(&crop_size_) + sizeof(random_rotate_));
    mirror_ = true;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    alter_color_ = true;
    random_scale_ = true;
    ignore_label_ = 255;
    resolution_ = 1;
    classes_ = 21;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransformationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TransformationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool mirror = 1 [default = true];
      case 1: {
        if (tag == 8u) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_size = 2 [default = 0];
      case 2: {
        if (tag == 16u) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 augment_size = 3 [default = 0];
      case 3: {
        if (tag == 24u) {
          set_has_augment_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &augment_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean_value = 4;
      case 4: {
        if (tag == 37u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_mean_value())));
        } else if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool alter_color = 5 [default = true];
      case 5: {
        if (tag == 40u) {
          set_has_alter_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alter_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pad_img = 6 [default = false];
      case 6: {
        if (tag == 48u) {
          set_has_pad_img();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pad_img_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool simple = 7 [default = false];
      case 7: {
        if (tag == 56u) {
          set_has_simple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool center_crop = 8 [default = false];
      case 8: {
        if (tag == 64u) {
          set_has_center_crop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &center_crop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ignore_label = 9 [default = 255];
      case 9: {
        if (tag == 72u) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool random_scale = 10 [default = true];
      case 10: {
        if (tag == 80u) {
          set_has_random_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool random_aspect = 11 [default = false];
      case 11: {
        if (tag == 88u) {
          set_has_random_aspect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_aspect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resolution = 12 [default = 1];
      case 12: {
        if (tag == 96u) {
          set_has_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 classes = 13 [default = 21];
      case 13: {
        if (tag == 104u) {
          set_has_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool random_rotate = 14 [default = false];
      case 14: {
        if (tag == 112u) {
          set_has_random_rotate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_rotate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TransformationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TransformationParameter)
  return false;
#undef DO_
}

void TransformationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TransformationParameter)
  // optional bool mirror = 1 [default = true];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->mirror(), output);
  }

  // optional int32 crop_size = 2 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->crop_size(), output);
  }

  // optional int32 augment_size = 3 [default = 0];
  if (has_augment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->augment_size(), output);
  }

  // repeated float mean_value = 4;
  for (int i = 0; i < this->mean_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->mean_value(i), output);
  }

  // optional bool alter_color = 5 [default = true];
  if (has_alter_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->alter_color(), output);
  }

  // optional bool pad_img = 6 [default = false];
  if (has_pad_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pad_img(), output);
  }

  // optional bool simple = 7 [default = false];
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->simple(), output);
  }

  // optional bool center_crop = 8 [default = false];
  if (has_center_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->center_crop(), output);
  }

  // optional int32 ignore_label = 9 [default = 255];
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ignore_label(), output);
  }

  // optional bool random_scale = 10 [default = true];
  if (has_random_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->random_scale(), output);
  }

  // optional bool random_aspect = 11 [default = false];
  if (has_random_aspect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->random_aspect(), output);
  }

  // optional int32 resolution = 12 [default = 1];
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->resolution(), output);
  }

  // optional int32 classes = 13 [default = 21];
  if (has_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->classes(), output);
  }

  // optional bool random_rotate = 14 [default = false];
  if (has_random_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->random_rotate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TransformationParameter)
}

::google::protobuf::uint8* TransformationParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TransformationParameter)
  // optional bool mirror = 1 [default = true];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->mirror(), target);
  }

  // optional int32 crop_size = 2 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->crop_size(), target);
  }

  // optional int32 augment_size = 3 [default = 0];
  if (has_augment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->augment_size(), target);
  }

  // repeated float mean_value = 4;
  for (int i = 0; i < this->mean_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->mean_value(i), target);
  }

  // optional bool alter_color = 5 [default = true];
  if (has_alter_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->alter_color(), target);
  }

  // optional bool pad_img = 6 [default = false];
  if (has_pad_img()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pad_img(), target);
  }

  // optional bool simple = 7 [default = false];
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->simple(), target);
  }

  // optional bool center_crop = 8 [default = false];
  if (has_center_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->center_crop(), target);
  }

  // optional int32 ignore_label = 9 [default = 255];
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ignore_label(), target);
  }

  // optional bool random_scale = 10 [default = true];
  if (has_random_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->random_scale(), target);
  }

  // optional bool random_aspect = 11 [default = false];
  if (has_random_aspect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->random_aspect(), target);
  }

  // optional int32 resolution = 12 [default = 1];
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->resolution(), target);
  }

  // optional int32 classes = 13 [default = 21];
  if (has_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->classes(), target);
  }

  // optional bool random_rotate = 14 [default = false];
  if (has_random_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->random_rotate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TransformationParameter)
  return target;
}

size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TransformationParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float mean_value = 4;
  {
    unsigned int count = this->mean_value_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 crop_size = 2 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crop_size());
    }

    // optional int32 augment_size = 3 [default = 0];
    if (has_augment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->augment_size());
    }

    // optional bool pad_img = 6 [default = false];
    if (has_pad_img()) {
      total_size += 1 + 1;
    }

    // optional bool simple = 7 [default = false];
    if (has_simple()) {
      total_size += 1 + 1;
    }

    // optional bool center_crop = 8 [default = false];
    if (has_center_crop()) {
      total_size += 1 + 1;
    }

    // optional bool random_aspect = 11 [default = false];
    if (has_random_aspect()) {
      total_size += 1 + 1;
    }

    // optional bool random_rotate = 14 [default = false];
    if (has_random_rotate()) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 1 [default = true];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool alter_color = 5 [default = true];
    if (has_alter_color()) {
      total_size += 1 + 1;
    }

    // optional bool random_scale = 10 [default = true];
    if (has_random_scale()) {
      total_size += 1 + 1;
    }

    // optional int32 ignore_label = 9 [default = 255];
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional int32 resolution = 12 [default = 1];
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolution());
    }

    // optional int32 classes = 13 [default = 21];
    if (has_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TransformationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TransformationParameter)
    MergeFrom(*source);
  }
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mean_value_.MergeFrom(from.mean_value_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_augment_size()) {
      set_augment_size(from.augment_size());
    }
    if (from.has_pad_img()) {
      set_pad_img(from.pad_img());
    }
    if (from.has_simple()) {
      set_simple(from.simple());
    }
    if (from.has_center_crop()) {
      set_center_crop(from.center_crop());
    }
    if (from.has_random_aspect()) {
      set_random_aspect(from.random_aspect());
    }
    if (from.has_random_rotate()) {
      set_random_rotate(from.random_rotate());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  if (from._has_bits_[8 / 32] & 7936u) {
    if (from.has_alter_color()) {
      set_alter_color(from.alter_color());
    }
    if (from.has_random_scale()) {
      set_random_scale(from.random_scale());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_classes()) {
      set_classes(from.classes());
    }
  }
}

void TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {
  return true;
}

void TransformationParameter::Swap(TransformationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationParameter::InternalSwap(TransformationParameter* other) {
  mean_value_.UnsafeArenaSwap(&other->mean_value_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(augment_size_, other->augment_size_);
  std::swap(pad_img_, other->pad_img_);
  std::swap(simple_, other->simple_);
  std::swap(center_crop_, other->center_crop_);
  std::swap(random_aspect_, other->random_aspect_);
  std::swap(random_rotate_, other->random_rotate_);
  std::swap(mirror_, other->mirror_);
  std::swap(alter_color_, other->alter_color_);
  std::swap(random_scale_, other->random_scale_);
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(resolution_, other->resolution_);
  std::swap(classes_, other->classes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformationParameter

// optional bool mirror = 1 [default = true];
bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
void TransformationParameter::clear_mirror() {
  mirror_ = true;
  clear_has_mirror();
}
bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional int32 crop_size = 2 [default = 0];
bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformationParameter::clear_crop_size() {
  crop_size_ = 0;
  clear_has_crop_size();
}
::google::protobuf::int32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
void TransformationParameter::set_crop_size(::google::protobuf::int32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional int32 augment_size = 3 [default = 0];
bool TransformationParameter::has_augment_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformationParameter::set_has_augment_size() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformationParameter::clear_has_augment_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformationParameter::clear_augment_size() {
  augment_size_ = 0;
  clear_has_augment_size();
}
::google::protobuf::int32 TransformationParameter::augment_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.augment_size)
  return augment_size_;
}
void TransformationParameter::set_augment_size(::google::protobuf::int32 value) {
  set_has_augment_size();
  augment_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.augment_size)
}

// repeated float mean_value = 4;
int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool alter_color = 5 [default = true];
bool TransformationParameter::has_alter_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TransformationParameter::set_has_alter_color() {
  _has_bits_[0] |= 0x00000100u;
}
void TransformationParameter::clear_has_alter_color() {
  _has_bits_[0] &= ~0x00000100u;
}
void TransformationParameter::clear_alter_color() {
  alter_color_ = true;
  clear_has_alter_color();
}
bool TransformationParameter::alter_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.alter_color)
  return alter_color_;
}
void TransformationParameter::set_alter_color(bool value) {
  set_has_alter_color();
  alter_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.alter_color)
}

// optional bool pad_img = 6 [default = false];
bool TransformationParameter::has_pad_img() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformationParameter::set_has_pad_img() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformationParameter::clear_has_pad_img() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformationParameter::clear_pad_img() {
  pad_img_ = false;
  clear_has_pad_img();
}
bool TransformationParameter::pad_img() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.pad_img)
  return pad_img_;
}
void TransformationParameter::set_pad_img(bool value) {
  set_has_pad_img();
  pad_img_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.pad_img)
}

// optional bool simple = 7 [default = false];
bool TransformationParameter::has_simple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformationParameter::set_has_simple() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformationParameter::clear_has_simple() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformationParameter::clear_simple() {
  simple_ = false;
  clear_has_simple();
}
bool TransformationParameter::simple() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.simple)
  return simple_;
}
void TransformationParameter::set_simple(bool value) {
  set_has_simple();
  simple_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.simple)
}

// optional bool center_crop = 8 [default = false];
bool TransformationParameter::has_center_crop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransformationParameter::set_has_center_crop() {
  _has_bits_[0] |= 0x00000010u;
}
void TransformationParameter::clear_has_center_crop() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransformationParameter::clear_center_crop() {
  center_crop_ = false;
  clear_has_center_crop();
}
bool TransformationParameter::center_crop() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.center_crop)
  return center_crop_;
}
void TransformationParameter::set_center_crop(bool value) {
  set_has_center_crop();
  center_crop_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.center_crop)
}

// optional int32 ignore_label = 9 [default = 255];
bool TransformationParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TransformationParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000400u;
}
void TransformationParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000400u;
}
void TransformationParameter::clear_ignore_label() {
  ignore_label_ = 255;
  clear_has_ignore_label();
}
::google::protobuf::int32 TransformationParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.ignore_label)
  return ignore_label_;
}
void TransformationParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.ignore_label)
}

// optional bool random_scale = 10 [default = true];
bool TransformationParameter::has_random_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TransformationParameter::set_has_random_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void TransformationParameter::clear_has_random_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void TransformationParameter::clear_random_scale() {
  random_scale_ = true;
  clear_has_random_scale();
}
bool TransformationParameter::random_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.random_scale)
  return random_scale_;
}
void TransformationParameter::set_random_scale(bool value) {
  set_has_random_scale();
  random_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.random_scale)
}

// optional bool random_aspect = 11 [default = false];
bool TransformationParameter::has_random_aspect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransformationParameter::set_has_random_aspect() {
  _has_bits_[0] |= 0x00000020u;
}
void TransformationParameter::clear_has_random_aspect() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransformationParameter::clear_random_aspect() {
  random_aspect_ = false;
  clear_has_random_aspect();
}
bool TransformationParameter::random_aspect() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.random_aspect)
  return random_aspect_;
}
void TransformationParameter::set_random_aspect(bool value) {
  set_has_random_aspect();
  random_aspect_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.random_aspect)
}

// optional int32 resolution = 12 [default = 1];
bool TransformationParameter::has_resolution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TransformationParameter::set_has_resolution() {
  _has_bits_[0] |= 0x00000800u;
}
void TransformationParameter::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000800u;
}
void TransformationParameter::clear_resolution() {
  resolution_ = 1;
  clear_has_resolution();
}
::google::protobuf::int32 TransformationParameter::resolution() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.resolution)
  return resolution_;
}
void TransformationParameter::set_resolution(::google::protobuf::int32 value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.resolution)
}

// optional int32 classes = 13 [default = 21];
bool TransformationParameter::has_classes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TransformationParameter::set_has_classes() {
  _has_bits_[0] |= 0x00001000u;
}
void TransformationParameter::clear_has_classes() {
  _has_bits_[0] &= ~0x00001000u;
}
void TransformationParameter::clear_classes() {
  classes_ = 21;
  clear_has_classes();
}
::google::protobuf::int32 TransformationParameter::classes() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.classes)
  return classes_;
}
void TransformationParameter::set_classes(::google::protobuf::int32 value) {
  set_has_classes();
  classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.classes)
}

// optional bool random_rotate = 14 [default = false];
bool TransformationParameter::has_random_rotate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TransformationParameter::set_has_random_rotate() {
  _has_bits_[0] |= 0x00000040u;
}
void TransformationParameter::clear_has_random_rotate() {
  _has_bits_[0] &= ~0x00000040u;
}
void TransformationParameter::clear_random_rotate() {
  random_rotate_ = false;
  clear_has_random_rotate();
}
bool TransformationParameter::random_rotate() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.random_rotate)
  return random_rotate_;
}
void TransformationParameter::set_random_rotate(bool value) {
  set_has_random_rotate();
  random_rotate_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.random_rotate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
const int ParamSpec::kWeightNormFieldNumber;
const int ParamSpec::kWeightPenaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParamSpec)
}
ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lr_mult_, &from.lr_mult_,
    reinterpret_cast<char*>(&weight_penalty_) -
    reinterpret_cast<char*>(&lr_mult_) + sizeof(weight_penalty_));
  // @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lr_mult_, 0, reinterpret_cast<char*>(&weight_penalty_) -
    reinterpret_cast<char*>(&lr_mult_) + sizeof(weight_penalty_));
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:caffe.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[8].descriptor;
}

const ParamSpec& ParamSpec::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
  ParamSpec* n = new ParamSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParamSpec)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&lr_mult_, 0, reinterpret_cast<char*>(&weight_penalty_) -
      reinterpret_cast<char*>(&lr_mult_) + sizeof(weight_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lr_mult = 1;
      case 1: {
        if (tag == 13u) {
          set_has_lr_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decay_mult = 2;
      case 2: {
        if (tag == 21u) {
          set_has_decay_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_norm = 3;
      case 3: {
        if (tag == 29u) {
          set_has_weight_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_penalty = 4 [default = 0];
      case 4: {
        if (tag == 37u) {
          set_has_weight_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
  // optional float lr_mult = 1;
  if (has_lr_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lr_mult(), output);
  }

  // optional float decay_mult = 2;
  if (has_decay_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->decay_mult(), output);
  }

  // optional float weight_norm = 3;
  if (has_weight_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight_norm(), output);
  }

  // optional float weight_penalty = 4 [default = 0];
  if (has_weight_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->weight_penalty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
  // optional float lr_mult = 1;
  if (has_lr_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lr_mult(), target);
  }

  // optional float decay_mult = 2;
  if (has_decay_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->decay_mult(), target);
  }

  // optional float weight_norm = 3;
  if (has_weight_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight_norm(), target);
  }

  // optional float weight_penalty = 4 [default = 0];
  if (has_weight_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->weight_penalty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
  return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParamSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float lr_mult = 1;
    if (has_lr_mult()) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 2;
    if (has_decay_mult()) {
      total_size += 1 + 4;
    }

    // optional float weight_norm = 3;
    if (has_weight_norm()) {
      total_size += 1 + 4;
    }

    // optional float weight_penalty = 4 [default = 0];
    if (has_weight_penalty()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParamSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParamSpec)
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_lr_mult()) {
      set_lr_mult(from.lr_mult());
    }
    if (from.has_decay_mult()) {
      set_decay_mult(from.decay_mult());
    }
    if (from.has_weight_norm()) {
      set_weight_norm(from.weight_norm());
    }
    if (from.has_weight_penalty()) {
      set_weight_penalty(from.weight_penalty());
    }
  }
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {
  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
  std::swap(lr_mult_, other->lr_mult_);
  std::swap(decay_mult_, other->decay_mult_);
  std::swap(weight_norm_, other->weight_norm_);
  std::swap(weight_penalty_, other->weight_penalty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamSpec

// optional float lr_mult = 1;
bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000001u;
}
void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParamSpec::clear_lr_mult() {
  lr_mult_ = 0;
  clear_has_lr_mult();
}
float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 2;
bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000002u;
}
void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParamSpec::clear_decay_mult() {
  decay_mult_ = 0;
  clear_has_decay_mult();
}
float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

// optional float weight_norm = 3;
bool ParamSpec::has_weight_norm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParamSpec::set_has_weight_norm() {
  _has_bits_[0] |= 0x00000004u;
}
void ParamSpec::clear_has_weight_norm() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParamSpec::clear_weight_norm() {
  weight_norm_ = 0;
  clear_has_weight_norm();
}
float ParamSpec::weight_norm() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.weight_norm)
  return weight_norm_;
}
void ParamSpec::set_weight_norm(float value) {
  set_has_weight_norm();
  weight_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.weight_norm)
}

// optional float weight_penalty = 4 [default = 0];
bool ParamSpec::has_weight_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParamSpec::set_has_weight_penalty() {
  _has_bits_[0] |= 0x00000008u;
}
void ParamSpec::clear_has_weight_penalty() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParamSpec::clear_weight_penalty() {
  weight_penalty_ = 0;
  clear_has_weight_penalty();
}
float ParamSpec::weight_penalty() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.weight_penalty)
  return weight_penalty_;
}
void ParamSpec::set_weight_penalty(float value) {
  set_has_weight_penalty();
  weight_penalty_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.weight_penalty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerProp::kLossWeightFieldNumber;
const int LayerProp::kNeedBackwardFieldNumber;
const int LayerProp::kSecLossWeightFieldNumber;
const int LayerProp::kNormValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerProp::LayerProp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerProp)
}
LayerProp::LayerProp(const LayerProp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loss_weight_, &from.loss_weight_,
    reinterpret_cast<char*>(&norm_value_) -
    reinterpret_cast<char*>(&loss_weight_) + sizeof(norm_value_));
  // @@protoc_insertion_point(copy_constructor:caffe.LayerProp)
}

void LayerProp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&loss_weight_, 0, reinterpret_cast<char*>(&sec_loss_weight_) -
    reinterpret_cast<char*>(&loss_weight_) + sizeof(sec_loss_weight_));
  need_backward_ = true;
  norm_value_ = 1;
}

LayerProp::~LayerProp() {
  // @@protoc_insertion_point(destructor:caffe.LayerProp)
  SharedDtor();
}

void LayerProp::SharedDtor() {
}

void LayerProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerProp::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[9].descriptor;
}

const LayerProp& LayerProp::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LayerProp* LayerProp::New(::google::protobuf::Arena* arena) const {
  LayerProp* n = new LayerProp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerProp::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerProp)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&loss_weight_, 0, reinterpret_cast<char*>(&sec_loss_weight_) -
      reinterpret_cast<char*>(&loss_weight_) + sizeof(sec_loss_weight_));
    need_backward_ = true;
    norm_value_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayerProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerProp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float loss_weight = 2 [default = 0];
      case 2: {
        if (tag == 21u) {
          set_has_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_backward = 3 [default = true];
      case 3: {
        if (tag == 24u) {
          set_has_need_backward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sec_loss_weight = 4 [default = 0];
      case 4: {
        if (tag == 37u) {
          set_has_sec_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sec_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float norm_value = 5 [default = 1];
      case 5: {
        if (tag == 45u) {
          set_has_norm_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &norm_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerProp)
  return false;
#undef DO_
}

void LayerProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerProp)
  // optional float loss_weight = 2 [default = 0];
  if (has_loss_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->loss_weight(), output);
  }

  // optional bool need_backward = 3 [default = true];
  if (has_need_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->need_backward(), output);
  }

  // optional float sec_loss_weight = 4 [default = 0];
  if (has_sec_loss_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sec_loss_weight(), output);
  }

  // optional float norm_value = 5 [default = 1];
  if (has_norm_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->norm_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerProp)
}

::google::protobuf::uint8* LayerProp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerProp)
  // optional float loss_weight = 2 [default = 0];
  if (has_loss_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->loss_weight(), target);
  }

  // optional bool need_backward = 3 [default = true];
  if (has_need_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->need_backward(), target);
  }

  // optional float sec_loss_weight = 4 [default = 0];
  if (has_sec_loss_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sec_loss_weight(), target);
  }

  // optional float norm_value = 5 [default = 1];
  if (has_norm_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->norm_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerProp)
  return target;
}

size_t LayerProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerProp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float loss_weight = 2 [default = 0];
    if (has_loss_weight()) {
      total_size += 1 + 4;
    }

    // optional float sec_loss_weight = 4 [default = 0];
    if (has_sec_loss_weight()) {
      total_size += 1 + 4;
    }

    // optional bool need_backward = 3 [default = true];
    if (has_need_backward()) {
      total_size += 1 + 1;
    }

    // optional float norm_value = 5 [default = 1];
    if (has_norm_value()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerProp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerProp)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerProp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerProp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerProp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerProp)
    MergeFrom(*source);
  }
}

void LayerProp::MergeFrom(const LayerProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_loss_weight()) {
      set_loss_weight(from.loss_weight());
    }
    if (from.has_sec_loss_weight()) {
      set_sec_loss_weight(from.sec_loss_weight());
    }
    if (from.has_need_backward()) {
      set_need_backward(from.need_backward());
    }
    if (from.has_norm_value()) {
      set_norm_value(from.norm_value());
    }
  }
}

void LayerProp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerProp::CopyFrom(const LayerProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerProp::IsInitialized() const {
  return true;
}

void LayerProp::Swap(LayerProp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerProp::InternalSwap(LayerProp* other) {
  std::swap(loss_weight_, other->loss_weight_);
  std::swap(sec_loss_weight_, other->sec_loss_weight_);
  std::swap(need_backward_, other->need_backward_);
  std::swap(norm_value_, other->norm_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerProp::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerProp

// optional float loss_weight = 2 [default = 0];
bool LayerProp::has_loss_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerProp::set_has_loss_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerProp::clear_has_loss_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerProp::clear_loss_weight() {
  loss_weight_ = 0;
  clear_has_loss_weight();
}
float LayerProp::loss_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProp.loss_weight)
  return loss_weight_;
}
void LayerProp::set_loss_weight(float value) {
  set_has_loss_weight();
  loss_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerProp.loss_weight)
}

// optional bool need_backward = 3 [default = true];
bool LayerProp::has_need_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayerProp::set_has_need_backward() {
  _has_bits_[0] |= 0x00000004u;
}
void LayerProp::clear_has_need_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayerProp::clear_need_backward() {
  need_backward_ = true;
  clear_has_need_backward();
}
bool LayerProp::need_backward() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProp.need_backward)
  return need_backward_;
}
void LayerProp::set_need_backward(bool value) {
  set_has_need_backward();
  need_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerProp.need_backward)
}

// optional float sec_loss_weight = 4 [default = 0];
bool LayerProp::has_sec_loss_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerProp::set_has_sec_loss_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerProp::clear_has_sec_loss_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerProp::clear_sec_loss_weight() {
  sec_loss_weight_ = 0;
  clear_has_sec_loss_weight();
}
float LayerProp::sec_loss_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProp.sec_loss_weight)
  return sec_loss_weight_;
}
void LayerProp::set_sec_loss_weight(float value) {
  set_has_sec_loss_weight();
  sec_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerProp.sec_loss_weight)
}

// optional float norm_value = 5 [default = 1];
bool LayerProp::has_norm_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayerProp::set_has_norm_value() {
  _has_bits_[0] |= 0x00000008u;
}
void LayerProp::clear_has_norm_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayerProp::clear_norm_value() {
  norm_value_ = 1;
  clear_has_norm_value();
}
float LayerProp::norm_value() const {
  // @@protoc_insertion_point(field_get:caffe.LayerProp.norm_value)
  return norm_value_;
}
void LayerProp::set_norm_value(float value) {
  set_has_norm_value();
  norm_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerProp.norm_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kBottomFlowFieldNumber;
const int LayerParameter::kTopFlowFieldNumber;
const int LayerParameter::kIncludeFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kBranchFieldNumber;
const int LayerParameter::kBindKeyFieldNumber;
const int LayerParameter::kBindValueFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kTransformParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kShortcutParamFieldNumber;
const int LayerParameter::kAccuracyParamFieldNumber;
const int LayerParameter::kNormParamFieldNumber;
const int LayerParameter::kContextPoolingParamFieldNumber;
const int LayerParameter::kCrfParamFieldNumber;
const int LayerParameter::kEltwiseParamFieldNumber;
const int LayerParameter::kParseEvaluateParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kInterpParamFieldNumber;
const int LayerParameter::kSecParamFieldNumber;
const int LayerParameter::kNoiseParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kShapeParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kFirstMomentFieldNumber;
const int LayerParameter::kSecondMomentFieldNumber;
const int LayerParameter::kBottomIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bottom_(from.bottom_),
      top_(from.top_),
      bottom_flow_(from.bottom_flow_),
      top_flow_(from.top_flow_),
      param_(from.param_),
      blobs_(from.blobs_),
      branch_(from.branch_),
      first_moment_(from.first_moment_),
      second_moment_(from.second_moment_),
      bottom_index_(from.bottom_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  bind_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bind_key()) {
    bind_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_key_);
  }
  bind_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bind_value()) {
    bind_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_value_);
  }
  if (from.has_include()) {
    include_ = new ::caffe::LayerProp(*from.include_);
  } else {
    include_ = NULL;
  }
  if (from.has_data_param()) {
    data_param_ = new ::caffe::DataParameter(*from.data_param_);
  } else {
    data_param_ = NULL;
  }
  if (from.has_transform_param()) {
    transform_param_ = new ::caffe::TransformationParameter(*from.transform_param_);
  } else {
    transform_param_ = NULL;
  }
  if (from.has_convolution_param()) {
    convolution_param_ = new ::caffe::ConvolutionParameter(*from.convolution_param_);
  } else {
    convolution_param_ = NULL;
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::caffe::LossParameter(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  if (from.has_inner_product_param()) {
    inner_product_param_ = new ::caffe::InnerProductParameter(*from.inner_product_param_);
  } else {
    inner_product_param_ = NULL;
  }
  if (from.has_batch_norm_param()) {
    batch_norm_param_ = new ::caffe::BatchNormParameter(*from.batch_norm_param_);
  } else {
    batch_norm_param_ = NULL;
  }
  if (from.has_shortcut_param()) {
    shortcut_param_ = new ::caffe::ShortcutParameter(*from.shortcut_param_);
  } else {
    shortcut_param_ = NULL;
  }
  if (from.has_accuracy_param()) {
    accuracy_param_ = new ::caffe::AccuracyParameter(*from.accuracy_param_);
  } else {
    accuracy_param_ = NULL;
  }
  if (from.has_norm_param()) {
    norm_param_ = new ::caffe::NormalizeParameter(*from.norm_param_);
  } else {
    norm_param_ = NULL;
  }
  if (from.has_context_pooling_param()) {
    context_pooling_param_ = new ::caffe::ContextPoolingParameter(*from.context_pooling_param_);
  } else {
    context_pooling_param_ = NULL;
  }
  if (from.has_crf_param()) {
    crf_param_ = new ::caffe::CRFParameter(*from.crf_param_);
  } else {
    crf_param_ = NULL;
  }
  if (from.has_eltwise_param()) {
    eltwise_param_ = new ::caffe::EltwiseParameter(*from.eltwise_param_);
  } else {
    eltwise_param_ = NULL;
  }
  if (from.has_parse_evaluate_param()) {
    parse_evaluate_param_ = new ::caffe::ParseEvaluateParameter(*from.parse_evaluate_param_);
  } else {
    parse_evaluate_param_ = NULL;
  }
  if (from.has_dropout_param()) {
    dropout_param_ = new ::caffe::DropoutParameter(*from.dropout_param_);
  } else {
    dropout_param_ = NULL;
  }
  if (from.has_interp_param()) {
    interp_param_ = new ::caffe::InterpParameter(*from.interp_param_);
  } else {
    interp_param_ = NULL;
  }
  if (from.has_sec_param()) {
    sec_param_ = new ::caffe::SecParameter(*from.sec_param_);
  } else {
    sec_param_ = NULL;
  }
  if (from.has_noise_param()) {
    noise_param_ = new ::caffe::NoiseParameter(*from.noise_param_);
  } else {
    noise_param_ = NULL;
  }
  if (from.has_relu_param()) {
    relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = NULL;
  }
  if (from.has_shape_param()) {
    shape_param_ = new ::caffe::BlobShape(*from.shape_param_);
  } else {
    shape_param_ = NULL;
  }
  if (from.has_concat_param()) {
    concat_param_ = new ::caffe::ConcatParameter(*from.concat_param_);
  } else {
    concat_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:caffe.LayerParameter)
}

void LayerParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bind_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bind_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&include_, 0, reinterpret_cast<char*>(&concat_param_) -
    reinterpret_cast<char*>(&include_) + sizeof(concat_param_));
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bind_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bind_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete include_;
  }
  if (this != internal_default_instance()) {
    delete data_param_;
  }
  if (this != internal_default_instance()) {
    delete transform_param_;
  }
  if (this != internal_default_instance()) {
    delete convolution_param_;
  }
  if (this != internal_default_instance()) {
    delete loss_param_;
  }
  if (this != internal_default_instance()) {
    delete pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete inner_product_param_;
  }
  if (this != internal_default_instance()) {
    delete batch_norm_param_;
  }
  if (this != internal_default_instance()) {
    delete shortcut_param_;
  }
  if (this != internal_default_instance()) {
    delete accuracy_param_;
  }
  if (this != internal_default_instance()) {
    delete norm_param_;
  }
  if (this != internal_default_instance()) {
    delete context_pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete crf_param_;
  }
  if (this != internal_default_instance()) {
    delete eltwise_param_;
  }
  if (this != internal_default_instance()) {
    delete parse_evaluate_param_;
  }
  if (this != internal_default_instance()) {
    delete dropout_param_;
  }
  if (this != internal_default_instance()) {
    delete interp_param_;
  }
  if (this != internal_default_instance()) {
    delete sec_param_;
  }
  if (this != internal_default_instance()) {
    delete noise_param_;
  }
  if (this != internal_default_instance()) {
    delete relu_param_;
  }
  if (this != internal_default_instance()) {
    delete shape_param_;
  }
  if (this != internal_default_instance()) {
    delete concat_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[10].descriptor;
}

const LayerParameter& LayerParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
  LayerParameter* n = new LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerParameter)
  bottom_.Clear();
  top_.Clear();
  bottom_flow_.Clear();
  top_flow_.Clear();
  param_.Clear();
  blobs_.Clear();
  branch_.Clear();
  first_moment_.Clear();
  second_moment_.Clear();
  bottom_index_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_bind_key()) {
      GOOGLE_DCHECK(!bind_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bind_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_bind_value()) {
      GOOGLE_DCHECK(!bind_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bind_value_.UnsafeRawStringPointer())->clear();
    }
    if (has_include()) {
      GOOGLE_DCHECK(include_ != NULL);
      include_->::caffe::LayerProp::Clear();
    }
    if (has_data_param()) {
      GOOGLE_DCHECK(data_param_ != NULL);
      data_param_->::caffe::DataParameter::Clear();
    }
    if (has_transform_param()) {
      GOOGLE_DCHECK(transform_param_ != NULL);
      transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_convolution_param()) {
      GOOGLE_DCHECK(convolution_param_ != NULL);
      convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_loss_param()) {
      GOOGLE_DCHECK(loss_param_ != NULL);
      loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_pooling_param()) {
      GOOGLE_DCHECK(pooling_param_ != NULL);
      pooling_param_->::caffe::PoolingParameter::Clear();
    }
    if (has_inner_product_param()) {
      GOOGLE_DCHECK(inner_product_param_ != NULL);
      inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_batch_norm_param()) {
      GOOGLE_DCHECK(batch_norm_param_ != NULL);
      batch_norm_param_->::caffe::BatchNormParameter::Clear();
    }
    if (has_shortcut_param()) {
      GOOGLE_DCHECK(shortcut_param_ != NULL);
      shortcut_param_->::caffe::ShortcutParameter::Clear();
    }
    if (has_accuracy_param()) {
      GOOGLE_DCHECK(accuracy_param_ != NULL);
      accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_norm_param()) {
      GOOGLE_DCHECK(norm_param_ != NULL);
      norm_param_->::caffe::NormalizeParameter::Clear();
    }
    if (has_context_pooling_param()) {
      GOOGLE_DCHECK(context_pooling_param_ != NULL);
      context_pooling_param_->::caffe::ContextPoolingParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_crf_param()) {
      GOOGLE_DCHECK(crf_param_ != NULL);
      crf_param_->::caffe::CRFParameter::Clear();
    }
    if (has_eltwise_param()) {
      GOOGLE_DCHECK(eltwise_param_ != NULL);
      eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_parse_evaluate_param()) {
      GOOGLE_DCHECK(parse_evaluate_param_ != NULL);
      parse_evaluate_param_->::caffe::ParseEvaluateParameter::Clear();
    }
    if (has_dropout_param()) {
      GOOGLE_DCHECK(dropout_param_ != NULL);
      dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_interp_param()) {
      GOOGLE_DCHECK(interp_param_ != NULL);
      interp_param_->::caffe::InterpParameter::Clear();
    }
    if (has_sec_param()) {
      GOOGLE_DCHECK(sec_param_ != NULL);
      sec_param_->::caffe::SecParameter::Clear();
    }
    if (has_noise_param()) {
      GOOGLE_DCHECK(noise_param_ != NULL);
      noise_param_->::caffe::NoiseParameter::Clear();
    }
    if (has_relu_param()) {
      GOOGLE_DCHECK(relu_param_ != NULL);
      relu_param_->::caffe::ReLUParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    if (has_shape_param()) {
      GOOGLE_DCHECK(shape_param_ != NULL);
      shape_param_->::caffe::BlobShape::Clear();
    }
    if (has_concat_param()) {
      GOOGLE_DCHECK(concat_param_ != NULL);
      concat_param_->::caffe::ConcatParameter::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string top = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LayerProp include = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_include()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.ParamSpec param = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.BlobProto blobs = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.LayerParameter branch = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_branch()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional string bind_key = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bind_key().data(), this->bind_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.bind_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bind_value = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bind_value().data(), this->bind_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.bind_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DataParameter data_param = 25;
      case 25: {
        if (tag == 202u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 26;
      case 26: {
        if (tag == 210u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 27;
      case 27: {
        if (tag == 218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LossParameter loss_param = 28;
      case 28: {
        if (tag == 226u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 29;
      case 29: {
        if (tag == 234u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BatchNormParameter batch_norm_param = 31;
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_norm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ShortcutParameter shortcut_param = 32;
      case 32: {
        if (tag == 258u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortcut_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 33;
      case 33: {
        if (tag == 266u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NormalizeParameter norm_param = 34;
      case 34: {
        if (tag == 274u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_norm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ContextPoolingParameter context_pooling_param = 35;
      case 35: {
        if (tag == 282u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.CRFParameter crf_param = 36;
      case 36: {
        if (tag == 290u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crf_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 37;
      case 37: {
        if (tag == 298u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ParseEvaluateParameter parse_evaluate_param = 38;
      case 38: {
        if (tag == 306u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parse_evaluate_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 39;
      case 39: {
        if (tag == 314u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InterpParameter interp_param = 40;
      case 40: {
        if (tag == 322u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SecParameter sec_param = 41;
      case 41: {
        if (tag == 330u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sec_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NoiseParameter noise_param = 42;
      case 42: {
        if (tag == 338u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noise_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 43;
      case 43: {
        if (tag == 346u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BlobShape shape_param = 44;
      case 44: {
        if (tag == 354u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 45;
      case 45: {
        if (tag == 362u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto first_moment = 46;
      case 46: {
        if (tag == 370u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_first_moment()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.BlobProto second_moment = 47;
      case 47: {
        if (tag == 378u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_second_moment()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated int32 bottom_index = 48;
      case 48: {
        if (tag == 384u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 384u, input, this->mutable_bottom_index())));
        } else if (tag == 386u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bottom_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bottom_flow = 101;
      case 101: {
        if (tag == 808u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 808u, input, this->mutable_bottom_flow())));
        } else if (tag == 810u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bottom_flow())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 top_flow = 102;
      case 102: {
        if (tag == 816u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 816u, input, this->mutable_top_flow())));
        } else if (tag == 818u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_top_flow())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(i), output);
  }

  // optional .caffe.LayerProp include = 5;
  if (has_include()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->include_, output);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(i), output);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blobs(i), output);
  }

  // repeated .caffe.LayerParameter branch = 8;
  for (unsigned int i = 0, n = this->branch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->branch(i), output);
  }

  // optional string bind_key = 9;
  if (has_bind_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bind_key().data(), this->bind_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bind_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bind_key(), output);
  }

  // optional string bind_value = 10;
  if (has_bind_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bind_value().data(), this->bind_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bind_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->bind_value(), output);
  }

  // optional .caffe.DataParameter data_param = 25;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->data_param_, output);
  }

  // optional .caffe.TransformationParameter transform_param = 26;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->transform_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 27;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->convolution_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 28;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->loss_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 29;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->pooling_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 30;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->inner_product_param_, output);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 31;
  if (has_batch_norm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->batch_norm_param_, output);
  }

  // optional .caffe.ShortcutParameter shortcut_param = 32;
  if (has_shortcut_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->shortcut_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 33;
  if (has_accuracy_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->accuracy_param_, output);
  }

  // optional .caffe.NormalizeParameter norm_param = 34;
  if (has_norm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->norm_param_, output);
  }

  // optional .caffe.ContextPoolingParameter context_pooling_param = 35;
  if (has_context_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->context_pooling_param_, output);
  }

  // optional .caffe.CRFParameter crf_param = 36;
  if (has_crf_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->crf_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 37;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->eltwise_param_, output);
  }

  // optional .caffe.ParseEvaluateParameter parse_evaluate_param = 38;
  if (has_parse_evaluate_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->parse_evaluate_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 39;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->dropout_param_, output);
  }

  // optional .caffe.InterpParameter interp_param = 40;
  if (has_interp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->interp_param_, output);
  }

  // optional .caffe.SecParameter sec_param = 41;
  if (has_sec_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->sec_param_, output);
  }

  // optional .caffe.NoiseParameter noise_param = 42;
  if (has_noise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->noise_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 43;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->relu_param_, output);
  }

  // optional .caffe.BlobShape shape_param = 44;
  if (has_shape_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *this->shape_param_, output);
  }

  // optional .caffe.ConcatParameter concat_param = 45;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->concat_param_, output);
  }

  // repeated .caffe.BlobProto first_moment = 46;
  for (unsigned int i = 0, n = this->first_moment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->first_moment(i), output);
  }

  // repeated .caffe.BlobProto second_moment = 47;
  for (unsigned int i = 0, n = this->second_moment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->second_moment(i), output);
  }

  // repeated int32 bottom_index = 48;
  for (int i = 0; i < this->bottom_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      48, this->bottom_index(i), output);
  }

  // repeated int32 bottom_flow = 101;
  for (int i = 0; i < this->bottom_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      101, this->bottom_flow(i), output);
  }

  // repeated int32 top_flow = 102;
  for (int i = 0; i < this->top_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      102, this->top_flow(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->top(i), target);
  }

  // optional .caffe.LayerProp include = 5;
  if (has_include()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->include_, false, target);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->param(i), false, target);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->blobs(i), false, target);
  }

  // repeated .caffe.LayerParameter branch = 8;
  for (unsigned int i = 0, n = this->branch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->branch(i), false, target);
  }

  // optional string bind_key = 9;
  if (has_bind_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bind_key().data(), this->bind_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bind_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bind_key(), target);
  }

  // optional string bind_value = 10;
  if (has_bind_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bind_value().data(), this->bind_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bind_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->bind_value(), target);
  }

  // optional .caffe.DataParameter data_param = 25;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->data_param_, false, target);
  }

  // optional .caffe.TransformationParameter transform_param = 26;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->transform_param_, false, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 27;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->convolution_param_, false, target);
  }

  // optional .caffe.LossParameter loss_param = 28;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->loss_param_, false, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 29;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->pooling_param_, false, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 30;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->inner_product_param_, false, target);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 31;
  if (has_batch_norm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->batch_norm_param_, false, target);
  }

  // optional .caffe.ShortcutParameter shortcut_param = 32;
  if (has_shortcut_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->shortcut_param_, false, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 33;
  if (has_accuracy_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->accuracy_param_, false, target);
  }

  // optional .caffe.NormalizeParameter norm_param = 34;
  if (has_norm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->norm_param_, false, target);
  }

  // optional .caffe.ContextPoolingParameter context_pooling_param = 35;
  if (has_context_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->context_pooling_param_, false, target);
  }

  // optional .caffe.CRFParameter crf_param = 36;
  if (has_crf_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->crf_param_, false, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 37;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->eltwise_param_, false, target);
  }

  // optional .caffe.ParseEvaluateParameter parse_evaluate_param = 38;
  if (has_parse_evaluate_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->parse_evaluate_param_, false, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 39;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->dropout_param_, false, target);
  }

  // optional .caffe.InterpParameter interp_param = 40;
  if (has_interp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->interp_param_, false, target);
  }

  // optional .caffe.SecParameter sec_param = 41;
  if (has_sec_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->sec_param_, false, target);
  }

  // optional .caffe.NoiseParameter noise_param = 42;
  if (has_noise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->noise_param_, false, target);
  }

  // optional .caffe.ReLUParameter relu_param = 43;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *this->relu_param_, false, target);
  }

  // optional .caffe.BlobShape shape_param = 44;
  if (has_shape_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *this->shape_param_, false, target);
  }

  // optional .caffe.ConcatParameter concat_param = 45;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *this->concat_param_, false, target);
  }

  // repeated .caffe.BlobProto first_moment = 46;
  for (unsigned int i = 0, n = this->first_moment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, this->first_moment(i), false, target);
  }

  // repeated .caffe.BlobProto second_moment = 47;
  for (unsigned int i = 0, n = this->second_moment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, this->second_moment(i), false, target);
  }

  // repeated int32 bottom_index = 48;
  for (int i = 0; i < this->bottom_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(48, this->bottom_index(i), target);
  }

  // repeated int32 bottom_flow = 101;
  for (int i = 0; i < this->bottom_flow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(101, this->bottom_flow(i), target);
  }

  // repeated int32 top_flow = 102;
  for (int i = 0; i < this->top_flow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(102, this->top_flow(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string bottom = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bottom_size());
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->top_size());
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated int32 bottom_flow = 101;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bottom_flow_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bottom_flow_size());
    total_size += data_size;
  }

  // repeated int32 top_flow = 102;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->top_flow_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->top_flow_size());
    total_size += data_size;
  }

  // repeated .caffe.ParamSpec param = 6;
  {
    unsigned int count = this->param_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(i));
    }
  }

  // repeated .caffe.BlobProto blobs = 7;
  {
    unsigned int count = this->blobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  // repeated .caffe.LayerParameter branch = 8;
  {
    unsigned int count = this->branch_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->branch(i));
    }
  }

  // repeated .caffe.BlobProto first_moment = 46;
  {
    unsigned int count = this->first_moment_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_moment(i));
    }
  }

  // repeated .caffe.BlobProto second_moment = 47;
  {
    unsigned int count = this->second_moment_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->second_moment(i));
    }
  }

  // repeated int32 bottom_index = 48;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bottom_index_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bottom_index_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string bind_key = 9;
    if (has_bind_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_key());
    }

    // optional string bind_value = 10;
    if (has_bind_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_value());
    }

    // optional .caffe.LayerProp include = 5;
    if (has_include()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->include_);
    }

    // optional .caffe.DataParameter data_param = 25;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.TransformationParameter transform_param = 26;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.ConvolutionParameter convolution_param = 27;
    if (has_convolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.LossParameter loss_param = 28;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 29;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 30;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.BatchNormParameter batch_norm_param = 31;
    if (has_batch_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_norm_param_);
    }

    // optional .caffe.ShortcutParameter shortcut_param = 32;
    if (has_shortcut_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shortcut_param_);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 33;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.NormalizeParameter norm_param = 34;
    if (has_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->norm_param_);
    }

    // optional .caffe.ContextPoolingParameter context_pooling_param = 35;
    if (has_context_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->context_pooling_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.CRFParameter crf_param = 36;
    if (has_crf_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crf_param_);
    }

    // optional .caffe.EltwiseParameter eltwise_param = 37;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ParseEvaluateParameter parse_evaluate_param = 38;
    if (has_parse_evaluate_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parse_evaluate_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 39;
    if (has_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.InterpParameter interp_param = 40;
    if (has_interp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interp_param_);
    }

    // optional .caffe.SecParameter sec_param = 41;
    if (has_sec_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sec_param_);
    }

    // optional .caffe.NoiseParameter noise_param = 42;
    if (has_noise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->noise_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 43;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional .caffe.BlobShape shape_param = 44;
    if (has_shape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_param_);
    }

    // optional .caffe.ConcatParameter concat_param = 45;
    if (has_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  bottom_flow_.MergeFrom(from.bottom_flow_);
  top_flow_.MergeFrom(from.top_flow_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  branch_.MergeFrom(from.branch_);
  first_moment_.MergeFrom(from.first_moment_);
  second_moment_.MergeFrom(from.second_moment_);
  bottom_index_.MergeFrom(from.bottom_index_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_bind_key()) {
      set_has_bind_key();
      bind_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_key_);
    }
    if (from.has_bind_value()) {
      set_has_bind_value();
      bind_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_value_);
    }
    if (from.has_include()) {
      mutable_include()->::caffe::LayerProp::MergeFrom(from.include());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_transform_param()) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_batch_norm_param()) {
      mutable_batch_norm_param()->::caffe::BatchNormParameter::MergeFrom(from.batch_norm_param());
    }
    if (from.has_shortcut_param()) {
      mutable_shortcut_param()->::caffe::ShortcutParameter::MergeFrom(from.shortcut_param());
    }
    if (from.has_accuracy_param()) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (from.has_norm_param()) {
      mutable_norm_param()->::caffe::NormalizeParameter::MergeFrom(from.norm_param());
    }
    if (from.has_context_pooling_param()) {
      mutable_context_pooling_param()->::caffe::ContextPoolingParameter::MergeFrom(from.context_pooling_param());
    }
  }
  if (from._has_bits_[16 / 32] & 16711680u) {
    if (from.has_crf_param()) {
      mutable_crf_param()->::caffe::CRFParameter::MergeFrom(from.crf_param());
    }
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_parse_evaluate_param()) {
      mutable_parse_evaluate_param()->::caffe::ParseEvaluateParameter::MergeFrom(from.parse_evaluate_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_interp_param()) {
      mutable_interp_param()->::caffe::InterpParameter::MergeFrom(from.interp_param());
    }
    if (from.has_sec_param()) {
      mutable_sec_param()->::caffe::SecParameter::MergeFrom(from.sec_param());
    }
    if (from.has_noise_param()) {
      mutable_noise_param()->::caffe::NoiseParameter::MergeFrom(from.noise_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
  }
  if (from._has_bits_[24 / 32] & 50331648u) {
    if (from.has_shape_param()) {
      mutable_shape_param()->::caffe::BlobShape::MergeFrom(from.shape_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
  }
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
  bottom_.UnsafeArenaSwap(&other->bottom_);
  top_.UnsafeArenaSwap(&other->top_);
  bottom_flow_.UnsafeArenaSwap(&other->bottom_flow_);
  top_flow_.UnsafeArenaSwap(&other->top_flow_);
  param_.UnsafeArenaSwap(&other->param_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  branch_.UnsafeArenaSwap(&other->branch_);
  first_moment_.UnsafeArenaSwap(&other->first_moment_);
  second_moment_.UnsafeArenaSwap(&other->second_moment_);
  bottom_index_.UnsafeArenaSwap(&other->bottom_index_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  bind_key_.Swap(&other->bind_key_);
  bind_value_.Swap(&other->bind_value_);
  std::swap(include_, other->include_);
  std::swap(data_param_, other->data_param_);
  std::swap(transform_param_, other->transform_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(inner_product_param_, other->inner_product_param_);
  std::swap(batch_norm_param_, other->batch_norm_param_);
  std::swap(shortcut_param_, other->shortcut_param_);
  std::swap(accuracy_param_, other->accuracy_param_);
  std::swap(norm_param_, other->norm_param_);
  std::swap(context_pooling_param_, other->context_pooling_param_);
  std::swap(crf_param_, other->crf_param_);
  std::swap(eltwise_param_, other->eltwise_param_);
  std::swap(parse_evaluate_param_, other->parse_evaluate_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(interp_param_, other->interp_param_);
  std::swap(sec_param_, other->sec_param_);
  std::swap(noise_param_, other->noise_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(shape_param_, other->shape_param_);
  std::swap(concat_param_, other->concat_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParameter

// optional string name = 1;
bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena();
}
void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
#if LANG_CXX11
void LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
#endif
void LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena();
}
void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
#if LANG_CXX11
void LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.type)
}
#endif
void LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
int LayerParameter::bottom_size() const {
  return bottom_.size();
}
void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
int LayerParameter::top_size() const {
  return top_.size();
}
void LayerParameter::clear_top() {
  top_.Clear();
}
const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// repeated int32 bottom_flow = 101;
int LayerParameter::bottom_flow_size() const {
  return bottom_flow_.size();
}
void LayerParameter::clear_bottom_flow() {
  bottom_flow_.Clear();
}
::google::protobuf::int32 LayerParameter::bottom_flow(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom_flow)
  return bottom_flow_.Get(index);
}
void LayerParameter::set_bottom_flow(int index, ::google::protobuf::int32 value) {
  bottom_flow_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom_flow)
}
void LayerParameter::add_bottom_flow(::google::protobuf::int32 value) {
  bottom_flow_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom_flow)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerParameter::bottom_flow() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom_flow)
  return bottom_flow_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerParameter::mutable_bottom_flow() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom_flow)
  return &bottom_flow_;
}

// repeated int32 top_flow = 102;
int LayerParameter::top_flow_size() const {
  return top_flow_.size();
}
void LayerParameter::clear_top_flow() {
  top_flow_.Clear();
}
::google::protobuf::int32 LayerParameter::top_flow(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top_flow)
  return top_flow_.Get(index);
}
void LayerParameter::set_top_flow(int index, ::google::protobuf::int32 value) {
  top_flow_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top_flow)
}
void LayerParameter::add_top_flow(::google::protobuf::int32 value) {
  top_flow_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top_flow)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerParameter::top_flow() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top_flow)
  return top_flow_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerParameter::mutable_top_flow() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top_flow)
  return &top_flow_;
}

// optional .caffe.LayerProp include = 5;
bool LayerParameter::has_include() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerParameter::set_has_include() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerParameter::clear_has_include() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerParameter::clear_include() {
  if (include_ != NULL) include_->::caffe::LayerProp::Clear();
  clear_has_include();
}
const ::caffe::LayerProp& LayerParameter::include() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_ != NULL ? *include_
                         : *::caffe::LayerProp::internal_default_instance();
}
::caffe::LayerProp* LayerParameter::mutable_include() {
  set_has_include();
  if (include_ == NULL) {
    include_ = new ::caffe::LayerProp;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_;
}
::caffe::LayerProp* LayerParameter::release_include() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.include)
  clear_has_include();
  ::caffe::LayerProp* temp = include_;
  include_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_include(::caffe::LayerProp* include) {
  delete include_;
  include_ = include;
  if (include) {
    set_has_include();
  } else {
    clear_has_include();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.include)
}

// repeated .caffe.ParamSpec param = 6;
int LayerParameter::param_size() const {
  return param_.size();
}
void LayerParameter::clear_param() {
  param_.Clear();
}
const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
int LayerParameter::blobs_size() const {
  return blobs_.size();
}
void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated .caffe.LayerParameter branch = 8;
int LayerParameter::branch_size() const {
  return branch_.size();
}
void LayerParameter::clear_branch() {
  branch_.Clear();
}
const ::caffe::LayerParameter& LayerParameter::branch(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.branch)
  return branch_.Get(index);
}
::caffe::LayerParameter* LayerParameter::mutable_branch(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.branch)
  return branch_.Mutable(index);
}
::caffe::LayerParameter* LayerParameter::add_branch() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.branch)
  return branch_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
LayerParameter::mutable_branch() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.branch)
  return &branch_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
LayerParameter::branch() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.branch)
  return branch_;
}

// optional string bind_key = 9;
bool LayerParameter::has_bind_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayerParameter::set_has_bind_key() {
  _has_bits_[0] |= 0x00000004u;
}
void LayerParameter::clear_has_bind_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayerParameter::clear_bind_key() {
  bind_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bind_key();
}
const ::std::string& LayerParameter::bind_key() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bind_key)
  return bind_key_.GetNoArena();
}
void LayerParameter::set_bind_key(const ::std::string& value) {
  set_has_bind_key();
  bind_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bind_key)
}
#if LANG_CXX11
void LayerParameter::set_bind_key(::std::string&& value) {
  set_has_bind_key();
  bind_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.bind_key)
}
#endif
void LayerParameter::set_bind_key(const char* value) {
  set_has_bind_key();
  bind_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bind_key)
}
void LayerParameter::set_bind_key(const char* value, size_t size) {
  set_has_bind_key();
  bind_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bind_key)
}
::std::string* LayerParameter::mutable_bind_key() {
  set_has_bind_key();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bind_key)
  return bind_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_bind_key() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bind_key)
  clear_has_bind_key();
  return bind_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_bind_key(::std::string* bind_key) {
  if (bind_key != NULL) {
    set_has_bind_key();
  } else {
    clear_has_bind_key();
  }
  bind_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bind_key);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bind_key)
}

// optional string bind_value = 10;
bool LayerParameter::has_bind_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayerParameter::set_has_bind_value() {
  _has_bits_[0] |= 0x00000008u;
}
void LayerParameter::clear_has_bind_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayerParameter::clear_bind_value() {
  bind_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bind_value();
}
const ::std::string& LayerParameter::bind_value() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bind_value)
  return bind_value_.GetNoArena();
}
void LayerParameter::set_bind_value(const ::std::string& value) {
  set_has_bind_value();
  bind_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bind_value)
}
#if LANG_CXX11
void LayerParameter::set_bind_value(::std::string&& value) {
  set_has_bind_value();
  bind_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.bind_value)
}
#endif
void LayerParameter::set_bind_value(const char* value) {
  set_has_bind_value();
  bind_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bind_value)
}
void LayerParameter::set_bind_value(const char* value, size_t size) {
  set_has_bind_value();
  bind_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bind_value)
}
::std::string* LayerParameter::mutable_bind_value() {
  set_has_bind_value();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bind_value)
  return bind_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_bind_value() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bind_value)
  clear_has_bind_value();
  return bind_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_bind_value(::std::string* bind_value) {
  if (bind_value != NULL) {
    set_has_bind_value();
  } else {
    clear_has_bind_value();
  }
  bind_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bind_value);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bind_value)
}

// optional .caffe.DataParameter data_param = 25;
bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000020u;
}
void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.TransformationParameter transform_param = 26;
bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000040u;
}
void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 27;
bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000080u;
}
void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.LossParameter loss_param = 28;
bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00000100u;
}
void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00000100u;
}
void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.PoolingParameter pooling_param = 29;
bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00000200u;
}
void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 30;
bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
}
void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000400u;
}
void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 31;
bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_
                         : *::caffe::BatchNormParameter::internal_default_instance();
}
::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.ShortcutParameter shortcut_param = 32;
bool LayerParameter::has_shortcut_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerParameter::set_has_shortcut_param() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerParameter::clear_has_shortcut_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerParameter::clear_shortcut_param() {
  if (shortcut_param_ != NULL) shortcut_param_->::caffe::ShortcutParameter::Clear();
  clear_has_shortcut_param();
}
const ::caffe::ShortcutParameter& LayerParameter::shortcut_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.shortcut_param)
  return shortcut_param_ != NULL ? *shortcut_param_
                         : *::caffe::ShortcutParameter::internal_default_instance();
}
::caffe::ShortcutParameter* LayerParameter::mutable_shortcut_param() {
  set_has_shortcut_param();
  if (shortcut_param_ == NULL) {
    shortcut_param_ = new ::caffe::ShortcutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.shortcut_param)
  return shortcut_param_;
}
::caffe::ShortcutParameter* LayerParameter::release_shortcut_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.shortcut_param)
  clear_has_shortcut_param();
  ::caffe::ShortcutParameter* temp = shortcut_param_;
  shortcut_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_shortcut_param(::caffe::ShortcutParameter* shortcut_param) {
  delete shortcut_param_;
  shortcut_param_ = shortcut_param;
  if (shortcut_param) {
    set_has_shortcut_param();
  } else {
    clear_has_shortcut_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.shortcut_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 33;
bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.NormalizeParameter norm_param = 34;
bool LayerParameter::has_norm_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerParameter::set_has_norm_param() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerParameter::clear_has_norm_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerParameter::clear_norm_param() {
  if (norm_param_ != NULL) norm_param_->::caffe::NormalizeParameter::Clear();
  clear_has_norm_param();
}
const ::caffe::NormalizeParameter& LayerParameter::norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.norm_param)
  return norm_param_ != NULL ? *norm_param_
                         : *::caffe::NormalizeParameter::internal_default_instance();
}
::caffe::NormalizeParameter* LayerParameter::mutable_norm_param() {
  set_has_norm_param();
  if (norm_param_ == NULL) {
    norm_param_ = new ::caffe::NormalizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.norm_param)
  return norm_param_;
}
::caffe::NormalizeParameter* LayerParameter::release_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.norm_param)
  clear_has_norm_param();
  ::caffe::NormalizeParameter* temp = norm_param_;
  norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_norm_param(::caffe::NormalizeParameter* norm_param) {
  delete norm_param_;
  norm_param_ = norm_param;
  if (norm_param) {
    set_has_norm_param();
  } else {
    clear_has_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.norm_param)
}

// optional .caffe.ContextPoolingParameter context_pooling_param = 35;
bool LayerParameter::has_context_pooling_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerParameter::set_has_context_pooling_param() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerParameter::clear_has_context_pooling_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerParameter::clear_context_pooling_param() {
  if (context_pooling_param_ != NULL) context_pooling_param_->::caffe::ContextPoolingParameter::Clear();
  clear_has_context_pooling_param();
}
const ::caffe::ContextPoolingParameter& LayerParameter::context_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.context_pooling_param)
  return context_pooling_param_ != NULL ? *context_pooling_param_
                         : *::caffe::ContextPoolingParameter::internal_default_instance();
}
::caffe::ContextPoolingParameter* LayerParameter::mutable_context_pooling_param() {
  set_has_context_pooling_param();
  if (context_pooling_param_ == NULL) {
    context_pooling_param_ = new ::caffe::ContextPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.context_pooling_param)
  return context_pooling_param_;
}
::caffe::ContextPoolingParameter* LayerParameter::release_context_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.context_pooling_param)
  clear_has_context_pooling_param();
  ::caffe::ContextPoolingParameter* temp = context_pooling_param_;
  context_pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_context_pooling_param(::caffe::ContextPoolingParameter* context_pooling_param) {
  delete context_pooling_param_;
  context_pooling_param_ = context_pooling_param;
  if (context_pooling_param) {
    set_has_context_pooling_param();
  } else {
    clear_has_context_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.context_pooling_param)
}

// optional .caffe.CRFParameter crf_param = 36;
bool LayerParameter::has_crf_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LayerParameter::set_has_crf_param() {
  _has_bits_[0] |= 0x00010000u;
}
void LayerParameter::clear_has_crf_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void LayerParameter::clear_crf_param() {
  if (crf_param_ != NULL) crf_param_->::caffe::CRFParameter::Clear();
  clear_has_crf_param();
}
const ::caffe::CRFParameter& LayerParameter::crf_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crf_param)
  return crf_param_ != NULL ? *crf_param_
                         : *::caffe::CRFParameter::internal_default_instance();
}
::caffe::CRFParameter* LayerParameter::mutable_crf_param() {
  set_has_crf_param();
  if (crf_param_ == NULL) {
    crf_param_ = new ::caffe::CRFParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crf_param)
  return crf_param_;
}
::caffe::CRFParameter* LayerParameter::release_crf_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crf_param)
  clear_has_crf_param();
  ::caffe::CRFParameter* temp = crf_param_;
  crf_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_crf_param(::caffe::CRFParameter* crf_param) {
  delete crf_param_;
  crf_param_ = crf_param;
  if (crf_param) {
    set_has_crf_param();
  } else {
    clear_has_crf_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crf_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 37;
bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00020000u;
}
void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ParseEvaluateParameter parse_evaluate_param = 38;
bool LayerParameter::has_parse_evaluate_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LayerParameter::set_has_parse_evaluate_param() {
  _has_bits_[0] |= 0x00040000u;
}
void LayerParameter::clear_has_parse_evaluate_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void LayerParameter::clear_parse_evaluate_param() {
  if (parse_evaluate_param_ != NULL) parse_evaluate_param_->::caffe::ParseEvaluateParameter::Clear();
  clear_has_parse_evaluate_param();
}
const ::caffe::ParseEvaluateParameter& LayerParameter::parse_evaluate_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.parse_evaluate_param)
  return parse_evaluate_param_ != NULL ? *parse_evaluate_param_
                         : *::caffe::ParseEvaluateParameter::internal_default_instance();
}
::caffe::ParseEvaluateParameter* LayerParameter::mutable_parse_evaluate_param() {
  set_has_parse_evaluate_param();
  if (parse_evaluate_param_ == NULL) {
    parse_evaluate_param_ = new ::caffe::ParseEvaluateParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.parse_evaluate_param)
  return parse_evaluate_param_;
}
::caffe::ParseEvaluateParameter* LayerParameter::release_parse_evaluate_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.parse_evaluate_param)
  clear_has_parse_evaluate_param();
  ::caffe::ParseEvaluateParameter* temp = parse_evaluate_param_;
  parse_evaluate_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_parse_evaluate_param(::caffe::ParseEvaluateParameter* parse_evaluate_param) {
  delete parse_evaluate_param_;
  parse_evaluate_param_ = parse_evaluate_param;
  if (parse_evaluate_param) {
    set_has_parse_evaluate_param();
  } else {
    clear_has_parse_evaluate_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.parse_evaluate_param)
}

// optional .caffe.DropoutParameter dropout_param = 39;
bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00080000u;
}
void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.InterpParameter interp_param = 40;
bool LayerParameter::has_interp_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LayerParameter::set_has_interp_param() {
  _has_bits_[0] |= 0x00100000u;
}
void LayerParameter::clear_has_interp_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void LayerParameter::clear_interp_param() {
  if (interp_param_ != NULL) interp_param_->::caffe::InterpParameter::Clear();
  clear_has_interp_param();
}
const ::caffe::InterpParameter& LayerParameter::interp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.interp_param)
  return interp_param_ != NULL ? *interp_param_
                         : *::caffe::InterpParameter::internal_default_instance();
}
::caffe::InterpParameter* LayerParameter::mutable_interp_param() {
  set_has_interp_param();
  if (interp_param_ == NULL) {
    interp_param_ = new ::caffe::InterpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.interp_param)
  return interp_param_;
}
::caffe::InterpParameter* LayerParameter::release_interp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.interp_param)
  clear_has_interp_param();
  ::caffe::InterpParameter* temp = interp_param_;
  interp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_interp_param(::caffe::InterpParameter* interp_param) {
  delete interp_param_;
  interp_param_ = interp_param;
  if (interp_param) {
    set_has_interp_param();
  } else {
    clear_has_interp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.interp_param)
}

// optional .caffe.SecParameter sec_param = 41;
bool LayerParameter::has_sec_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LayerParameter::set_has_sec_param() {
  _has_bits_[0] |= 0x00200000u;
}
void LayerParameter::clear_has_sec_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void LayerParameter::clear_sec_param() {
  if (sec_param_ != NULL) sec_param_->::caffe::SecParameter::Clear();
  clear_has_sec_param();
}
const ::caffe::SecParameter& LayerParameter::sec_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sec_param)
  return sec_param_ != NULL ? *sec_param_
                         : *::caffe::SecParameter::internal_default_instance();
}
::caffe::SecParameter* LayerParameter::mutable_sec_param() {
  set_has_sec_param();
  if (sec_param_ == NULL) {
    sec_param_ = new ::caffe::SecParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sec_param)
  return sec_param_;
}
::caffe::SecParameter* LayerParameter::release_sec_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sec_param)
  clear_has_sec_param();
  ::caffe::SecParameter* temp = sec_param_;
  sec_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_sec_param(::caffe::SecParameter* sec_param) {
  delete sec_param_;
  sec_param_ = sec_param;
  if (sec_param) {
    set_has_sec_param();
  } else {
    clear_has_sec_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sec_param)
}

// optional .caffe.NoiseParameter noise_param = 42;
bool LayerParameter::has_noise_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LayerParameter::set_has_noise_param() {
  _has_bits_[0] |= 0x00400000u;
}
void LayerParameter::clear_has_noise_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void LayerParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::caffe::NoiseParameter::Clear();
  clear_has_noise_param();
}
const ::caffe::NoiseParameter& LayerParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_
                         : *::caffe::NoiseParameter::internal_default_instance();
}
::caffe::NoiseParameter* LayerParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.noise_param)
  return noise_param_;
}
::caffe::NoiseParameter* LayerParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.noise_param)
  clear_has_noise_param();
  ::caffe::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_noise_param(::caffe::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.noise_param)
}

// optional .caffe.ReLUParameter relu_param = 43;
bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00800000u;
}
void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.BlobShape shape_param = 44;
bool LayerParameter::has_shape_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LayerParameter::set_has_shape_param() {
  _has_bits_[0] |= 0x01000000u;
}
void LayerParameter::clear_has_shape_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void LayerParameter::clear_shape_param() {
  if (shape_param_ != NULL) shape_param_->::caffe::BlobShape::Clear();
  clear_has_shape_param();
}
const ::caffe::BlobShape& LayerParameter::shape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.shape_param)
  return shape_param_ != NULL ? *shape_param_
                         : *::caffe::BlobShape::internal_default_instance();
}
::caffe::BlobShape* LayerParameter::mutable_shape_param() {
  set_has_shape_param();
  if (shape_param_ == NULL) {
    shape_param_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.shape_param)
  return shape_param_;
}
::caffe::BlobShape* LayerParameter::release_shape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.shape_param)
  clear_has_shape_param();
  ::caffe::BlobShape* temp = shape_param_;
  shape_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_shape_param(::caffe::BlobShape* shape_param) {
  delete shape_param_;
  shape_param_ = shape_param;
  if (shape_param) {
    set_has_shape_param();
  } else {
    clear_has_shape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.shape_param)
}

// optional .caffe.ConcatParameter concat_param = 45;
bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x02000000u;
}
void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// repeated .caffe.BlobProto first_moment = 46;
int LayerParameter::first_moment_size() const {
  return first_moment_.size();
}
void LayerParameter::clear_first_moment() {
  first_moment_.Clear();
}
const ::caffe::BlobProto& LayerParameter::first_moment(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.first_moment)
  return first_moment_.Get(index);
}
::caffe::BlobProto* LayerParameter::mutable_first_moment(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.first_moment)
  return first_moment_.Mutable(index);
}
::caffe::BlobProto* LayerParameter::add_first_moment() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.first_moment)
  return first_moment_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_first_moment() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.first_moment)
  return &first_moment_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::first_moment() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.first_moment)
  return first_moment_;
}

// repeated .caffe.BlobProto second_moment = 47;
int LayerParameter::second_moment_size() const {
  return second_moment_.size();
}
void LayerParameter::clear_second_moment() {
  second_moment_.Clear();
}
const ::caffe::BlobProto& LayerParameter::second_moment(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.second_moment)
  return second_moment_.Get(index);
}
::caffe::BlobProto* LayerParameter::mutable_second_moment(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.second_moment)
  return second_moment_.Mutable(index);
}
::caffe::BlobProto* LayerParameter::add_second_moment() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.second_moment)
  return second_moment_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_second_moment() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.second_moment)
  return &second_moment_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::second_moment() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.second_moment)
  return second_moment_;
}

// repeated int32 bottom_index = 48;
int LayerParameter::bottom_index_size() const {
  return bottom_index_.size();
}
void LayerParameter::clear_bottom_index() {
  bottom_index_.Clear();
}
::google::protobuf::int32 LayerParameter::bottom_index(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom_index)
  return bottom_index_.Get(index);
}
void LayerParameter::set_bottom_index(int index, ::google::protobuf::int32 value) {
  bottom_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom_index)
}
void LayerParameter::add_bottom_index(::google::protobuf::int32 value) {
  bottom_index_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayerParameter::bottom_index() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom_index)
  return bottom_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayerParameter::mutable_bottom_index() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom_index)
  return &bottom_index_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatParameter::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatParameter::ConcatParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConcatParameter)
}
ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConcatParameter)
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
}

void ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[11].descriptor;
}

const ConcatParameter& ConcatParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConcatParameter* ConcatParameter::New(::google::protobuf::Arena* arena) const {
  ConcatParameter* n = new ConcatParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConcatParameter)
  channels_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 channels = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_channels())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConcatParameter)
  return false;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConcatParameter)
  // repeated int32 channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->channels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConcatParameter)
}

::google::protobuf::uint8* ConcatParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatParameter)
  // repeated int32 channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->channels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatParameter)
  return target;
}

size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConcatParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 channels = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->channels_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->channels_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConcatParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConcatParameter)
    MergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channels_.MergeFrom(from.channels_);
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {
  return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatParameter::InternalSwap(ConcatParameter* other) {
  channels_.UnsafeArenaSwap(&other->channels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConcatParameter

// repeated int32 channels = 1;
int ConcatParameter::channels_size() const {
  return channels_.size();
}
void ConcatParameter::clear_channels() {
  channels_.Clear();
}
::google::protobuf::int32 ConcatParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.channels)
  return channels_.Get(index);
}
void ConcatParameter::set_channels(int index, ::google::protobuf::int32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.channels)
}
void ConcatParameter::add_channels(::google::protobuf::int32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConcatParameter.channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConcatParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.ConcatParameter.channels)
  return channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConcatParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConcatParameter.channels)
  return &channels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLUParameter::kNegativeSlopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLUParameter::ReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReLUParameter)
}
ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negative_slope_ = from.negative_slope_;
  // @@protoc_insertion_point(copy_constructor:caffe.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  negative_slope_ = 0;
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReLUParameter)
  SharedDtor();
}

void ReLUParameter::SharedDtor() {
}

void ReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[12].descriptor;
}

const ReLUParameter& ReLUParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReLUParameter* ReLUParameter::New(::google::protobuf::Arena* arena) const {
  ReLUParameter* n = new ReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReLUParameter)
  negative_slope_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (tag == 13u) {
          set_has_negative_slope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReLUParameter)
  return false;
#undef DO_
}

void ReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReLUParameter)
}

::google::protobuf::uint8* ReLUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUParameter)
  return target;
}

size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReLUParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReLUParameter)
    MergeFrom(*source);
  }
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_negative_slope()) {
    set_negative_slope(from.negative_slope());
  }
}

void ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {
  return true;
}

void ReLUParameter::Swap(ReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReLUParameter::InternalSwap(ReLUParameter* other) {
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLUParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReLUParameter

// optional float negative_slope = 1 [default = 0];
bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoiseParameter::kNumFieldNumber;
const int NoiseParameter::kChannelsFieldNumber;
const int NoiseParameter::kClassesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoiseParameter::NoiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NoiseParameter)
}
NoiseParameter::NoiseParameter(const NoiseParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    reinterpret_cast<char*>(&classes_) -
    reinterpret_cast<char*>(&num_) + sizeof(classes_));
  // @@protoc_insertion_point(copy_constructor:caffe.NoiseParameter)
}

void NoiseParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_, 0, reinterpret_cast<char*>(&classes_) -
    reinterpret_cast<char*>(&num_) + sizeof(classes_));
}

NoiseParameter::~NoiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.NoiseParameter)
  SharedDtor();
}

void NoiseParameter::SharedDtor() {
}

void NoiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[13].descriptor;
}

const NoiseParameter& NoiseParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoiseParameter* NoiseParameter::New(::google::protobuf::Arena* arena) const {
  NoiseParameter* n = new NoiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NoiseParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&num_, 0, reinterpret_cast<char*>(&classes_) -
      reinterpret_cast<char*>(&num_) + sizeof(classes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NoiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NoiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channels = 2;
      case 2: {
        if (tag == 16u) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 classes = 3;
      case 3: {
        if (tag == 24u) {
          set_has_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NoiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NoiseParameter)
  return false;
#undef DO_
}

void NoiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NoiseParameter)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 classes = 3;
  if (has_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->classes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NoiseParameter)
}

::google::protobuf::uint8* NoiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NoiseParameter)
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 classes = 3;
  if (has_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->classes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NoiseParameter)
  return target;
}

size_t NoiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NoiseParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 classes = 3;
    if (has_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NoiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NoiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NoiseParameter)
    MergeFrom(*source);
  }
}

void NoiseParameter::MergeFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_classes()) {
      set_classes(from.classes());
    }
  }
}

void NoiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseParameter::CopyFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseParameter::IsInitialized() const {
  return true;
}

void NoiseParameter::Swap(NoiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoiseParameter::InternalSwap(NoiseParameter* other) {
  std::swap(num_, other->num_);
  std::swap(channels_, other->channels_);
  std::swap(classes_, other->classes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoiseParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoiseParameter

// optional int32 num = 1;
bool NoiseParameter::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NoiseParameter::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
void NoiseParameter::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void NoiseParameter::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 NoiseParameter::num() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.num)
  return num_;
}
void NoiseParameter::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.num)
}

// optional int32 channels = 2;
bool NoiseParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NoiseParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void NoiseParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void NoiseParameter::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 NoiseParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.channels)
  return channels_;
}
void NoiseParameter::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.channels)
}

// optional int32 classes = 3;
bool NoiseParameter::has_classes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NoiseParameter::set_has_classes() {
  _has_bits_[0] |= 0x00000004u;
}
void NoiseParameter::clear_has_classes() {
  _has_bits_[0] &= ~0x00000004u;
}
void NoiseParameter::clear_classes() {
  classes_ = 0;
  clear_has_classes();
}
::google::protobuf::int32 NoiseParameter::classes() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.classes)
  return classes_;
}
void NoiseParameter::set_classes(::google::protobuf::int32 value) {
  set_has_classes();
  classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.classes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecParameter::kSecFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecParameter::SecParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SecParameter)
}
SecParameter::SecParameter(const SecParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sec_feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sec_feature()) {
    sec_feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sec_feature_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.SecParameter)
}

void SecParameter::SharedCtor() {
  _cached_size_ = 0;
  sec_feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SecParameter::~SecParameter() {
  // @@protoc_insertion_point(destructor:caffe.SecParameter)
  SharedDtor();
}

void SecParameter::SharedDtor() {
  sec_feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[14].descriptor;
}

const SecParameter& SecParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SecParameter* SecParameter::New(::google::protobuf::Arena* arena) const {
  SecParameter* n = new SecParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SecParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SecParameter)
  if (has_sec_feature()) {
    GOOGLE_DCHECK(!sec_feature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sec_feature_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SecParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sec_feature = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sec_feature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sec_feature().data(), this->sec_feature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SecParameter.sec_feature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SecParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SecParameter)
  return false;
#undef DO_
}

void SecParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SecParameter)
  // optional string sec_feature = 1;
  if (has_sec_feature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sec_feature().data(), this->sec_feature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SecParameter.sec_feature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sec_feature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SecParameter)
}

::google::protobuf::uint8* SecParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SecParameter)
  // optional string sec_feature = 1;
  if (has_sec_feature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sec_feature().data(), this->sec_feature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SecParameter.sec_feature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sec_feature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SecParameter)
  return target;
}

size_t SecParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SecParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string sec_feature = 1;
  if (has_sec_feature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sec_feature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SecParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SecParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SecParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SecParameter)
    MergeFrom(*source);
  }
}

void SecParameter::MergeFrom(const SecParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SecParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sec_feature()) {
    set_has_sec_feature();
    sec_feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sec_feature_);
  }
}

void SecParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SecParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecParameter::CopyFrom(const SecParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SecParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecParameter::IsInitialized() const {
  return true;
}

void SecParameter::Swap(SecParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecParameter::InternalSwap(SecParameter* other) {
  sec_feature_.Swap(&other->sec_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SecParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SecParameter

// optional string sec_feature = 1;
bool SecParameter::has_sec_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SecParameter::set_has_sec_feature() {
  _has_bits_[0] |= 0x00000001u;
}
void SecParameter::clear_has_sec_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
void SecParameter::clear_sec_feature() {
  sec_feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sec_feature();
}
const ::std::string& SecParameter::sec_feature() const {
  // @@protoc_insertion_point(field_get:caffe.SecParameter.sec_feature)
  return sec_feature_.GetNoArena();
}
void SecParameter::set_sec_feature(const ::std::string& value) {
  set_has_sec_feature();
  sec_feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SecParameter.sec_feature)
}
#if LANG_CXX11
void SecParameter::set_sec_feature(::std::string&& value) {
  set_has_sec_feature();
  sec_feature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SecParameter.sec_feature)
}
#endif
void SecParameter::set_sec_feature(const char* value) {
  set_has_sec_feature();
  sec_feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SecParameter.sec_feature)
}
void SecParameter::set_sec_feature(const char* value, size_t size) {
  set_has_sec_feature();
  sec_feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SecParameter.sec_feature)
}
::std::string* SecParameter::mutable_sec_feature() {
  set_has_sec_feature();
  // @@protoc_insertion_point(field_mutable:caffe.SecParameter.sec_feature)
  return sec_feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecParameter::release_sec_feature() {
  // @@protoc_insertion_point(field_release:caffe.SecParameter.sec_feature)
  clear_has_sec_feature();
  return sec_feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecParameter::set_allocated_sec_feature(::std::string* sec_feature) {
  if (sec_feature != NULL) {
    set_has_sec_feature();
  } else {
    clear_has_sec_feature();
  }
  sec_feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sec_feature);
  // @@protoc_insertion_point(field_set_allocated:caffe.SecParameter.sec_feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterpParameter::kInterpRatioFieldNumber;
const int InterpParameter::kStrideFieldNumber;
const int InterpParameter::kKernelSizeFieldNumber;
const int InterpParameter::kNumClassesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterpParameter::InterpParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InterpParameter)
}
InterpParameter::InterpParameter(const InterpParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interp_ratio_, &from.interp_ratio_,
    reinterpret_cast<char*>(&num_classes_) -
    reinterpret_cast<char*>(&interp_ratio_) + sizeof(num_classes_));
  // @@protoc_insertion_point(copy_constructor:caffe.InterpParameter)
}

void InterpParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&interp_ratio_, 0, reinterpret_cast<char*>(&num_classes_) -
    reinterpret_cast<char*>(&interp_ratio_) + sizeof(num_classes_));
}

InterpParameter::~InterpParameter() {
  // @@protoc_insertion_point(destructor:caffe.InterpParameter)
  SharedDtor();
}

void InterpParameter::SharedDtor() {
}

void InterpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterpParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[15].descriptor;
}

const InterpParameter& InterpParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InterpParameter* InterpParameter::New(::google::protobuf::Arena* arena) const {
  InterpParameter* n = new InterpParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InterpParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&interp_ratio_, 0, reinterpret_cast<char*>(&num_classes_) -
      reinterpret_cast<char*>(&interp_ratio_) + sizeof(num_classes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InterpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InterpParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float interp_ratio = 1;
      case 1: {
        if (tag == 13u) {
          set_has_interp_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interp_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stride = 2;
      case 2: {
        if (tag == 16u) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kernel_size = 3;
      case 3: {
        if (tag == 24u) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 4;
      case 4: {
        if (tag == 32u) {
          set_has_num_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InterpParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InterpParameter)
  return false;
#undef DO_
}

void InterpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InterpParameter)
  // optional float interp_ratio = 1;
  if (has_interp_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->interp_ratio(), output);
  }

  // optional int32 stride = 2;
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stride(), output);
  }

  // optional int32 kernel_size = 3;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kernel_size(), output);
  }

  // optional int32 num_classes = 4;
  if (has_num_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_classes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InterpParameter)
}

::google::protobuf::uint8* InterpParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InterpParameter)
  // optional float interp_ratio = 1;
  if (has_interp_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->interp_ratio(), target);
  }

  // optional int32 stride = 2;
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stride(), target);
  }

  // optional int32 kernel_size = 3;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kernel_size(), target);
  }

  // optional int32 num_classes = 4;
  if (has_num_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_classes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InterpParameter)
  return target;
}

size_t InterpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InterpParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float interp_ratio = 1;
    if (has_interp_ratio()) {
      total_size += 1 + 4;
    }

    // optional int32 stride = 2;
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 kernel_size = 3;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 num_classes = 4;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterpParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InterpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InterpParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InterpParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InterpParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InterpParameter)
    MergeFrom(*source);
  }
}

void InterpParameter::MergeFrom(const InterpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InterpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_interp_ratio()) {
      set_interp_ratio(from.interp_ratio());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_num_classes()) {
      set_num_classes(from.num_classes());
    }
  }
}

void InterpParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InterpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterpParameter::CopyFrom(const InterpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InterpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterpParameter::IsInitialized() const {
  return true;
}

void InterpParameter::Swap(InterpParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterpParameter::InternalSwap(InterpParameter* other) {
  std::swap(interp_ratio_, other->interp_ratio_);
  std::swap(stride_, other->stride_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(num_classes_, other->num_classes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterpParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterpParameter

// optional float interp_ratio = 1;
bool InterpParameter::has_interp_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InterpParameter::set_has_interp_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void InterpParameter::clear_has_interp_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void InterpParameter::clear_interp_ratio() {
  interp_ratio_ = 0;
  clear_has_interp_ratio();
}
float InterpParameter::interp_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.interp_ratio)
  return interp_ratio_;
}
void InterpParameter::set_interp_ratio(float value) {
  set_has_interp_ratio();
  interp_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.interp_ratio)
}

// optional int32 stride = 2;
bool InterpParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InterpParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000002u;
}
void InterpParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000002u;
}
void InterpParameter::clear_stride() {
  stride_ = 0;
  clear_has_stride();
}
::google::protobuf::int32 InterpParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.stride)
  return stride_;
}
void InterpParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.stride)
}

// optional int32 kernel_size = 3;
bool InterpParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InterpParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000004u;
}
void InterpParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void InterpParameter::clear_kernel_size() {
  kernel_size_ = 0;
  clear_has_kernel_size();
}
::google::protobuf::int32 InterpParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.kernel_size)
  return kernel_size_;
}
void InterpParameter::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.kernel_size)
}

// optional int32 num_classes = 4;
bool InterpParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InterpParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
void InterpParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
void InterpParameter::clear_num_classes() {
  num_classes_ = 0;
  clear_has_num_classes();
}
::google::protobuf::int32 InterpParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.num_classes)
  return num_classes_;
}
void InterpParameter::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.num_classes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParameter::kDropoutRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DropoutParameter)
}
DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropout_ratio_ = from.dropout_ratio_;
  // @@protoc_insertion_point(copy_constructor:caffe.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:caffe.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[16].descriptor;
}

const DropoutParameter& DropoutParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropoutParameter* DropoutParameter::New(::google::protobuf::Arena* arena) const {
  DropoutParameter* n = new DropoutParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DropoutParameter)
  dropout_ratio_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DropoutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (tag == 13u) {
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DropoutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DropoutParameter)
  return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DropoutParameter)
  return target;
}

size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DropoutParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DropoutParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropoutParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DropoutParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DropoutParameter)
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dropout_ratio()) {
    set_dropout_ratio(from.dropout_ratio());
  }
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {
  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropoutParameter::InternalSwap(DropoutParameter* other) {
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParseEvaluateParameter::kNumLabelsFieldNumber;
const int ParseEvaluateParameter::kIgnoreLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParseEvaluateParameter::ParseEvaluateParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParseEvaluateParameter)
}
ParseEvaluateParameter::ParseEvaluateParameter(const ParseEvaluateParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ignore_label_(from.ignore_label_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_labels_ = from.num_labels_;
  // @@protoc_insertion_point(copy_constructor:caffe.ParseEvaluateParameter)
}

void ParseEvaluateParameter::SharedCtor() {
  _cached_size_ = 0;
  num_labels_ = 0;
}

ParseEvaluateParameter::~ParseEvaluateParameter() {
  // @@protoc_insertion_point(destructor:caffe.ParseEvaluateParameter)
  SharedDtor();
}

void ParseEvaluateParameter::SharedDtor() {
}

void ParseEvaluateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParseEvaluateParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[17].descriptor;
}

const ParseEvaluateParameter& ParseEvaluateParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParseEvaluateParameter* ParseEvaluateParameter::New(::google::protobuf::Arena* arena) const {
  ParseEvaluateParameter* n = new ParseEvaluateParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParseEvaluateParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParseEvaluateParameter)
  ignore_label_.Clear();
  num_labels_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParseEvaluateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParseEvaluateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_labels = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num_labels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_labels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ignore_label = 2;
      case 2: {
        if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_ignore_label())));
        } else if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ignore_label())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParseEvaluateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParseEvaluateParameter)
  return false;
#undef DO_
}

void ParseEvaluateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParseEvaluateParameter)
  // optional int32 num_labels = 1;
  if (has_num_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_labels(), output);
  }

  // repeated int32 ignore_label = 2;
  for (int i = 0; i < this->ignore_label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ignore_label(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParseEvaluateParameter)
}

::google::protobuf::uint8* ParseEvaluateParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParseEvaluateParameter)
  // optional int32 num_labels = 1;
  if (has_num_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_labels(), target);
  }

  // repeated int32 ignore_label = 2;
  for (int i = 0; i < this->ignore_label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ignore_label(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParseEvaluateParameter)
  return target;
}

size_t ParseEvaluateParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParseEvaluateParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 ignore_label = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->ignore_label_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ignore_label_size());
    total_size += data_size;
  }

  // optional int32 num_labels = 1;
  if (has_num_labels()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_labels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParseEvaluateParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParseEvaluateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ParseEvaluateParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParseEvaluateParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParseEvaluateParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParseEvaluateParameter)
    MergeFrom(*source);
  }
}

void ParseEvaluateParameter::MergeFrom(const ParseEvaluateParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParseEvaluateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignore_label_.MergeFrom(from.ignore_label_);
  if (from.has_num_labels()) {
    set_num_labels(from.num_labels());
  }
}

void ParseEvaluateParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParseEvaluateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParseEvaluateParameter::CopyFrom(const ParseEvaluateParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParseEvaluateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseEvaluateParameter::IsInitialized() const {
  return true;
}

void ParseEvaluateParameter::Swap(ParseEvaluateParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParseEvaluateParameter::InternalSwap(ParseEvaluateParameter* other) {
  ignore_label_.UnsafeArenaSwap(&other->ignore_label_);
  std::swap(num_labels_, other->num_labels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParseEvaluateParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParseEvaluateParameter

// optional int32 num_labels = 1;
bool ParseEvaluateParameter::has_num_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParseEvaluateParameter::set_has_num_labels() {
  _has_bits_[0] |= 0x00000001u;
}
void ParseEvaluateParameter::clear_has_num_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParseEvaluateParameter::clear_num_labels() {
  num_labels_ = 0;
  clear_has_num_labels();
}
::google::protobuf::int32 ParseEvaluateParameter::num_labels() const {
  // @@protoc_insertion_point(field_get:caffe.ParseEvaluateParameter.num_labels)
  return num_labels_;
}
void ParseEvaluateParameter::set_num_labels(::google::protobuf::int32 value) {
  set_has_num_labels();
  num_labels_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParseEvaluateParameter.num_labels)
}

// repeated int32 ignore_label = 2;
int ParseEvaluateParameter::ignore_label_size() const {
  return ignore_label_.size();
}
void ParseEvaluateParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
::google::protobuf::int32 ParseEvaluateParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ParseEvaluateParameter.ignore_label)
  return ignore_label_.Get(index);
}
void ParseEvaluateParameter::set_ignore_label(int index, ::google::protobuf::int32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ParseEvaluateParameter.ignore_label)
}
void ParseEvaluateParameter::add_ignore_label(::google::protobuf::int32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ParseEvaluateParameter.ignore_label)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ParseEvaluateParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.ParseEvaluateParameter.ignore_label)
  return ignore_label_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ParseEvaluateParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ParseEvaluateParameter.ignore_label)
  return &ignore_label_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> EltwiseParameter::_default_operation_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EltwiseParameter::kOperationFieldNumber;
const int EltwiseParameter::kCoeffFieldNumber;
const int EltwiseParameter::kStableProdGradFieldNumber;
const int EltwiseParameter::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EltwiseParameter::EltwiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EltwiseParameter)
}
EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      coeff_(from.coeff_),
      backward_(from.backward_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_.UnsafeSetDefault(&EltwiseParameter::_default_operation_.get());
  if (from.has_operation()) {
    operation_.AssignWithDefault(&EltwiseParameter::_default_operation_.get(), from.operation_);
  }
  stable_prod_grad_ = from.stable_prod_grad_;
  // @@protoc_insertion_point(copy_constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_.UnsafeSetDefault(&EltwiseParameter::_default_operation_.get());
  stable_prod_grad_ = true;
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.EltwiseParameter)
  SharedDtor();
}

void EltwiseParameter::SharedDtor() {
  operation_.DestroyNoArena(&EltwiseParameter::_default_operation_.get());
}

void EltwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[18].descriptor;
}

const EltwiseParameter& EltwiseParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

EltwiseParameter* EltwiseParameter::New(::google::protobuf::Arena* arena) const {
  EltwiseParameter* n = new EltwiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EltwiseParameter)
  coeff_.Clear();
  backward_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_operation()) {
      GOOGLE_DCHECK(!operation_.IsDefault(&EltwiseParameter::_default_operation_.get()));
      (*operation_.UnsafeRawStringPointer())->assign(*&EltwiseParameter::_default_operation_.get());
    }
    stable_prod_grad_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EltwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EltwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string operation = 1 [default = "sum"];
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.EltwiseParameter.operation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (tag == 21u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_coeff())));
        } else if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      case 3: {
        if (tag == 24u) {
          set_has_stable_prod_grad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_prod_grad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool backward = 4;
      case 4: {
        if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32u, input, this->mutable_backward())));
        } else if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_backward())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EltwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EltwiseParameter)
  return false;
#undef DO_
}

void EltwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EltwiseParameter)
  // optional string operation = 1 [default = "sum"];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.EltwiseParameter.operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
  }

  // repeated bool backward = 4;
  for (int i = 0; i < this->backward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->backward(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EltwiseParameter)
}

::google::protobuf::uint8* EltwiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseParameter)
  // optional string operation = 1 [default = "sum"];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.EltwiseParameter.operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
  }

  // repeated bool backward = 4;
  for (int i = 0; i < this->backward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->backward(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseParameter)
  return target;
}

size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EltwiseParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float coeff = 2;
  {
    unsigned int count = this->coeff_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->coeff_size());
    total_size += data_size;
  }

  // repeated bool backward = 4;
  {
    unsigned int count = this->backward_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->backward_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string operation = 1 [default = "sum"];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (has_stable_prod_grad()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EltwiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EltwiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EltwiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EltwiseParameter)
    MergeFrom(*source);
  }
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coeff_.MergeFrom(from.coeff_);
  backward_.MergeFrom(from.backward_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_operation()) {
      set_has_operation();
      operation_.AssignWithDefault(&EltwiseParameter::_default_operation_.get(), from.operation_);
    }
    if (from.has_stable_prod_grad()) {
      set_stable_prod_grad(from.stable_prod_grad());
    }
  }
}

void EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {
  return true;
}

void EltwiseParameter::Swap(EltwiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  coeff_.UnsafeArenaSwap(&other->coeff_);
  backward_.UnsafeArenaSwap(&other->backward_);
  operation_.Swap(&other->operation_);
  std::swap(stable_prod_grad_, other->stable_prod_grad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EltwiseParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EltwiseParameter

// optional string operation = 1 [default = "sum"];
bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void EltwiseParameter::clear_operation() {
  operation_.ClearToDefaultNoArena(&EltwiseParameter::_default_operation_.get());
  clear_has_operation();
}
const ::std::string& EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return operation_.GetNoArena();
}
void EltwiseParameter::set_operation(const ::std::string& value) {
  set_has_operation();
  operation_.SetNoArena(&EltwiseParameter::_default_operation_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}
#if LANG_CXX11
void EltwiseParameter::set_operation(::std::string&& value) {
  set_has_operation();
  operation_.SetNoArena(
    &EltwiseParameter::_default_operation_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.EltwiseParameter.operation)
}
#endif
void EltwiseParameter::set_operation(const char* value) {
  set_has_operation();
  operation_.SetNoArena(&EltwiseParameter::_default_operation_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.EltwiseParameter.operation)
}
void EltwiseParameter::set_operation(const char* value, size_t size) {
  set_has_operation();
  operation_.SetNoArena(&EltwiseParameter::_default_operation_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.EltwiseParameter.operation)
}
::std::string* EltwiseParameter::mutable_operation() {
  set_has_operation();
  // @@protoc_insertion_point(field_mutable:caffe.EltwiseParameter.operation)
  return operation_.MutableNoArena(&EltwiseParameter::_default_operation_.get());
}
::std::string* EltwiseParameter::release_operation() {
  // @@protoc_insertion_point(field_release:caffe.EltwiseParameter.operation)
  clear_has_operation();
  return operation_.ReleaseNoArena(&EltwiseParameter::_default_operation_.get());
}
void EltwiseParameter::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    set_has_operation();
  } else {
    clear_has_operation();
  }
  operation_.SetAllocatedNoArena(&EltwiseParameter::_default_operation_.get(), operation);
  // @@protoc_insertion_point(field_set_allocated:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000002u;
}
void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000002u;
}
void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

// repeated bool backward = 4;
int EltwiseParameter::backward_size() const {
  return backward_.size();
}
void EltwiseParameter::clear_backward() {
  backward_.Clear();
}
bool EltwiseParameter::backward(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.backward)
  return backward_.Get(index);
}
void EltwiseParameter::set_backward(int index, bool value) {
  backward_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.backward)
}
void EltwiseParameter::add_backward(bool value) {
  backward_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.backward)
}
const ::google::protobuf::RepeatedField< bool >&
EltwiseParameter::backward() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.backward)
  return backward_;
}
::google::protobuf::RepeatedField< bool >*
EltwiseParameter::mutable_backward() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.backward)
  return &backward_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRFParameter::kMaxIterFieldNumber;
const int CRFParameter::kRadiusFieldNumber;
const int CRFParameter::kScaleFieldNumber;
const int CRFParameter::kEpsFieldNumber;
const int CRFParameter::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRFParameter::CRFParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CRFParameter)
}
CRFParameter::CRFParameter(const CRFParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&radius_) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:caffe.CRFParameter)
}

void CRFParameter::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  max_iter_ = 1;
  scale_ = 0.01f;
  eps_ = 0.01f;
  alpha_ = 0.01f;
}

CRFParameter::~CRFParameter() {
  // @@protoc_insertion_point(destructor:caffe.CRFParameter)
  SharedDtor();
}

void CRFParameter::SharedDtor() {
}

void CRFParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRFParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[19].descriptor;
}

const CRFParameter& CRFParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

CRFParameter* CRFParameter::New(::google::protobuf::Arena* arena) const {
  CRFParameter* n = new CRFParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CRFParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CRFParameter)
  if (_has_bits_[0 / 32] & 31u) {
    radius_ = 0;
    max_iter_ = 1;
    scale_ = 0.01f;
    eps_ = 0.01f;
    alpha_ = 0.01f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CRFParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CRFParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_iter = 1 [default = 1];
      case 1: {
        if (tag == 8u) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 2;
      case 2: {
        if (tag == 21u) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 3 [default = 0.01];
      case 3: {
        if (tag == 29u) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 4 [default = 0.01];
      case 4: {
        if (tag == 37u) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 5 [default = 0.01];
      case 5: {
        if (tag == 45u) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CRFParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CRFParameter)
  return false;
#undef DO_
}

void CRFParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CRFParameter)
  // optional int32 max_iter = 1 [default = 1];
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_iter(), output);
  }

  // optional float radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // optional float scale = 3 [default = 0.01];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale(), output);
  }

  // optional float eps = 4 [default = 0.01];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->eps(), output);
  }

  // optional float alpha = 5 [default = 0.01];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CRFParameter)
}

::google::protobuf::uint8* CRFParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CRFParameter)
  // optional int32 max_iter = 1 [default = 1];
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_iter(), target);
  }

  // optional float radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // optional float scale = 3 [default = 0.01];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale(), target);
  }

  // optional float eps = 4 [default = 0.01];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->eps(), target);
  }

  // optional float alpha = 5 [default = 0.01];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CRFParameter)
  return target;
}

size_t CRFParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CRFParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional int32 max_iter = 1 [default = 1];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float scale = 3 [default = 0.01];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float eps = 4 [default = 0.01];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional float alpha = 5 [default = 0.01];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRFParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CRFParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CRFParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CRFParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CRFParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CRFParameter)
    MergeFrom(*source);
  }
}

void CRFParameter::MergeFrom(const CRFParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CRFParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
}

void CRFParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CRFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRFParameter::CopyFrom(const CRFParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CRFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRFParameter::IsInitialized() const {
  return true;
}

void CRFParameter::Swap(CRFParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRFParameter::InternalSwap(CRFParameter* other) {
  std::swap(radius_, other->radius_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(scale_, other->scale_);
  std::swap(eps_, other->eps_);
  std::swap(alpha_, other->alpha_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CRFParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CRFParameter

// optional int32 max_iter = 1 [default = 1];
bool CRFParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CRFParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000002u;
}
void CRFParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
void CRFParameter::clear_max_iter() {
  max_iter_ = 1;
  clear_has_max_iter();
}
::google::protobuf::int32 CRFParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.CRFParameter.max_iter)
  return max_iter_;
}
void CRFParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.CRFParameter.max_iter)
}

// optional float radius = 2;
bool CRFParameter::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CRFParameter::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
void CRFParameter::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
void CRFParameter::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
float CRFParameter::radius() const {
  // @@protoc_insertion_point(field_get:caffe.CRFParameter.radius)
  return radius_;
}
void CRFParameter::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:caffe.CRFParameter.radius)
}

// optional float scale = 3 [default = 0.01];
bool CRFParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CRFParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void CRFParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void CRFParameter::clear_scale() {
  scale_ = 0.01f;
  clear_has_scale();
}
float CRFParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.CRFParameter.scale)
  return scale_;
}
void CRFParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.CRFParameter.scale)
}

// optional float eps = 4 [default = 0.01];
bool CRFParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CRFParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
void CRFParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
void CRFParameter::clear_eps() {
  eps_ = 0.01f;
  clear_has_eps();
}
float CRFParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.CRFParameter.eps)
  return eps_;
}
void CRFParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.CRFParameter.eps)
}

// optional float alpha = 5 [default = 0.01];
bool CRFParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CRFParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000010u;
}
void CRFParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000010u;
}
void CRFParameter::clear_alpha() {
  alpha_ = 0.01f;
  clear_has_alpha();
}
float CRFParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.CRFParameter.alpha)
  return alpha_;
}
void CRFParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.CRFParameter.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextPoolingParameter::kContextHFieldNumber;
const int ContextPoolingParameter::kContextWFieldNumber;
const int ContextPoolingParameter::kPoolFieldNumber;
const int ContextPoolingParameter::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextPoolingParameter::ContextPoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ContextPoolingParameter)
}
ContextPoolingParameter::ContextPoolingParameter(const ContextPoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pool_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pool()) {
    pool_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_);
  }
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mode()) {
    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  ::memcpy(&context_h_, &from.context_h_,
    reinterpret_cast<char*>(&context_w_) -
    reinterpret_cast<char*>(&context_h_) + sizeof(context_w_));
  // @@protoc_insertion_point(copy_constructor:caffe.ContextPoolingParameter)
}

void ContextPoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  pool_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_h_, 0, reinterpret_cast<char*>(&context_w_) -
    reinterpret_cast<char*>(&context_h_) + sizeof(context_w_));
}

ContextPoolingParameter::~ContextPoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.ContextPoolingParameter)
  SharedDtor();
}

void ContextPoolingParameter::SharedDtor() {
  pool_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContextPoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContextPoolingParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[20].descriptor;
}

const ContextPoolingParameter& ContextPoolingParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContextPoolingParameter* ContextPoolingParameter::New(::google::protobuf::Arena* arena) const {
  ContextPoolingParameter* n = new ContextPoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContextPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ContextPoolingParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pool()) {
      GOOGLE_DCHECK(!pool_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pool_.UnsafeRawStringPointer())->clear();
    }
    if (has_mode()) {
      GOOGLE_DCHECK(!mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mode_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&context_h_, 0, reinterpret_cast<char*>(&context_w_) -
      reinterpret_cast<char*>(&context_h_) + sizeof(context_w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContextPoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ContextPoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 context_h = 1 [default = 0];
      case 1: {
        if (tag == 8u) {
          set_has_context_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 context_w = 2 [default = 0];
      case 2: {
        if (tag == 16u) {
          set_has_context_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pool = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pool().data(), this->pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ContextPoolingParameter.pool");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mode = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ContextPoolingParameter.mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ContextPoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ContextPoolingParameter)
  return false;
#undef DO_
}

void ContextPoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ContextPoolingParameter)
  // optional uint32 context_h = 1 [default = 0];
  if (has_context_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->context_h(), output);
  }

  // optional uint32 context_w = 2 [default = 0];
  if (has_context_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->context_w(), output);
  }

  // optional string pool = 3;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ContextPoolingParameter.pool");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pool(), output);
  }

  // optional string mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ContextPoolingParameter.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ContextPoolingParameter)
}

::google::protobuf::uint8* ContextPoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ContextPoolingParameter)
  // optional uint32 context_h = 1 [default = 0];
  if (has_context_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->context_h(), target);
  }

  // optional uint32 context_w = 2 [default = 0];
  if (has_context_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->context_w(), target);
  }

  // optional string pool = 3;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ContextPoolingParameter.pool");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pool(), target);
  }

  // optional string mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ContextPoolingParameter.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ContextPoolingParameter)
  return target;
}

size_t ContextPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ContextPoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string pool = 3;
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool());
    }

    // optional string mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

    // optional uint32 context_h = 1 [default = 0];
    if (has_context_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context_h());
    }

    // optional uint32 context_w = 2 [default = 0];
    if (has_context_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context_w());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContextPoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ContextPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ContextPoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextPoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ContextPoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ContextPoolingParameter)
    MergeFrom(*source);
  }
}

void ContextPoolingParameter::MergeFrom(const ContextPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ContextPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_pool()) {
      set_has_pool();
      pool_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_);
    }
    if (from.has_mode()) {
      set_has_mode();
      mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
    }
    if (from.has_context_h()) {
      set_context_h(from.context_h());
    }
    if (from.has_context_w()) {
      set_context_w(from.context_w());
    }
  }
}

void ContextPoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ContextPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextPoolingParameter::CopyFrom(const ContextPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ContextPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextPoolingParameter::IsInitialized() const {
  return true;
}

void ContextPoolingParameter::Swap(ContextPoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextPoolingParameter::InternalSwap(ContextPoolingParameter* other) {
  pool_.Swap(&other->pool_);
  mode_.Swap(&other->mode_);
  std::swap(context_h_, other->context_h_);
  std::swap(context_w_, other->context_w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContextPoolingParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContextPoolingParameter

// optional uint32 context_h = 1 [default = 0];
bool ContextPoolingParameter::has_context_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContextPoolingParameter::set_has_context_h() {
  _has_bits_[0] |= 0x00000004u;
}
void ContextPoolingParameter::clear_has_context_h() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContextPoolingParameter::clear_context_h() {
  context_h_ = 0u;
  clear_has_context_h();
}
::google::protobuf::uint32 ContextPoolingParameter::context_h() const {
  // @@protoc_insertion_point(field_get:caffe.ContextPoolingParameter.context_h)
  return context_h_;
}
void ContextPoolingParameter::set_context_h(::google::protobuf::uint32 value) {
  set_has_context_h();
  context_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContextPoolingParameter.context_h)
}

// optional uint32 context_w = 2 [default = 0];
bool ContextPoolingParameter::has_context_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContextPoolingParameter::set_has_context_w() {
  _has_bits_[0] |= 0x00000008u;
}
void ContextPoolingParameter::clear_has_context_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContextPoolingParameter::clear_context_w() {
  context_w_ = 0u;
  clear_has_context_w();
}
::google::protobuf::uint32 ContextPoolingParameter::context_w() const {
  // @@protoc_insertion_point(field_get:caffe.ContextPoolingParameter.context_w)
  return context_w_;
}
void ContextPoolingParameter::set_context_w(::google::protobuf::uint32 value) {
  set_has_context_w();
  context_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContextPoolingParameter.context_w)
}

// optional string pool = 3;
bool ContextPoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContextPoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
void ContextPoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContextPoolingParameter::clear_pool() {
  pool_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool();
}
const ::std::string& ContextPoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.ContextPoolingParameter.pool)
  return pool_.GetNoArena();
}
void ContextPoolingParameter::set_pool(const ::std::string& value) {
  set_has_pool();
  pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ContextPoolingParameter.pool)
}
#if LANG_CXX11
void ContextPoolingParameter::set_pool(::std::string&& value) {
  set_has_pool();
  pool_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ContextPoolingParameter.pool)
}
#endif
void ContextPoolingParameter::set_pool(const char* value) {
  set_has_pool();
  pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ContextPoolingParameter.pool)
}
void ContextPoolingParameter::set_pool(const char* value, size_t size) {
  set_has_pool();
  pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ContextPoolingParameter.pool)
}
::std::string* ContextPoolingParameter::mutable_pool() {
  set_has_pool();
  // @@protoc_insertion_point(field_mutable:caffe.ContextPoolingParameter.pool)
  return pool_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContextPoolingParameter::release_pool() {
  // @@protoc_insertion_point(field_release:caffe.ContextPoolingParameter.pool)
  clear_has_pool();
  return pool_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContextPoolingParameter::set_allocated_pool(::std::string* pool) {
  if (pool != NULL) {
    set_has_pool();
  } else {
    clear_has_pool();
  }
  pool_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool);
  // @@protoc_insertion_point(field_set_allocated:caffe.ContextPoolingParameter.pool)
}

// optional string mode = 4;
bool ContextPoolingParameter::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContextPoolingParameter::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void ContextPoolingParameter::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContextPoolingParameter::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
const ::std::string& ContextPoolingParameter::mode() const {
  // @@protoc_insertion_point(field_get:caffe.ContextPoolingParameter.mode)
  return mode_.GetNoArena();
}
void ContextPoolingParameter::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ContextPoolingParameter.mode)
}
#if LANG_CXX11
void ContextPoolingParameter::set_mode(::std::string&& value) {
  set_has_mode();
  mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ContextPoolingParameter.mode)
}
#endif
void ContextPoolingParameter::set_mode(const char* value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ContextPoolingParameter.mode)
}
void ContextPoolingParameter::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ContextPoolingParameter.mode)
}
::std::string* ContextPoolingParameter::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:caffe.ContextPoolingParameter.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContextPoolingParameter::release_mode() {
  // @@protoc_insertion_point(field_release:caffe.ContextPoolingParameter.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContextPoolingParameter::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.ContextPoolingParameter.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizeParameter::kScaleValueFieldNumber;
const int NormalizeParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizeParameter::NormalizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NormalizeParameter)
}
NormalizeParameter::NormalizeParameter(const NormalizeParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_value_, &from.scale_value_,
    reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&scale_value_) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:caffe.NormalizeParameter)
}

void NormalizeParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_value_ = 1;
  eps_ = 1e-10f;
}

NormalizeParameter::~NormalizeParameter() {
  // @@protoc_insertion_point(destructor:caffe.NormalizeParameter)
  SharedDtor();
}

void NormalizeParameter::SharedDtor() {
}

void NormalizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizeParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[21].descriptor;
}

const NormalizeParameter& NormalizeParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NormalizeParameter* NormalizeParameter::New(::google::protobuf::Arena* arena) const {
  NormalizeParameter* n = new NormalizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NormalizeParameter)
  if (_has_bits_[0 / 32] & 3u) {
    scale_value_ = 1;
    eps_ = 1e-10f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NormalizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale_value = 1 [default = 1];
      case 1: {
        if (tag == 13u) {
          set_has_scale_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 2 [default = 1e-10];
      case 2: {
        if (tag == 21u) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NormalizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NormalizeParameter)
  return false;
#undef DO_
}

void NormalizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NormalizeParameter)
  // optional float scale_value = 1 [default = 1];
  if (has_scale_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale_value(), output);
  }

  // optional float eps = 2 [default = 1e-10];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NormalizeParameter)
}

::google::protobuf::uint8* NormalizeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NormalizeParameter)
  // optional float scale_value = 1 [default = 1];
  if (has_scale_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale_value(), target);
  }

  // optional float eps = 2 [default = 1e-10];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NormalizeParameter)
  return target;
}

size_t NormalizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NormalizeParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float scale_value = 1 [default = 1];
    if (has_scale_value()) {
      total_size += 1 + 4;
    }

    // optional float eps = 2 [default = 1e-10];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NormalizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NormalizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NormalizeParameter)
    MergeFrom(*source);
  }
}

void NormalizeParameter::MergeFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NormalizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_scale_value()) {
      set_scale_value(from.scale_value());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
}

void NormalizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NormalizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeParameter::CopyFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NormalizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeParameter::IsInitialized() const {
  return true;
}

void NormalizeParameter::Swap(NormalizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizeParameter::InternalSwap(NormalizeParameter* other) {
  std::swap(scale_value_, other->scale_value_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalizeParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizeParameter

// optional float scale_value = 1 [default = 1];
bool NormalizeParameter::has_scale_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NormalizeParameter::set_has_scale_value() {
  _has_bits_[0] |= 0x00000001u;
}
void NormalizeParameter::clear_has_scale_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void NormalizeParameter::clear_scale_value() {
  scale_value_ = 1;
  clear_has_scale_value();
}
float NormalizeParameter::scale_value() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.scale_value)
  return scale_value_;
}
void NormalizeParameter::set_scale_value(float value) {
  set_has_scale_value();
  scale_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.scale_value)
}

// optional float eps = 2 [default = 1e-10];
bool NormalizeParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NormalizeParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000002u;
}
void NormalizeParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000002u;
}
void NormalizeParameter::clear_eps() {
  eps_ = 1e-10f;
  clear_has_eps();
}
float NormalizeParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.eps)
  return eps_;
}
void NormalizeParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccuracyParameter::kTopKFieldNumber;
const int AccuracyParameter::kIgnoreLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccuracyParameter::AccuracyParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AccuracyParameter)
}
AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&ignore_label_) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_label_ = 0;
  top_k_ = 1u;
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:caffe.AccuracyParameter)
  SharedDtor();
}

void AccuracyParameter::SharedDtor() {
}

void AccuracyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccuracyParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[22].descriptor;
}

const AccuracyParameter& AccuracyParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccuracyParameter* AccuracyParameter::New(::google::protobuf::Arena* arena) const {
  AccuracyParameter* n = new AccuracyParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AccuracyParameter)
  if (_has_bits_[0 / 32] & 3u) {
    ignore_label_ = 0;
    top_k_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccuracyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AccuracyParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_k = 1 [default = 1];
      case 1: {
        if (tag == 8u) {
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ignore_label = 2;
      case 2: {
        if (tag == 16u) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AccuracyParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AccuracyParameter)
  return false;
#undef DO_
}

void AccuracyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_k(), output);
  }

  // optional int32 ignore_label = 2;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ignore_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AccuracyParameter)
}

::google::protobuf::uint8* AccuracyParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_k(), target);
  }

  // optional int32 ignore_label = 2;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ignore_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AccuracyParameter)
  return target;
}

size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AccuracyParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ignore_label = 2;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional uint32 top_k = 1 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccuracyParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccuracyParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccuracyParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AccuracyParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AccuracyParameter)
    MergeFrom(*source);
  }
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
  }
}

void AccuracyParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {
  return true;
}

void AccuracyParameter::Swap(AccuracyParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(top_k_, other->top_k_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccuracyParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 ignore_label = 2;
bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShortcutParameter::kScaleFieldNumber;
const int ShortcutParameter::kDropoutRatioFieldNumber;
const int ShortcutParameter::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShortcutParameter::ShortcutParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ShortcutParameter)
}
ShortcutParameter::ShortcutParameter(const ShortcutParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    reinterpret_cast<char*>(&groups_) -
    reinterpret_cast<char*>(&scale_) + sizeof(groups_));
  // @@protoc_insertion_point(copy_constructor:caffe.ShortcutParameter)
}

void ShortcutParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0;
  dropout_ratio_ = 0.5f;
  groups_ = 1u;
}

ShortcutParameter::~ShortcutParameter() {
  // @@protoc_insertion_point(destructor:caffe.ShortcutParameter)
  SharedDtor();
}

void ShortcutParameter::SharedDtor() {
}

void ShortcutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShortcutParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[23].descriptor;
}

const ShortcutParameter& ShortcutParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShortcutParameter* ShortcutParameter::New(::google::protobuf::Arena* arena) const {
  ShortcutParameter* n = new ShortcutParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShortcutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ShortcutParameter)
  if (_has_bits_[0 / 32] & 7u) {
    scale_ = 0;
    dropout_ratio_ = 0.5f;
    groups_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShortcutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ShortcutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1;
      case 1: {
        if (tag == 13u) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_ratio = 2 [default = 0.5];
      case 2: {
        if (tag == 21u) {
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 groups = 3 [default = 1];
      case 3: {
        if (tag == 24u) {
          set_has_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ShortcutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ShortcutParameter)
  return false;
#undef DO_
}

void ShortcutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ShortcutParameter)
  // optional float scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional float dropout_ratio = 2 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dropout_ratio(), output);
  }

  // optional uint32 groups = 3 [default = 1];
  if (has_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groups(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ShortcutParameter)
}

::google::protobuf::uint8* ShortcutParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ShortcutParameter)
  // optional float scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional float dropout_ratio = 2 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dropout_ratio(), target);
  }

  // optional uint32 groups = 3 [default = 1];
  if (has_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groups(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ShortcutParameter)
  return target;
}

size_t ShortcutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ShortcutParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float scale = 1;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float dropout_ratio = 2 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 groups = 3 [default = 1];
    if (has_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groups());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortcutParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ShortcutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ShortcutParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShortcutParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ShortcutParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ShortcutParameter)
    MergeFrom(*source);
  }
}

void ShortcutParameter::MergeFrom(const ShortcutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ShortcutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
    if (from.has_groups()) {
      set_groups(from.groups());
    }
  }
}

void ShortcutParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ShortcutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortcutParameter::CopyFrom(const ShortcutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ShortcutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortcutParameter::IsInitialized() const {
  return true;
}

void ShortcutParameter::Swap(ShortcutParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShortcutParameter::InternalSwap(ShortcutParameter* other) {
  std::swap(scale_, other->scale_);
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(groups_, other->groups_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShortcutParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShortcutParameter

// optional float scale = 1;
bool ShortcutParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShortcutParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
void ShortcutParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShortcutParameter::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float ShortcutParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ShortcutParameter.scale)
  return scale_;
}
void ShortcutParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ShortcutParameter.scale)
}

// optional float dropout_ratio = 2 [default = 0.5];
bool ShortcutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShortcutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void ShortcutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShortcutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float ShortcutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ShortcutParameter.dropout_ratio)
  return dropout_ratio_;
}
void ShortcutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ShortcutParameter.dropout_ratio)
}

// optional uint32 groups = 3 [default = 1];
bool ShortcutParameter::has_groups() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShortcutParameter::set_has_groups() {
  _has_bits_[0] |= 0x00000004u;
}
void ShortcutParameter::clear_has_groups() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShortcutParameter::clear_groups() {
  groups_ = 1u;
  clear_has_groups();
}
::google::protobuf::uint32 ShortcutParameter::groups() const {
  // @@protoc_insertion_point(field_get:caffe.ShortcutParameter.groups)
  return groups_;
}
void ShortcutParameter::set_groups(::google::protobuf::uint32 value) {
  set_has_groups();
  groups_ = value;
  // @@protoc_insertion_point(field_set:caffe.ShortcutParameter.groups)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> BatchNormParameter::_default_bn_state_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormParameter::kBnStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormParameter::BatchNormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchNormParameter)
}
BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bn_state_.UnsafeSetDefault(&BatchNormParameter::_default_bn_state_.get());
  if (from.has_bn_state()) {
    bn_state_.AssignWithDefault(&BatchNormParameter::_default_bn_state_.get(), from.bn_state_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
  _cached_size_ = 0;
  bn_state_.UnsafeSetDefault(&BatchNormParameter::_default_bn_state_.get());
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchNormParameter)
  SharedDtor();
}

void BatchNormParameter::SharedDtor() {
  bn_state_.DestroyNoArena(&BatchNormParameter::_default_bn_state_.get());
}

void BatchNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[24].descriptor;
}

const BatchNormParameter& BatchNormParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchNormParameter* BatchNormParameter::New(::google::protobuf::Arena* arena) const {
  BatchNormParameter* n = new BatchNormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchNormParameter)
  if (has_bn_state()) {
    GOOGLE_DCHECK(!bn_state_.IsDefault(&BatchNormParameter::_default_bn_state_.get()));
    (*bn_state_.UnsafeRawStringPointer())->assign(*&BatchNormParameter::_default_bn_state_.get());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bn_state = 1 [default = "learned"];
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bn_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bn_state().data(), this->bn_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.BatchNormParameter.bn_state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchNormParameter)
  return false;
#undef DO_
}

void BatchNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchNormParameter)
  // optional string bn_state = 1 [default = "learned"];
  if (has_bn_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bn_state().data(), this->bn_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BatchNormParameter.bn_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bn_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchNormParameter)
}

::google::protobuf::uint8* BatchNormParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormParameter)
  // optional string bn_state = 1 [default = "learned"];
  if (has_bn_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bn_state().data(), this->bn_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.BatchNormParameter.bn_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bn_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormParameter)
  return target;
}

size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchNormParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string bn_state = 1 [default = "learned"];
  if (has_bn_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bn_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchNormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchNormParameter)
    MergeFrom(*source);
  }
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bn_state()) {
    set_has_bn_state();
    bn_state_.AssignWithDefault(&BatchNormParameter::_default_bn_state_.get(), from.bn_state_);
  }
}

void BatchNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {
  return true;
}

void BatchNormParameter::Swap(BatchNormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  bn_state_.Swap(&other->bn_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNormParameter

// optional string bn_state = 1 [default = "learned"];
bool BatchNormParameter::has_bn_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchNormParameter::set_has_bn_state() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchNormParameter::clear_has_bn_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchNormParameter::clear_bn_state() {
  bn_state_.ClearToDefaultNoArena(&BatchNormParameter::_default_bn_state_.get());
  clear_has_bn_state();
}
const ::std::string& BatchNormParameter::bn_state() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.bn_state)
  return bn_state_.GetNoArena();
}
void BatchNormParameter::set_bn_state(const ::std::string& value) {
  set_has_bn_state();
  bn_state_.SetNoArena(&BatchNormParameter::_default_bn_state_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.bn_state)
}
#if LANG_CXX11
void BatchNormParameter::set_bn_state(::std::string&& value) {
  set_has_bn_state();
  bn_state_.SetNoArena(
    &BatchNormParameter::_default_bn_state_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.BatchNormParameter.bn_state)
}
#endif
void BatchNormParameter::set_bn_state(const char* value) {
  set_has_bn_state();
  bn_state_.SetNoArena(&BatchNormParameter::_default_bn_state_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BatchNormParameter.bn_state)
}
void BatchNormParameter::set_bn_state(const char* value, size_t size) {
  set_has_bn_state();
  bn_state_.SetNoArena(&BatchNormParameter::_default_bn_state_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BatchNormParameter.bn_state)
}
::std::string* BatchNormParameter::mutable_bn_state() {
  set_has_bn_state();
  // @@protoc_insertion_point(field_mutable:caffe.BatchNormParameter.bn_state)
  return bn_state_.MutableNoArena(&BatchNormParameter::_default_bn_state_.get());
}
::std::string* BatchNormParameter::release_bn_state() {
  // @@protoc_insertion_point(field_release:caffe.BatchNormParameter.bn_state)
  clear_has_bn_state();
  return bn_state_.ReleaseNoArena(&BatchNormParameter::_default_bn_state_.get());
}
void BatchNormParameter::set_allocated_bn_state(::std::string* bn_state) {
  if (bn_state != NULL) {
    set_has_bn_state();
  } else {
    clear_has_bn_state();
  }
  bn_state_.SetAllocatedNoArena(&BatchNormParameter::_default_bn_state_.get(), bn_state);
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchNormParameter.bn_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputBlob::kNameFieldNumber;
const int InputBlob::kNumFieldNumber;
const int InputBlob::kChannelsFieldNumber;
const int InputBlob::kHeightFieldNumber;
const int InputBlob::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputBlob::InputBlob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InputBlob)
}
InputBlob::InputBlob(const InputBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&num_, &from.num_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&num_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.InputBlob)
}

void InputBlob::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&num_) + sizeof(width_));
}

InputBlob::~InputBlob() {
  // @@protoc_insertion_point(destructor:caffe.InputBlob)
  SharedDtor();
}

void InputBlob::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InputBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputBlob::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[25].descriptor;
}

const InputBlob& InputBlob::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputBlob* InputBlob::New(::google::protobuf::Arena* arena) const {
  InputBlob* n = new InputBlob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InputBlob)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&num_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&num_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InputBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InputBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InputBlob.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16u) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channels = 3;
      case 3: {
        if (tag == 24u) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (tag == 40u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InputBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InputBlob)
  return false;
#undef DO_
}

void InputBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InputBlob)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InputBlob.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 channels = 3;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional int32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InputBlob)
}

::google::protobuf::uint8* InputBlob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InputBlob)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InputBlob.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 channels = 3;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channels(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional int32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InputBlob)
  return target;
}

size_t InputBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InputBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 3;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InputBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const InputBlob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputBlob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InputBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InputBlob)
    MergeFrom(*source);
  }
}

void InputBlob::MergeFrom(const InputBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InputBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
}

void InputBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InputBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputBlob::CopyFrom(const InputBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InputBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputBlob::IsInitialized() const {
  return true;
}

void InputBlob::Swap(InputBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputBlob::InternalSwap(InputBlob* other) {
  name_.Swap(&other->name_);
  std::swap(num_, other->num_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputBlob::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputBlob

// optional string name = 1;
bool InputBlob::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InputBlob::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InputBlob::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InputBlob::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& InputBlob::name() const {
  // @@protoc_insertion_point(field_get:caffe.InputBlob.name)
  return name_.GetNoArena();
}
void InputBlob::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InputBlob.name)
}
#if LANG_CXX11
void InputBlob::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InputBlob.name)
}
#endif
void InputBlob::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InputBlob.name)
}
void InputBlob::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InputBlob.name)
}
::std::string* InputBlob::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.InputBlob.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InputBlob::release_name() {
  // @@protoc_insertion_point(field_release:caffe.InputBlob.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InputBlob::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.InputBlob.name)
}

// optional int32 num = 2;
bool InputBlob::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InputBlob::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void InputBlob::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void InputBlob::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 InputBlob::num() const {
  // @@protoc_insertion_point(field_get:caffe.InputBlob.num)
  return num_;
}
void InputBlob::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.InputBlob.num)
}

// optional int32 channels = 3;
bool InputBlob::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InputBlob::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
void InputBlob::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
void InputBlob::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 InputBlob::channels() const {
  // @@protoc_insertion_point(field_get:caffe.InputBlob.channels)
  return channels_;
}
void InputBlob::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.InputBlob.channels)
}

// optional int32 height = 4;
bool InputBlob::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InputBlob::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void InputBlob::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void InputBlob::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 InputBlob::height() const {
  // @@protoc_insertion_point(field_get:caffe.InputBlob.height)
  return height_;
}
void InputBlob::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.InputBlob.height)
}

// optional int32 width = 5;
bool InputBlob::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InputBlob::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void InputBlob::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void InputBlob::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 InputBlob::width() const {
  // @@protoc_insertion_point(field_get:caffe.InputBlob.width)
  return width_;
}
void InputBlob::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.InputBlob.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kNameFieldNumber;
const int NetParameter::kLayerFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputBlobFieldNumber;
const int NetParameter::kNumFlowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      layer_(from.layer_),
      input_(from.input_),
      input_blob_(from.input_blob_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  num_flow_ = from.num_flow_;
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_flow_ = 0;
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:caffe.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[26].descriptor;
}

const NetParameter& NetParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
  NetParameter* n = new NetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameter)
  layer_.Clear();
  input_.Clear();
  input_blob_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  num_flow_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.InputBlob input_blob = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_blob()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int32 num_flow = 6 [default = 0];
      case 6: {
        if (tag == 48u) {
          set_has_num_flow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_flow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.LayerParameter layer = 100;
      case 100: {
        if (tag == 802u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // repeated .caffe.InputBlob input_blob = 5;
  for (unsigned int i = 0, n = this->input_blob_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->input_blob(i), output);
  }

  // optional int32 num_flow = 6 [default = 0];
  if (has_num_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_flow(), output);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // repeated .caffe.InputBlob input_blob = 5;
  for (unsigned int i = 0, n = this->input_blob_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->input_blob(i), false, target);
  }

  // optional int32 num_flow = 6 [default = 0];
  if (has_num_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_flow(), target);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->layer(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.LayerParameter layer = 100;
  {
    unsigned int count = this->layer_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(i));
    }
  }

  // repeated string input = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated .caffe.InputBlob input_blob = 5;
  {
    unsigned int count = this->input_blob_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_blob(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 num_flow = 6 [default = 0];
    if (has_num_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_flow());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_.MergeFrom(from.layer_);
  input_.MergeFrom(from.input_);
  input_blob_.MergeFrom(from.input_blob_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_num_flow()) {
      set_num_flow(from.num_flow());
    }
  }
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
  layer_.UnsafeArenaSwap(&other->layer_);
  input_.UnsafeArenaSwap(&other->input_);
  input_blob_.UnsafeArenaSwap(&other->input_blob_);
  name_.Swap(&other->name_);
  std::swap(num_flow_, other->num_flow_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// optional string name = 1;
bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
void NetParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated .caffe.LayerParameter layer = 100;
int NetParameter::layer_size() const {
  return layer_.size();
}
void NetParameter::clear_layer() {
  layer_.Clear();
}
const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated string input = 3;
int NetParameter::input_size() const {
  return input_.size();
}
void NetParameter::clear_input() {
  input_.Clear();
}
const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.InputBlob input_blob = 5;
int NetParameter::input_blob_size() const {
  return input_blob_.size();
}
void NetParameter::clear_input_blob() {
  input_blob_.Clear();
}
const ::caffe::InputBlob& NetParameter::input_blob(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_blob)
  return input_blob_.Get(index);
}
::caffe::InputBlob* NetParameter::mutable_input_blob(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_blob)
  return input_blob_.Mutable(index);
}
::caffe::InputBlob* NetParameter::add_input_blob() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_blob)
  return input_blob_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::InputBlob >*
NetParameter::mutable_input_blob() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_blob)
  return &input_blob_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::InputBlob >&
NetParameter::input_blob() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_blob)
  return input_blob_;
}

// optional int32 num_flow = 6 [default = 0];
bool NetParameter::has_num_flow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetParameter::set_has_num_flow() {
  _has_bits_[0] |= 0x00000002u;
}
void NetParameter::clear_has_num_flow() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetParameter::clear_num_flow() {
  num_flow_ = 0;
  clear_has_num_flow();
}
::google::protobuf::int32 NetParameter::num_flow() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.num_flow)
  return num_flow_;
}
void NetParameter::set_num_flow(::google::protobuf::int32 value) {
  set_has_num_flow();
  num_flow_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.num_flow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetOptimizer::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetOptimizer::kBaseLrFieldNumber;
const int NetOptimizer::kTypeFieldNumber;
const int NetOptimizer::kLrPolicyFieldNumber;
const int NetOptimizer::kGammaFieldNumber;
const int NetOptimizer::kPowerFieldNumber;
const int NetOptimizer::kStepsizeFieldNumber;
const int NetOptimizer::kStepvalueFieldNumber;
const int NetOptimizer::kMomentumFieldNumber;
const int NetOptimizer::kWeightDecayFieldNumber;
const int NetOptimizer::kDisplayFieldNumber;
const int NetOptimizer::kAverageLossFieldNumber;
const int NetOptimizer::kMomentum2FieldNumber;
const int NetOptimizer::kDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetOptimizer::NetOptimizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetOptimizer)
}
NetOptimizer::NetOptimizer(const NetOptimizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stepvalue_(from.stepvalue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&NetOptimizer::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&NetOptimizer::_default_type_.get(), from.type_);
  }
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lr_policy()) {
    lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
  }
  ::memcpy(&base_lr_, &from.base_lr_,
    reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&base_lr_) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetOptimizer)
}

void NetOptimizer::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&NetOptimizer::_default_type_.get());
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_lr_, 0, reinterpret_cast<char*>(&display_) -
    reinterpret_cast<char*>(&base_lr_) + sizeof(display_));
  momentum_ = 0.9f;
  average_loss_ = 1;
  momentum2_ = 0.999f;
  delta_ = 1e-08f;
}

NetOptimizer::~NetOptimizer() {
  // @@protoc_insertion_point(destructor:caffe.NetOptimizer)
  SharedDtor();
}

void NetOptimizer::SharedDtor() {
  type_.DestroyNoArena(&NetOptimizer::_default_type_.get());
  lr_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetOptimizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetOptimizer::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[27].descriptor;
}

const NetOptimizer& NetOptimizer::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetOptimizer* NetOptimizer::New(::google::protobuf::Arena* arena) const {
  NetOptimizer* n = new NetOptimizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetOptimizer)
  stepvalue_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&NetOptimizer::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&NetOptimizer::_default_type_.get());
    }
    if (has_lr_policy()) {
      GOOGLE_DCHECK(!lr_policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lr_policy_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&base_lr_, 0, reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&base_lr_) + sizeof(display_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    momentum_ = 0.9f;
    average_loss_ = 1;
    momentum2_ = 0.999f;
    delta_ = 1e-08f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetOptimizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetOptimizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base_lr = 1;
      case 1: {
        if (tag == 13u) {
          set_has_base_lr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2 [default = "SGD"];
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetOptimizer.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lr_policy = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lr_policy().data(), this->lr_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetOptimizer.lr_policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma = 4;
      case 4: {
        if (tag == 37u) {
          set_has_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float power = 5;
      case 5: {
        if (tag == 45u) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stepsize = 6;
      case 6: {
        if (tag == 48u) {
          set_has_stepsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stepvalue = 7;
      case 7: {
        if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_stepvalue())));
        } else if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stepvalue())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum = 8 [default = 0.9];
      case 8: {
        if (tag == 69u) {
          set_has_momentum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_decay = 9;
      case 9: {
        if (tag == 77u) {
          set_has_weight_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display = 11;
      case 11: {
        if (tag == 88u) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 average_loss = 12 [default = 1];
      case 12: {
        if (tag == 96u) {
          set_has_average_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum2 = 13 [default = 0.999];
      case 13: {
        if (tag == 109u) {
          set_has_momentum2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta = 14 [default = 1e-08];
      case 14: {
        if (tag == 117u) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetOptimizer)
  return false;
#undef DO_
}

void NetOptimizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetOptimizer)
  // optional float base_lr = 1;
  if (has_base_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base_lr(), output);
  }

  // optional string type = 2 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetOptimizer.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string lr_policy = 3;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetOptimizer.lr_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lr_policy(), output);
  }

  // optional float gamma = 4;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gamma(), output);
  }

  // optional float power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->power(), output);
  }

  // optional int32 stepsize = 6;
  if (has_stepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stepsize(), output);
  }

  // repeated int32 stepvalue = 7;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->stepvalue(i), output);
  }

  // optional float momentum = 8 [default = 0.9];
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->momentum(), output);
  }

  // optional float weight_decay = 9;
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->weight_decay(), output);
  }

  // optional int32 display = 11;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->display(), output);
  }

  // optional int32 average_loss = 12 [default = 1];
  if (has_average_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->average_loss(), output);
  }

  // optional float momentum2 = 13 [default = 0.999];
  if (has_momentum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->momentum2(), output);
  }

  // optional float delta = 14 [default = 1e-08];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetOptimizer)
}

::google::protobuf::uint8* NetOptimizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetOptimizer)
  // optional float base_lr = 1;
  if (has_base_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base_lr(), target);
  }

  // optional string type = 2 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetOptimizer.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string lr_policy = 3;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetOptimizer.lr_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lr_policy(), target);
  }

  // optional float gamma = 4;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gamma(), target);
  }

  // optional float power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->power(), target);
  }

  // optional int32 stepsize = 6;
  if (has_stepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stepsize(), target);
  }

  // repeated int32 stepvalue = 7;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->stepvalue(i), target);
  }

  // optional float momentum = 8 [default = 0.9];
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->momentum(), target);
  }

  // optional float weight_decay = 9;
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->weight_decay(), target);
  }

  // optional int32 display = 11;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->display(), target);
  }

  // optional int32 average_loss = 12 [default = 1];
  if (has_average_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->average_loss(), target);
  }

  // optional float momentum2 = 13 [default = 0.999];
  if (has_momentum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->momentum2(), target);
  }

  // optional float delta = 14 [default = 1e-08];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetOptimizer)
  return target;
}

size_t NetOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 stepvalue = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stepvalue_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stepvalue_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 2 [default = "SGD"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string lr_policy = 3;
    if (has_lr_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }

    // optional float base_lr = 1;
    if (has_base_lr()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 4;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power = 5;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional int32 stepsize = 6;
    if (has_stepsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }

    // optional float weight_decay = 9;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional int32 display = 11;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float momentum = 8 [default = 0.9];
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional int32 average_loss = 12 [default = 1];
    if (has_average_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_loss());
    }

    // optional float momentum2 = 13 [default = 0.999];
    if (has_momentum2()) {
      total_size += 1 + 4;
    }

    // optional float delta = 14 [default = 1e-08];
    if (has_delta()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetOptimizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const NetOptimizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetOptimizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetOptimizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetOptimizer)
    MergeFrom(*source);
  }
}

void NetOptimizer::MergeFrom(const NetOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stepvalue_.MergeFrom(from.stepvalue_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&NetOptimizer::_default_type_.get(), from.type_);
    }
    if (from.has_lr_policy()) {
      set_has_lr_policy();
      lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
    }
    if (from.has_base_lr()) {
      set_base_lr(from.base_lr());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_stepsize()) {
      set_stepsize(from.stepsize());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
  }
  if (from._has_bits_[8 / 32] & 3840u) {
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_average_loss()) {
      set_average_loss(from.average_loss());
    }
    if (from.has_momentum2()) {
      set_momentum2(from.momentum2());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
}

void NetOptimizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetOptimizer::CopyFrom(const NetOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetOptimizer::IsInitialized() const {
  return true;
}

void NetOptimizer::Swap(NetOptimizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetOptimizer::InternalSwap(NetOptimizer* other) {
  stepvalue_.UnsafeArenaSwap(&other->stepvalue_);
  type_.Swap(&other->type_);
  lr_policy_.Swap(&other->lr_policy_);
  std::swap(base_lr_, other->base_lr_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(stepsize_, other->stepsize_);
  std::swap(weight_decay_, other->weight_decay_);
  std::swap(display_, other->display_);
  std::swap(momentum_, other->momentum_);
  std::swap(average_loss_, other->average_loss_);
  std::swap(momentum2_, other->momentum2_);
  std::swap(delta_, other->delta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetOptimizer::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetOptimizer

// optional float base_lr = 1;
bool NetOptimizer::has_base_lr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetOptimizer::set_has_base_lr() {
  _has_bits_[0] |= 0x00000004u;
}
void NetOptimizer::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetOptimizer::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
float NetOptimizer::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.base_lr)
  return base_lr_;
}
void NetOptimizer::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.base_lr)
}

// optional string type = 2 [default = "SGD"];
bool NetOptimizer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetOptimizer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NetOptimizer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetOptimizer::clear_type() {
  type_.ClearToDefaultNoArena(&NetOptimizer::_default_type_.get());
  clear_has_type();
}
const ::std::string& NetOptimizer::type() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.type)
  return type_.GetNoArena();
}
void NetOptimizer::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&NetOptimizer::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.type)
}
#if LANG_CXX11
void NetOptimizer::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &NetOptimizer::_default_type_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetOptimizer.type)
}
#endif
void NetOptimizer::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&NetOptimizer::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetOptimizer.type)
}
void NetOptimizer::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&NetOptimizer::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetOptimizer.type)
}
::std::string* NetOptimizer::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.NetOptimizer.type)
  return type_.MutableNoArena(&NetOptimizer::_default_type_.get());
}
::std::string* NetOptimizer::release_type() {
  // @@protoc_insertion_point(field_release:caffe.NetOptimizer.type)
  clear_has_type();
  return type_.ReleaseNoArena(&NetOptimizer::_default_type_.get());
}
void NetOptimizer::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&NetOptimizer::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetOptimizer.type)
}

// optional string lr_policy = 3;
bool NetOptimizer::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetOptimizer::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000002u;
}
void NetOptimizer::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetOptimizer::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
const ::std::string& NetOptimizer::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.lr_policy)
  return lr_policy_.GetNoArena();
}
void NetOptimizer::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.lr_policy)
}
#if LANG_CXX11
void NetOptimizer::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetOptimizer.lr_policy)
}
#endif
void NetOptimizer::set_lr_policy(const char* value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetOptimizer.lr_policy)
}
void NetOptimizer::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetOptimizer.lr_policy)
}
::std::string* NetOptimizer::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.NetOptimizer.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetOptimizer::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.NetOptimizer.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetOptimizer::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetOptimizer.lr_policy)
}

// optional float gamma = 4;
bool NetOptimizer::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetOptimizer::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
void NetOptimizer::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetOptimizer::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
float NetOptimizer::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.gamma)
  return gamma_;
}
void NetOptimizer::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.gamma)
}

// optional float power = 5;
bool NetOptimizer::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetOptimizer::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
void NetOptimizer::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetOptimizer::clear_power() {
  power_ = 0;
  clear_has_power();
}
float NetOptimizer::power() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.power)
  return power_;
}
void NetOptimizer::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.power)
}

// optional int32 stepsize = 6;
bool NetOptimizer::has_stepsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetOptimizer::set_has_stepsize() {
  _has_bits_[0] |= 0x00000020u;
}
void NetOptimizer::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetOptimizer::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
::google::protobuf::int32 NetOptimizer::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.stepsize)
  return stepsize_;
}
void NetOptimizer::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.stepsize)
}

// repeated int32 stepvalue = 7;
int NetOptimizer::stepvalue_size() const {
  return stepvalue_.size();
}
void NetOptimizer::clear_stepvalue() {
  stepvalue_.Clear();
}
::google::protobuf::int32 NetOptimizer::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.stepvalue)
  return stepvalue_.Get(index);
}
void NetOptimizer::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.stepvalue)
}
void NetOptimizer::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetOptimizer.stepvalue)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetOptimizer::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.NetOptimizer.stepvalue)
  return stepvalue_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetOptimizer::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetOptimizer.stepvalue)
  return &stepvalue_;
}

// optional float momentum = 8 [default = 0.9];
bool NetOptimizer::has_momentum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NetOptimizer::set_has_momentum() {
  _has_bits_[0] |= 0x00000100u;
}
void NetOptimizer::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000100u;
}
void NetOptimizer::clear_momentum() {
  momentum_ = 0.9f;
  clear_has_momentum();
}
float NetOptimizer::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.momentum)
  return momentum_;
}
void NetOptimizer::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.momentum)
}

// optional float weight_decay = 9;
bool NetOptimizer::has_weight_decay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetOptimizer::set_has_weight_decay() {
  _has_bits_[0] |= 0x00000040u;
}
void NetOptimizer::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetOptimizer::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
float NetOptimizer::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.weight_decay)
  return weight_decay_;
}
void NetOptimizer::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.weight_decay)
}

// optional int32 display = 11;
bool NetOptimizer::has_display() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NetOptimizer::set_has_display() {
  _has_bits_[0] |= 0x00000080u;
}
void NetOptimizer::clear_has_display() {
  _has_bits_[0] &= ~0x00000080u;
}
void NetOptimizer::clear_display() {
  display_ = 0;
  clear_has_display();
}
::google::protobuf::int32 NetOptimizer::display() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.display)
  return display_;
}
void NetOptimizer::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.display)
}

// optional int32 average_loss = 12 [default = 1];
bool NetOptimizer::has_average_loss() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NetOptimizer::set_has_average_loss() {
  _has_bits_[0] |= 0x00000200u;
}
void NetOptimizer::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00000200u;
}
void NetOptimizer::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
::google::protobuf::int32 NetOptimizer::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.average_loss)
  return average_loss_;
}
void NetOptimizer::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.average_loss)
}

// optional float momentum2 = 13 [default = 0.999];
bool NetOptimizer::has_momentum2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NetOptimizer::set_has_momentum2() {
  _has_bits_[0] |= 0x00000400u;
}
void NetOptimizer::clear_has_momentum2() {
  _has_bits_[0] &= ~0x00000400u;
}
void NetOptimizer::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
float NetOptimizer::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.momentum2)
  return momentum2_;
}
void NetOptimizer::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.momentum2)
}

// optional float delta = 14 [default = 1e-08];
bool NetOptimizer::has_delta() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NetOptimizer::set_has_delta() {
  _has_bits_[0] |= 0x00000800u;
}
void NetOptimizer::clear_has_delta() {
  _has_bits_[0] &= ~0x00000800u;
}
void NetOptimizer::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
float NetOptimizer::delta() const {
  // @@protoc_insertion_point(field_get:caffe.NetOptimizer.delta)
  return delta_;
}
void NetOptimizer::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetOptimizer.delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kNetStateFieldNumber;
const int SolverState::kDStateFileFieldNumber;
const int SolverState::kGStateFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverState::SolverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverState)
}
SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_learned_net()) {
    learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
  }
  d_state_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_d_state_file()) {
    d_state_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_state_file_);
  }
  g_state_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_g_state_file()) {
    g_state_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_state_file_);
  }
  if (from.has_net_state()) {
    net_state_ = new ::caffe::NetState(*from.net_state_);
  } else {
    net_state_ = NULL;
  }
  iter_ = from.iter_;
  // @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_state_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_state_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&net_state_, 0, reinterpret_cast<char*>(&iter_) -
    reinterpret_cast<char*>(&net_state_) + sizeof(iter_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:caffe.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  learned_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_state_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_state_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete net_state_;
  }
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[28].descriptor;
}

const SolverState& SolverState::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverState* SolverState::New(::google::protobuf::Arena* arena) const {
  SolverState* n = new SolverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverState)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_learned_net()) {
      GOOGLE_DCHECK(!learned_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*learned_net_.UnsafeRawStringPointer())->clear();
    }
    if (has_d_state_file()) {
      GOOGLE_DCHECK(!d_state_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*d_state_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_g_state_file()) {
      GOOGLE_DCHECK(!g_state_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*g_state_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_net_state()) {
      GOOGLE_DCHECK(net_state_ != NULL);
      net_state_->::caffe::NetState::Clear();
    }
  }
  iter_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (tag == 8u) {
          set_has_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string learned_net = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->learned_net().data(), this->learned_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.learned_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetState net_state = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string d_state_file = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d_state_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->d_state_file().data(), this->d_state_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.d_state_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string g_state_file = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g_state_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->g_state_file().data(), this->g_state_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.g_state_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->learned_net(), output);
  }

  // optional .caffe.NetState net_state = 3;
  if (has_net_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->net_state_, output);
  }

  // optional string d_state_file = 4;
  if (has_d_state_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_state_file().data(), this->d_state_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.d_state_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->d_state_file(), output);
  }

  // optional string g_state_file = 5;
  if (has_g_state_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g_state_file().data(), this->g_state_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.g_state_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->g_state_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }

  // optional .caffe.NetState net_state = 3;
  if (has_net_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->net_state_, false, target);
  }

  // optional string d_state_file = 4;
  if (has_d_state_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_state_file().data(), this->d_state_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.d_state_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->d_state_file(), target);
  }

  // optional string g_state_file = 5;
  if (has_g_state_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g_state_file().data(), this->g_state_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.g_state_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->g_state_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
  return target;
}

size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }

    // optional string d_state_file = 4;
    if (has_d_state_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d_state_file());
    }

    // optional string g_state_file = 5;
    if (has_g_state_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->g_state_file());
    }

    // optional .caffe.NetState net_state = 3;
    if (has_net_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_state_);
    }

    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverState)
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_learned_net()) {
      set_has_learned_net();
      learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
    }
    if (from.has_d_state_file()) {
      set_has_d_state_file();
      d_state_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_state_file_);
    }
    if (from.has_g_state_file()) {
      set_has_g_state_file();
      g_state_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_state_file_);
    }
    if (from.has_net_state()) {
      mutable_net_state()->::caffe::NetState::MergeFrom(from.net_state());
    }
    if (from.has_iter()) {
      set_iter(from.iter());
    }
  }
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverState::InternalSwap(SolverState* other) {
  learned_net_.Swap(&other->learned_net_);
  d_state_file_.Swap(&other->d_state_file_);
  g_state_file_.Swap(&other->g_state_file_);
  std::swap(net_state_, other->net_state_);
  std::swap(iter_, other->iter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverState

// optional int32 iter = 1;
bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000010u;
}
void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000010u;
}
void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// optional .caffe.NetState net_state = 3;
bool SolverState::has_net_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SolverState::set_has_net_state() {
  _has_bits_[0] |= 0x00000008u;
}
void SolverState::clear_has_net_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void SolverState::clear_net_state() {
  if (net_state_ != NULL) net_state_->::caffe::NetState::Clear();
  clear_has_net_state();
}
const ::caffe::NetState& SolverState::net_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.net_state)
  return net_state_ != NULL ? *net_state_
                         : *::caffe::NetState::internal_default_instance();
}
::caffe::NetState* SolverState::mutable_net_state() {
  set_has_net_state();
  if (net_state_ == NULL) {
    net_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.net_state)
  return net_state_;
}
::caffe::NetState* SolverState::release_net_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.net_state)
  clear_has_net_state();
  ::caffe::NetState* temp = net_state_;
  net_state_ = NULL;
  return temp;
}
void SolverState::set_allocated_net_state(::caffe::NetState* net_state) {
  delete net_state_;
  net_state_ = net_state;
  if (net_state) {
    set_has_net_state();
  } else {
    clear_has_net_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.net_state)
}

// optional string d_state_file = 4;
bool SolverState::has_d_state_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverState::set_has_d_state_file() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverState::clear_has_d_state_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverState::clear_d_state_file() {
  d_state_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_d_state_file();
}
const ::std::string& SolverState::d_state_file() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.d_state_file)
  return d_state_file_.GetNoArena();
}
void SolverState::set_d_state_file(const ::std::string& value) {
  set_has_d_state_file();
  d_state_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.d_state_file)
}
#if LANG_CXX11
void SolverState::set_d_state_file(::std::string&& value) {
  set_has_d_state_file();
  d_state_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.d_state_file)
}
#endif
void SolverState::set_d_state_file(const char* value) {
  set_has_d_state_file();
  d_state_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.d_state_file)
}
void SolverState::set_d_state_file(const char* value, size_t size) {
  set_has_d_state_file();
  d_state_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.d_state_file)
}
::std::string* SolverState::mutable_d_state_file() {
  set_has_d_state_file();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.d_state_file)
  return d_state_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverState::release_d_state_file() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.d_state_file)
  clear_has_d_state_file();
  return d_state_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_allocated_d_state_file(::std::string* d_state_file) {
  if (d_state_file != NULL) {
    set_has_d_state_file();
  } else {
    clear_has_d_state_file();
  }
  d_state_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), d_state_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.d_state_file)
}

// optional string g_state_file = 5;
bool SolverState::has_g_state_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverState::set_has_g_state_file() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverState::clear_has_g_state_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverState::clear_g_state_file() {
  g_state_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_g_state_file();
}
const ::std::string& SolverState::g_state_file() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.g_state_file)
  return g_state_file_.GetNoArena();
}
void SolverState::set_g_state_file(const ::std::string& value) {
  set_has_g_state_file();
  g_state_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.g_state_file)
}
#if LANG_CXX11
void SolverState::set_g_state_file(::std::string&& value) {
  set_has_g_state_file();
  g_state_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.g_state_file)
}
#endif
void SolverState::set_g_state_file(const char* value) {
  set_has_g_state_file();
  g_state_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.g_state_file)
}
void SolverState::set_g_state_file(const char* value, size_t size) {
  set_has_g_state_file();
  g_state_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.g_state_file)
}
::std::string* SolverState::mutable_g_state_file() {
  set_has_g_state_file();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.g_state_file)
  return g_state_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverState::release_g_state_file() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.g_state_file)
  clear_has_g_state_file();
  return g_state_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_allocated_g_state_file(::std::string* g_state_file) {
  if (g_state_file != NULL) {
    set_has_g_state_file();
  } else {
    clear_has_g_state_file();
  }
  g_state_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), g_state_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.g_state_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetState::kLayerFieldNumber;
const int NetState::kAdamIterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetState::NetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetState)
}
NetState::NetState(const NetState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adam_iter_ = from.adam_iter_;
  // @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
  _cached_size_ = 0;
  adam_iter_ = 0;
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:caffe.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
}

void NetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[29].descriptor;
}

const NetState& NetState::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetState* NetState::New(::google::protobuf::Arena* arena) const {
  NetState* n = new NetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetState)
  layer_.Clear();
  adam_iter_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.LayerParameter layer = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int32 adam_iter = 2;
      case 2: {
        if (tag == 16u) {
          set_has_adam_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adam_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetState)
  return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetState)
  // repeated .caffe.LayerParameter layer = 1;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->layer(i), output);
  }

  // optional int32 adam_iter = 2;
  if (has_adam_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adam_iter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
  // repeated .caffe.LayerParameter layer = 1;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->layer(i), false, target);
  }

  // optional int32 adam_iter = 2;
  if (has_adam_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adam_iter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
  return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .caffe.LayerParameter layer = 1;
  {
    unsigned int count = this->layer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(i));
    }
  }

  // optional int32 adam_iter = 2;
  if (has_adam_iter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adam_iter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  const NetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetState)
    MergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_.MergeFrom(from.layer_);
  if (from.has_adam_iter()) {
    set_adam_iter(from.adam_iter());
  }
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {
  return true;
}

void NetState::Swap(NetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetState::InternalSwap(NetState* other) {
  layer_.UnsafeArenaSwap(&other->layer_);
  std::swap(adam_iter_, other->adam_iter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetState::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetState

// repeated .caffe.LayerParameter layer = 1;
int NetState::layer_size() const {
  return layer_.size();
}
void NetState::clear_layer() {
  layer_.Clear();
}
const ::caffe::LayerParameter& NetState::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.layer)
  return layer_.Get(index);
}
::caffe::LayerParameter* NetState::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.layer)
  return layer_.Mutable(index);
}
::caffe::LayerParameter* NetState::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetState.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetState::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetState::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.layer)
  return layer_;
}

// optional int32 adam_iter = 2;
bool NetState::has_adam_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetState::set_has_adam_iter() {
  _has_bits_[0] |= 0x00000001u;
}
void NetState::clear_has_adam_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetState::clear_adam_iter() {
  adam_iter_ = 0;
  clear_has_adam_iter();
}
::google::protobuf::int32 NetState::adam_iter() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.adam_iter)
  return adam_iter_;
}
void NetState::set_adam_iter(::google::protobuf::int32 value) {
  set_has_adam_iter();
  adam_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.adam_iter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_eval_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_solver_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_bn_state_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_drop_state_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetParamFieldNumber;
const int SolverParameter::kNetOptFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kTestInitializationFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kEvalTypeFieldNumber;
const int SolverParameter::kAccumulateBatchNormFieldNumber;
const int SolverParameter::kAccumulateTestIterFieldNumber;
const int SolverParameter::kAccumulateMaxIterFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSolverTypeFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kBnStateFieldNumber;
const int SolverParameter::kDropStateFieldNumber;
const int SolverParameter::kSecondPassFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kGNetOptFieldNumber;
const int SolverParameter::kDNetOptFieldNumber;
const int SolverParameter::kGNetFieldNumber;
const int SolverParameter::kGNetParamFieldNumber;
const int SolverParameter::kDNetFieldNumber;
const int SolverParameter::kDNetParamFieldNumber;
const int SolverParameter::kDInterpNetFieldNumber;
const int SolverParameter::kDAuxNetFieldNumber;
const int SolverParameter::kDInterpParamFieldNumber;
const int SolverParameter::kDAuxParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParameter::SolverParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverParameter)
}
SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net()) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  eval_type_.UnsafeSetDefault(&SolverParameter::_default_eval_type_.get());
  if (from.has_eval_type()) {
    eval_type_.AssignWithDefault(&SolverParameter::_default_eval_type_.get(), from.eval_type_);
  }
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snapshot_prefix()) {
    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  solver_type_.UnsafeSetDefault(&SolverParameter::_default_solver_type_.get());
  if (from.has_solver_type()) {
    solver_type_.AssignWithDefault(&SolverParameter::_default_solver_type_.get(), from.solver_type_);
  }
  bn_state_.UnsafeSetDefault(&SolverParameter::_default_bn_state_.get());
  if (from.has_bn_state()) {
    bn_state_.AssignWithDefault(&SolverParameter::_default_bn_state_.get(), from.bn_state_);
  }
  drop_state_.UnsafeSetDefault(&SolverParameter::_default_drop_state_.get());
  if (from.has_drop_state()) {
    drop_state_.AssignWithDefault(&SolverParameter::_default_drop_state_.get(), from.drop_state_);
  }
  test_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_test_net()) {
    test_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_net_);
  }
  g_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_g_net()) {
    g_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_net_);
  }
  d_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_d_net()) {
    d_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_net_);
  }
  d_interp_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_d_interp_net()) {
    d_interp_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_interp_net_);
  }
  d_aux_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_d_aux_net()) {
    d_aux_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_aux_net_);
  }
  if (from.has_net_param()) {
    net_param_ = new ::caffe::NetParameter(*from.net_param_);
  } else {
    net_param_ = NULL;
  }
  if (from.has_net_opt()) {
    net_opt_ = new ::caffe::NetOptimizer(*from.net_opt_);
  } else {
    net_opt_ = NULL;
  }
  if (from.has_g_net_opt()) {
    g_net_opt_ = new ::caffe::NetOptimizer(*from.g_net_opt_);
  } else {
    g_net_opt_ = NULL;
  }
  if (from.has_d_net_opt()) {
    d_net_opt_ = new ::caffe::NetOptimizer(*from.d_net_opt_);
  } else {
    d_net_opt_ = NULL;
  }
  if (from.has_g_net_param()) {
    g_net_param_ = new ::caffe::NetParameter(*from.g_net_param_);
  } else {
    g_net_param_ = NULL;
  }
  if (from.has_d_net_param()) {
    d_net_param_ = new ::caffe::NetParameter(*from.d_net_param_);
  } else {
    d_net_param_ = NULL;
  }
  if (from.has_d_interp_param()) {
    d_interp_param_ = new ::caffe::NetParameter(*from.d_interp_param_);
  } else {
    d_interp_param_ = NULL;
  }
  if (from.has_d_aux_param()) {
    d_aux_param_ = new ::caffe::NetParameter(*from.d_aux_param_);
  } else {
    d_aux_param_ = NULL;
  }
  ::memcpy(&max_iter_, &from.max_iter_,
    reinterpret_cast<char*>(&iter_size_) -
    reinterpret_cast<char*>(&max_iter_) + sizeof(iter_size_));
  // @@protoc_insertion_point(copy_constructor:caffe.SolverParameter)
}

void SolverParameter::SharedCtor() {
  _cached_size_ = 0;
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eval_type_.UnsafeSetDefault(&SolverParameter::_default_eval_type_.get());
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  solver_type_.UnsafeSetDefault(&SolverParameter::_default_solver_type_.get());
  bn_state_.UnsafeSetDefault(&SolverParameter::_default_bn_state_.get());
  drop_state_.UnsafeSetDefault(&SolverParameter::_default_drop_state_.get());
  test_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_interp_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_aux_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&net_param_, 0, reinterpret_cast<char*>(&display_) -
    reinterpret_cast<char*>(&net_param_) + sizeof(display_));
  iter_size_ = 1;
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:caffe.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eval_type_.DestroyNoArena(&SolverParameter::_default_eval_type_.get());
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  solver_type_.DestroyNoArena(&SolverParameter::_default_solver_type_.get());
  bn_state_.DestroyNoArena(&SolverParameter::_default_bn_state_.get());
  drop_state_.DestroyNoArena(&SolverParameter::_default_drop_state_.get());
  test_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_interp_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  d_aux_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete net_param_;
  }
  if (this != internal_default_instance()) {
    delete net_opt_;
  }
  if (this != internal_default_instance()) {
    delete g_net_opt_;
  }
  if (this != internal_default_instance()) {
    delete d_net_opt_;
  }
  if (this != internal_default_instance()) {
    delete g_net_param_;
  }
  if (this != internal_default_instance()) {
    delete d_net_param_;
  }
  if (this != internal_default_instance()) {
    delete d_interp_param_;
  }
  if (this != internal_default_instance()) {
    delete d_aux_param_;
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[30].descriptor;
}

const SolverParameter& SolverParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverParameter* SolverParameter::New(::google::protobuf::Arena* arena) const {
  SolverParameter* n = new SolverParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverParameter)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_net()) {
      GOOGLE_DCHECK(!net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*net_.UnsafeRawStringPointer())->clear();
    }
    if (has_eval_type()) {
      GOOGLE_DCHECK(!eval_type_.IsDefault(&SolverParameter::_default_eval_type_.get()));
      (*eval_type_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_eval_type_.get());
    }
    if (has_snapshot_prefix()) {
      GOOGLE_DCHECK(!snapshot_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snapshot_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_solver_type()) {
      GOOGLE_DCHECK(!solver_type_.IsDefault(&SolverParameter::_default_solver_type_.get()));
      (*solver_type_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_solver_type_.get());
    }
    if (has_bn_state()) {
      GOOGLE_DCHECK(!bn_state_.IsDefault(&SolverParameter::_default_bn_state_.get()));
      (*bn_state_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_bn_state_.get());
    }
    if (has_drop_state()) {
      GOOGLE_DCHECK(!drop_state_.IsDefault(&SolverParameter::_default_drop_state_.get()));
      (*drop_state_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_drop_state_.get());
    }
    if (has_test_net()) {
      GOOGLE_DCHECK(!test_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*test_net_.UnsafeRawStringPointer())->clear();
    }
    if (has_g_net()) {
      GOOGLE_DCHECK(!g_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*g_net_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_d_net()) {
      GOOGLE_DCHECK(!d_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*d_net_.UnsafeRawStringPointer())->clear();
    }
    if (has_d_interp_net()) {
      GOOGLE_DCHECK(!d_interp_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*d_interp_net_.UnsafeRawStringPointer())->clear();
    }
    if (has_d_aux_net()) {
      GOOGLE_DCHECK(!d_aux_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*d_aux_net_.UnsafeRawStringPointer())->clear();
    }
    if (has_net_param()) {
      GOOGLE_DCHECK(net_param_ != NULL);
      net_param_->::caffe::NetParameter::Clear();
    }
    if (has_net_opt()) {
      GOOGLE_DCHECK(net_opt_ != NULL);
      net_opt_->::caffe::NetOptimizer::Clear();
    }
    if (has_g_net_opt()) {
      GOOGLE_DCHECK(g_net_opt_ != NULL);
      g_net_opt_->::caffe::NetOptimizer::Clear();
    }
    if (has_d_net_opt()) {
      GOOGLE_DCHECK(d_net_opt_ != NULL);
      d_net_opt_->::caffe::NetOptimizer::Clear();
    }
    if (has_g_net_param()) {
      GOOGLE_DCHECK(g_net_param_ != NULL);
      g_net_param_->::caffe::NetParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    if (has_d_net_param()) {
      GOOGLE_DCHECK(d_net_param_ != NULL);
      d_net_param_->::caffe::NetParameter::Clear();
    }
    if (has_d_interp_param()) {
      GOOGLE_DCHECK(d_interp_param_ != NULL);
      d_interp_param_->::caffe::NetParameter::Clear();
    }
    if (has_d_aux_param()) {
      GOOGLE_DCHECK(d_aux_param_ != NULL);
      d_aux_param_->::caffe::NetParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16252928u) {
    ::memset(&max_iter_, 0, reinterpret_cast<char*>(&accumulate_max_iter_) -
      reinterpret_cast<char*>(&max_iter_) + sizeof(accumulate_max_iter_));
  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    ::memset(&test_initialization_, 0, reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&test_initialization_) + sizeof(display_));
    iter_size_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string net = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net().data(), this->net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter net_param = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetOptimizer net_opt = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 4;
      case 4: {
        if (tag == 32u) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_initialization = 5;
      case 5: {
        if (tag == 40u) {
          set_has_test_initialization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_initialization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 test_interval = 6;
      case 6: {
        if (tag == 48u) {
          set_has_test_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 test_iter = 7;
      case 7: {
        if (tag == 56u) {
          set_has_test_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string eval_type = 8 [default = "classification"];
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eval_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eval_type().data(), this->eval_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.eval_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accumulate_batch_norm = 9 [default = false];
      case 9: {
        if (tag == 72u) {
          set_has_accumulate_batch_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accumulate_batch_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accumulate_test_iter = 10;
      case 10: {
        if (tag == 80u) {
          set_has_accumulate_test_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accumulate_test_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accumulate_max_iter = 11;
      case 11: {
        if (tag == 88u) {
          set_has_accumulate_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accumulate_max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iter_size = 12 [default = 1];
      case 12: {
        if (tag == 96u) {
          set_has_iter_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 snapshot = 13 [default = 0];
      case 13: {
        if (tag == 104u) {
          set_has_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snapshot_prefix = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.snapshot_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string solver_type = 15 [default = "CNN"];
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->solver_type().data(), this->solver_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.solver_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display = 16;
      case 16: {
        if (tag == 128u) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bn_state = 18 [default = "learned"];
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bn_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bn_state().data(), this->bn_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.bn_state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string drop_state = 19 [default = "rand"];
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drop_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->drop_state().data(), this->drop_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.drop_state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool second_pass = 20 [default = false];
      case 20: {
        if (tag == 160u) {
          set_has_second_pass();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &second_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string test_net = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_net().data(), this->test_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.test_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetOptimizer g_net_opt = 100;
      case 100: {
        if (tag == 802u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g_net_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetOptimizer d_net_opt = 101;
      case 101: {
        if (tag == 810u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_net_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string g_net = 102;
      case 102: {
        if (tag == 818u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->g_net().data(), this->g_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.g_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter g_net_param = 103;
      case 103: {
        if (tag == 826u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string d_net = 106;
      case 106: {
        if (tag == 850u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->d_net().data(), this->d_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.d_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter d_net_param = 107;
      case 107: {
        if (tag == 858u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string d_interp_net = 110;
      case 110: {
        if (tag == 882u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d_interp_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->d_interp_net().data(), this->d_interp_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.d_interp_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string d_aux_net = 111;
      case 111: {
        if (tag == 890u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d_aux_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->d_aux_net().data(), this->d_aux_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.d_aux_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter d_interp_param = 112;
      case 112: {
        if (tag == 898u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_interp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter d_aux_param = 113;
      case 113: {
        if (tag == 906u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_aux_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverParameter)
  // optional string net = 1;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net(), output);
  }

  // optional .caffe.NetParameter net_param = 2;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->net_param_, output);
  }

  // optional .caffe.NetOptimizer net_opt = 3;
  if (has_net_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->net_opt_, output);
  }

  // optional int32 max_iter = 4;
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_iter(), output);
  }

  // optional bool test_initialization = 5;
  if (has_test_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->test_initialization(), output);
  }

  // optional int32 test_interval = 6;
  if (has_test_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->test_interval(), output);
  }

  // optional int32 test_iter = 7;
  if (has_test_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->test_iter(), output);
  }

  // optional string eval_type = 8 [default = "classification"];
  if (has_eval_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eval_type().data(), this->eval_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.eval_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->eval_type(), output);
  }

  // optional bool accumulate_batch_norm = 9 [default = false];
  if (has_accumulate_batch_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->accumulate_batch_norm(), output);
  }

  // optional uint32 accumulate_test_iter = 10;
  if (has_accumulate_test_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->accumulate_test_iter(), output);
  }

  // optional uint32 accumulate_max_iter = 11;
  if (has_accumulate_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->accumulate_max_iter(), output);
  }

  // optional int32 iter_size = 12 [default = 1];
  if (has_iter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->iter_size(), output);
  }

  // optional int32 snapshot = 13 [default = 0];
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->snapshot(), output);
  }

  // optional string snapshot_prefix = 14;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->snapshot_prefix(), output);
  }

  // optional string solver_type = 15 [default = "CNN"];
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solver_type().data(), this->solver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.solver_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->solver_type(), output);
  }

  // optional int32 display = 16;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->display(), output);
  }

  // optional string bn_state = 18 [default = "learned"];
  if (has_bn_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bn_state().data(), this->bn_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.bn_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->bn_state(), output);
  }

  // optional string drop_state = 19 [default = "rand"];
  if (has_drop_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->drop_state().data(), this->drop_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.drop_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->drop_state(), output);
  }

  // optional bool second_pass = 20 [default = false];
  if (has_second_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->second_pass(), output);
  }

  // optional string test_net = 21;
  if (has_test_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net().data(), this->test_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->test_net(), output);
  }

  // optional .caffe.NetOptimizer g_net_opt = 100;
  if (has_g_net_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->g_net_opt_, output);
  }

  // optional .caffe.NetOptimizer d_net_opt = 101;
  if (has_d_net_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->d_net_opt_, output);
  }

  // optional string g_net = 102;
  if (has_g_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g_net().data(), this->g_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.g_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->g_net(), output);
  }

  // optional .caffe.NetParameter g_net_param = 103;
  if (has_g_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->g_net_param_, output);
  }

  // optional string d_net = 106;
  if (has_d_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_net().data(), this->d_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.d_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      106, this->d_net(), output);
  }

  // optional .caffe.NetParameter d_net_param = 107;
  if (has_d_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->d_net_param_, output);
  }

  // optional string d_interp_net = 110;
  if (has_d_interp_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_interp_net().data(), this->d_interp_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.d_interp_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      110, this->d_interp_net(), output);
  }

  // optional string d_aux_net = 111;
  if (has_d_aux_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_aux_net().data(), this->d_aux_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.d_aux_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      111, this->d_aux_net(), output);
  }

  // optional .caffe.NetParameter d_interp_param = 112;
  if (has_d_interp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->d_interp_param_, output);
  }

  // optional .caffe.NetParameter d_aux_param = 113;
  if (has_d_aux_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->d_aux_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverParameter)
  // optional string net = 1;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net(), target);
  }

  // optional .caffe.NetParameter net_param = 2;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->net_param_, false, target);
  }

  // optional .caffe.NetOptimizer net_opt = 3;
  if (has_net_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->net_opt_, false, target);
  }

  // optional int32 max_iter = 4;
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_iter(), target);
  }

  // optional bool test_initialization = 5;
  if (has_test_initialization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->test_initialization(), target);
  }

  // optional int32 test_interval = 6;
  if (has_test_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->test_interval(), target);
  }

  // optional int32 test_iter = 7;
  if (has_test_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->test_iter(), target);
  }

  // optional string eval_type = 8 [default = "classification"];
  if (has_eval_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eval_type().data(), this->eval_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.eval_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->eval_type(), target);
  }

  // optional bool accumulate_batch_norm = 9 [default = false];
  if (has_accumulate_batch_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->accumulate_batch_norm(), target);
  }

  // optional uint32 accumulate_test_iter = 10;
  if (has_accumulate_test_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->accumulate_test_iter(), target);
  }

  // optional uint32 accumulate_max_iter = 11;
  if (has_accumulate_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->accumulate_max_iter(), target);
  }

  // optional int32 iter_size = 12 [default = 1];
  if (has_iter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->iter_size(), target);
  }

  // optional int32 snapshot = 13 [default = 0];
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->snapshot(), target);
  }

  // optional string snapshot_prefix = 14;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->snapshot_prefix(), target);
  }

  // optional string solver_type = 15 [default = "CNN"];
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solver_type().data(), this->solver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.solver_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->solver_type(), target);
  }

  // optional int32 display = 16;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->display(), target);
  }

  // optional string bn_state = 18 [default = "learned"];
  if (has_bn_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bn_state().data(), this->bn_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.bn_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->bn_state(), target);
  }

  // optional string drop_state = 19 [default = "rand"];
  if (has_drop_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->drop_state().data(), this->drop_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.drop_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->drop_state(), target);
  }

  // optional bool second_pass = 20 [default = false];
  if (has_second_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->second_pass(), target);
  }

  // optional string test_net = 21;
  if (has_test_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net().data(), this->test_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->test_net(), target);
  }

  // optional .caffe.NetOptimizer g_net_opt = 100;
  if (has_g_net_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->g_net_opt_, false, target);
  }

  // optional .caffe.NetOptimizer d_net_opt = 101;
  if (has_d_net_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->d_net_opt_, false, target);
  }

  // optional string g_net = 102;
  if (has_g_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g_net().data(), this->g_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.g_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->g_net(), target);
  }

  // optional .caffe.NetParameter g_net_param = 103;
  if (has_g_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->g_net_param_, false, target);
  }

  // optional string d_net = 106;
  if (has_d_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_net().data(), this->d_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.d_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        106, this->d_net(), target);
  }

  // optional .caffe.NetParameter d_net_param = 107;
  if (has_d_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->d_net_param_, false, target);
  }

  // optional string d_interp_net = 110;
  if (has_d_interp_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_interp_net().data(), this->d_interp_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.d_interp_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        110, this->d_interp_net(), target);
  }

  // optional string d_aux_net = 111;
  if (has_d_aux_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->d_aux_net().data(), this->d_aux_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.d_aux_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        111, this->d_aux_net(), target);
  }

  // optional .caffe.NetParameter d_interp_param = 112;
  if (has_d_interp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *this->d_interp_param_, false, target);
  }

  // optional .caffe.NetParameter d_aux_param = 113;
  if (has_d_aux_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        113, *this->d_aux_param_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverParameter)
  return target;
}

size_t SolverParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string net = 1;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional string eval_type = 8 [default = "classification"];
    if (has_eval_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eval_type());
    }

    // optional string snapshot_prefix = 14;
    if (has_snapshot_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }

    // optional string solver_type = 15 [default = "CNN"];
    if (has_solver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solver_type());
    }

    // optional string bn_state = 18 [default = "learned"];
    if (has_bn_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bn_state());
    }

    // optional string drop_state = 19 [default = "rand"];
    if (has_drop_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->drop_state());
    }

    // optional string test_net = 21;
    if (has_test_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_net());
    }

    // optional string g_net = 102;
    if (has_g_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->g_net());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string d_net = 106;
    if (has_d_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d_net());
    }

    // optional string d_interp_net = 110;
    if (has_d_interp_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d_interp_net());
    }

    // optional string d_aux_net = 111;
    if (has_d_aux_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d_aux_net());
    }

    // optional .caffe.NetParameter net_param = 2;
    if (has_net_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_param_);
    }

    // optional .caffe.NetOptimizer net_opt = 3;
    if (has_net_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_opt_);
    }

    // optional .caffe.NetOptimizer g_net_opt = 100;
    if (has_g_net_opt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->g_net_opt_);
    }

    // optional .caffe.NetOptimizer d_net_opt = 101;
    if (has_d_net_opt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->d_net_opt_);
    }

    // optional .caffe.NetParameter g_net_param = 103;
    if (has_g_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->g_net_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.NetParameter d_net_param = 107;
    if (has_d_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->d_net_param_);
    }

    // optional .caffe.NetParameter d_interp_param = 112;
    if (has_d_interp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->d_interp_param_);
    }

    // optional .caffe.NetParameter d_aux_param = 113;
    if (has_d_aux_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->d_aux_param_);
    }

    // optional int32 max_iter = 4;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional int32 test_interval = 6;
    if (has_test_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }

    // optional int32 test_iter = 7;
    if (has_test_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_iter());
    }

    // optional uint32 accumulate_test_iter = 10;
    if (has_accumulate_test_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accumulate_test_iter());
    }

    // optional uint32 accumulate_max_iter = 11;
    if (has_accumulate_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accumulate_max_iter());
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional bool test_initialization = 5;
    if (has_test_initialization()) {
      total_size += 1 + 1;
    }

    // optional bool accumulate_batch_norm = 9 [default = false];
    if (has_accumulate_batch_norm()) {
      total_size += 1 + 1;
    }

    // optional bool second_pass = 20 [default = false];
    if (has_second_pass()) {
      total_size += 2 + 1;
    }

    // optional int32 snapshot = 13 [default = 0];
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }

    // optional int32 display = 16;
    if (has_display()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 iter_size = 12 [default = 1];
    if (has_iter_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverParameter)
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_net()) {
      set_has_net();
      net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
    }
    if (from.has_eval_type()) {
      set_has_eval_type();
      eval_type_.AssignWithDefault(&SolverParameter::_default_eval_type_.get(), from.eval_type_);
    }
    if (from.has_snapshot_prefix()) {
      set_has_snapshot_prefix();
      snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
    }
    if (from.has_solver_type()) {
      set_has_solver_type();
      solver_type_.AssignWithDefault(&SolverParameter::_default_solver_type_.get(), from.solver_type_);
    }
    if (from.has_bn_state()) {
      set_has_bn_state();
      bn_state_.AssignWithDefault(&SolverParameter::_default_bn_state_.get(), from.bn_state_);
    }
    if (from.has_drop_state()) {
      set_has_drop_state();
      drop_state_.AssignWithDefault(&SolverParameter::_default_drop_state_.get(), from.drop_state_);
    }
    if (from.has_test_net()) {
      set_has_test_net();
      test_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_net_);
    }
    if (from.has_g_net()) {
      set_has_g_net();
      g_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_net_);
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_d_net()) {
      set_has_d_net();
      d_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_net_);
    }
    if (from.has_d_interp_net()) {
      set_has_d_interp_net();
      d_interp_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_interp_net_);
    }
    if (from.has_d_aux_net()) {
      set_has_d_aux_net();
      d_aux_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.d_aux_net_);
    }
    if (from.has_net_param()) {
      mutable_net_param()->::caffe::NetParameter::MergeFrom(from.net_param());
    }
    if (from.has_net_opt()) {
      mutable_net_opt()->::caffe::NetOptimizer::MergeFrom(from.net_opt());
    }
    if (from.has_g_net_opt()) {
      mutable_g_net_opt()->::caffe::NetOptimizer::MergeFrom(from.g_net_opt());
    }
    if (from.has_d_net_opt()) {
      mutable_d_net_opt()->::caffe::NetOptimizer::MergeFrom(from.d_net_opt());
    }
    if (from.has_g_net_param()) {
      mutable_g_net_param()->::caffe::NetParameter::MergeFrom(from.g_net_param());
    }
  }
  if (from._has_bits_[16 / 32] & 16711680u) {
    if (from.has_d_net_param()) {
      mutable_d_net_param()->::caffe::NetParameter::MergeFrom(from.d_net_param());
    }
    if (from.has_d_interp_param()) {
      mutable_d_interp_param()->::caffe::NetParameter::MergeFrom(from.d_interp_param());
    }
    if (from.has_d_aux_param()) {
      mutable_d_aux_param()->::caffe::NetParameter::MergeFrom(from.d_aux_param());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_test_interval()) {
      set_test_interval(from.test_interval());
    }
    if (from.has_test_iter()) {
      set_test_iter(from.test_iter());
    }
    if (from.has_accumulate_test_iter()) {
      set_accumulate_test_iter(from.accumulate_test_iter());
    }
    if (from.has_accumulate_max_iter()) {
      set_accumulate_max_iter(from.accumulate_max_iter());
    }
  }
  if (from._has_bits_[24 / 32] & 1056964608u) {
    if (from.has_test_initialization()) {
      set_test_initialization(from.test_initialization());
    }
    if (from.has_accumulate_batch_norm()) {
      set_accumulate_batch_norm(from.accumulate_batch_norm());
    }
    if (from.has_second_pass()) {
      set_second_pass(from.second_pass());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_iter_size()) {
      set_iter_size(from.iter_size());
    }
  }
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {
  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParameter::InternalSwap(SolverParameter* other) {
  net_.Swap(&other->net_);
  eval_type_.Swap(&other->eval_type_);
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  solver_type_.Swap(&other->solver_type_);
  bn_state_.Swap(&other->bn_state_);
  drop_state_.Swap(&other->drop_state_);
  test_net_.Swap(&other->test_net_);
  g_net_.Swap(&other->g_net_);
  d_net_.Swap(&other->d_net_);
  d_interp_net_.Swap(&other->d_interp_net_);
  d_aux_net_.Swap(&other->d_aux_net_);
  std::swap(net_param_, other->net_param_);
  std::swap(net_opt_, other->net_opt_);
  std::swap(g_net_opt_, other->g_net_opt_);
  std::swap(d_net_opt_, other->d_net_opt_);
  std::swap(g_net_param_, other->g_net_param_);
  std::swap(d_net_param_, other->d_net_param_);
  std::swap(d_interp_param_, other->d_interp_param_);
  std::swap(d_aux_param_, other->d_aux_param_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(test_interval_, other->test_interval_);
  std::swap(test_iter_, other->test_iter_);
  std::swap(accumulate_test_iter_, other->accumulate_test_iter_);
  std::swap(accumulate_max_iter_, other->accumulate_max_iter_);
  std::swap(test_initialization_, other->test_initialization_);
  std::swap(accumulate_batch_norm_, other->accumulate_batch_norm_);
  std::swap(second_pass_, other->second_pass_);
  std::swap(snapshot_, other->snapshot_);
  std::swap(display_, other->display_);
  std::swap(iter_size_, other->iter_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParameter

// optional string net = 1;
bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena();
}
void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
#if LANG_CXX11
void SolverParameter::set_net(::std::string&& value) {
  set_has_net();
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.net)
}
#endif
void SolverParameter::set_net(const char* value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 2;
bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000800u;
}
void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional .caffe.NetOptimizer net_opt = 3;
bool SolverParameter::has_net_opt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SolverParameter::set_has_net_opt() {
  _has_bits_[0] |= 0x00001000u;
}
void SolverParameter::clear_has_net_opt() {
  _has_bits_[0] &= ~0x00001000u;
}
void SolverParameter::clear_net_opt() {
  if (net_opt_ != NULL) net_opt_->::caffe::NetOptimizer::Clear();
  clear_has_net_opt();
}
const ::caffe::NetOptimizer& SolverParameter::net_opt() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_opt)
  return net_opt_ != NULL ? *net_opt_
                         : *::caffe::NetOptimizer::internal_default_instance();
}
::caffe::NetOptimizer* SolverParameter::mutable_net_opt() {
  set_has_net_opt();
  if (net_opt_ == NULL) {
    net_opt_ = new ::caffe::NetOptimizer;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_opt)
  return net_opt_;
}
::caffe::NetOptimizer* SolverParameter::release_net_opt() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_opt)
  clear_has_net_opt();
  ::caffe::NetOptimizer* temp = net_opt_;
  net_opt_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_net_opt(::caffe::NetOptimizer* net_opt) {
  delete net_opt_;
  net_opt_ = net_opt;
  if (net_opt) {
    set_has_net_opt();
  } else {
    clear_has_net_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_opt)
}

// optional int32 max_iter = 4;
bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00080000u;
}
void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00080000u;
}
void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional bool test_initialization = 5;
bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x01000000u;
}
void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x01000000u;
}
void SolverParameter::clear_test_initialization() {
  test_initialization_ = false;
  clear_has_test_initialization();
}
bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional int32 test_interval = 6;
bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00100000u;
}
void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00100000u;
}
void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional int32 test_iter = 7;
bool SolverParameter::has_test_iter() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SolverParameter::set_has_test_iter() {
  _has_bits_[0] |= 0x00200000u;
}
void SolverParameter::clear_has_test_iter() {
  _has_bits_[0] &= ~0x00200000u;
}
void SolverParameter::clear_test_iter() {
  test_iter_ = 0;
  clear_has_test_iter();
}
::google::protobuf::int32 SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_;
}
void SolverParameter::set_test_iter(::google::protobuf::int32 value) {
  set_has_test_iter();
  test_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}

// optional string eval_type = 8 [default = "classification"];
bool SolverParameter::has_eval_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverParameter::set_has_eval_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverParameter::clear_has_eval_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverParameter::clear_eval_type() {
  eval_type_.ClearToDefaultNoArena(&SolverParameter::_default_eval_type_.get());
  clear_has_eval_type();
}
const ::std::string& SolverParameter::eval_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.eval_type)
  return eval_type_.GetNoArena();
}
void SolverParameter::set_eval_type(const ::std::string& value) {
  set_has_eval_type();
  eval_type_.SetNoArena(&SolverParameter::_default_eval_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.eval_type)
}
#if LANG_CXX11
void SolverParameter::set_eval_type(::std::string&& value) {
  set_has_eval_type();
  eval_type_.SetNoArena(
    &SolverParameter::_default_eval_type_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.eval_type)
}
#endif
void SolverParameter::set_eval_type(const char* value) {
  set_has_eval_type();
  eval_type_.SetNoArena(&SolverParameter::_default_eval_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.eval_type)
}
void SolverParameter::set_eval_type(const char* value, size_t size) {
  set_has_eval_type();
  eval_type_.SetNoArena(&SolverParameter::_default_eval_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.eval_type)
}
::std::string* SolverParameter::mutable_eval_type() {
  set_has_eval_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.eval_type)
  return eval_type_.MutableNoArena(&SolverParameter::_default_eval_type_.get());
}
::std::string* SolverParameter::release_eval_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.eval_type)
  clear_has_eval_type();
  return eval_type_.ReleaseNoArena(&SolverParameter::_default_eval_type_.get());
}
void SolverParameter::set_allocated_eval_type(::std::string* eval_type) {
  if (eval_type != NULL) {
    set_has_eval_type();
  } else {
    clear_has_eval_type();
  }
  eval_type_.SetAllocatedNoArena(&SolverParameter::_default_eval_type_.get(), eval_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.eval_type)
}

// optional bool accumulate_batch_norm = 9 [default = false];
bool SolverParameter::has_accumulate_batch_norm() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SolverParameter::set_has_accumulate_batch_norm() {
  _has_bits_[0] |= 0x02000000u;
}
void SolverParameter::clear_has_accumulate_batch_norm() {
  _has_bits_[0] &= ~0x02000000u;
}
void SolverParameter::clear_accumulate_batch_norm() {
  accumulate_batch_norm_ = false;
  clear_has_accumulate_batch_norm();
}
bool SolverParameter::accumulate_batch_norm() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.accumulate_batch_norm)
  return accumulate_batch_norm_;
}
void SolverParameter::set_accumulate_batch_norm(bool value) {
  set_has_accumulate_batch_norm();
  accumulate_batch_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.accumulate_batch_norm)
}

// optional uint32 accumulate_test_iter = 10;
bool SolverParameter::has_accumulate_test_iter() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SolverParameter::set_has_accumulate_test_iter() {
  _has_bits_[0] |= 0x00400000u;
}
void SolverParameter::clear_has_accumulate_test_iter() {
  _has_bits_[0] &= ~0x00400000u;
}
void SolverParameter::clear_accumulate_test_iter() {
  accumulate_test_iter_ = 0u;
  clear_has_accumulate_test_iter();
}
::google::protobuf::uint32 SolverParameter::accumulate_test_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.accumulate_test_iter)
  return accumulate_test_iter_;
}
void SolverParameter::set_accumulate_test_iter(::google::protobuf::uint32 value) {
  set_has_accumulate_test_iter();
  accumulate_test_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.accumulate_test_iter)
}

// optional uint32 accumulate_max_iter = 11;
bool SolverParameter::has_accumulate_max_iter() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SolverParameter::set_has_accumulate_max_iter() {
  _has_bits_[0] |= 0x00800000u;
}
void SolverParameter::clear_has_accumulate_max_iter() {
  _has_bits_[0] &= ~0x00800000u;
}
void SolverParameter::clear_accumulate_max_iter() {
  accumulate_max_iter_ = 0u;
  clear_has_accumulate_max_iter();
}
::google::protobuf::uint32 SolverParameter::accumulate_max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.accumulate_max_iter)
  return accumulate_max_iter_;
}
void SolverParameter::set_accumulate_max_iter(::google::protobuf::uint32 value) {
  set_has_accumulate_max_iter();
  accumulate_max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.accumulate_max_iter)
}

// optional int32 iter_size = 12 [default = 1];
bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x20000000u;
}
void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x20000000u;
}
void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional int32 snapshot = 13 [default = 0];
bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x08000000u;
}
void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x08000000u;
}
void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 14;
bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
#if LANG_CXX11
void SolverParameter::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.snapshot_prefix)
}
#endif
void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional string solver_type = 15 [default = "CNN"];
bool SolverParameter::has_solver_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SolverParameter::set_has_solver_type() {
  _has_bits_[0] |= 0x00000008u;
}
void SolverParameter::clear_has_solver_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void SolverParameter::clear_solver_type() {
  solver_type_.ClearToDefaultNoArena(&SolverParameter::_default_solver_type_.get());
  clear_has_solver_type();
}
const ::std::string& SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return solver_type_.GetNoArena();
}
void SolverParameter::set_solver_type(const ::std::string& value) {
  set_has_solver_type();
  solver_type_.SetNoArena(&SolverParameter::_default_solver_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}
#if LANG_CXX11
void SolverParameter::set_solver_type(::std::string&& value) {
  set_has_solver_type();
  solver_type_.SetNoArena(
    &SolverParameter::_default_solver_type_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.solver_type)
}
#endif
void SolverParameter::set_solver_type(const char* value) {
  set_has_solver_type();
  solver_type_.SetNoArena(&SolverParameter::_default_solver_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.solver_type)
}
void SolverParameter::set_solver_type(const char* value, size_t size) {
  set_has_solver_type();
  solver_type_.SetNoArena(&SolverParameter::_default_solver_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.solver_type)
}
::std::string* SolverParameter::mutable_solver_type() {
  set_has_solver_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.solver_type)
  return solver_type_.MutableNoArena(&SolverParameter::_default_solver_type_.get());
}
::std::string* SolverParameter::release_solver_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.solver_type)
  clear_has_solver_type();
  return solver_type_.ReleaseNoArena(&SolverParameter::_default_solver_type_.get());
}
void SolverParameter::set_allocated_solver_type(::std::string* solver_type) {
  if (solver_type != NULL) {
    set_has_solver_type();
  } else {
    clear_has_solver_type();
  }
  solver_type_.SetAllocatedNoArena(&SolverParameter::_default_solver_type_.get(), solver_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.solver_type)
}

// optional int32 display = 16;
bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x10000000u;
}
void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x10000000u;
}
void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional string bn_state = 18 [default = "learned"];
bool SolverParameter::has_bn_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SolverParameter::set_has_bn_state() {
  _has_bits_[0] |= 0x00000010u;
}
void SolverParameter::clear_has_bn_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void SolverParameter::clear_bn_state() {
  bn_state_.ClearToDefaultNoArena(&SolverParameter::_default_bn_state_.get());
  clear_has_bn_state();
}
const ::std::string& SolverParameter::bn_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.bn_state)
  return bn_state_.GetNoArena();
}
void SolverParameter::set_bn_state(const ::std::string& value) {
  set_has_bn_state();
  bn_state_.SetNoArena(&SolverParameter::_default_bn_state_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.bn_state)
}
#if LANG_CXX11
void SolverParameter::set_bn_state(::std::string&& value) {
  set_has_bn_state();
  bn_state_.SetNoArena(
    &SolverParameter::_default_bn_state_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.bn_state)
}
#endif
void SolverParameter::set_bn_state(const char* value) {
  set_has_bn_state();
  bn_state_.SetNoArena(&SolverParameter::_default_bn_state_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.bn_state)
}
void SolverParameter::set_bn_state(const char* value, size_t size) {
  set_has_bn_state();
  bn_state_.SetNoArena(&SolverParameter::_default_bn_state_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.bn_state)
}
::std::string* SolverParameter::mutable_bn_state() {
  set_has_bn_state();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.bn_state)
  return bn_state_.MutableNoArena(&SolverParameter::_default_bn_state_.get());
}
::std::string* SolverParameter::release_bn_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.bn_state)
  clear_has_bn_state();
  return bn_state_.ReleaseNoArena(&SolverParameter::_default_bn_state_.get());
}
void SolverParameter::set_allocated_bn_state(::std::string* bn_state) {
  if (bn_state != NULL) {
    set_has_bn_state();
  } else {
    clear_has_bn_state();
  }
  bn_state_.SetAllocatedNoArena(&SolverParameter::_default_bn_state_.get(), bn_state);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.bn_state)
}

// optional string drop_state = 19 [default = "rand"];
bool SolverParameter::has_drop_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SolverParameter::set_has_drop_state() {
  _has_bits_[0] |= 0x00000020u;
}
void SolverParameter::clear_has_drop_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void SolverParameter::clear_drop_state() {
  drop_state_.ClearToDefaultNoArena(&SolverParameter::_default_drop_state_.get());
  clear_has_drop_state();
}
const ::std::string& SolverParameter::drop_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.drop_state)
  return drop_state_.GetNoArena();
}
void SolverParameter::set_drop_state(const ::std::string& value) {
  set_has_drop_state();
  drop_state_.SetNoArena(&SolverParameter::_default_drop_state_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.drop_state)
}
#if LANG_CXX11
void SolverParameter::set_drop_state(::std::string&& value) {
  set_has_drop_state();
  drop_state_.SetNoArena(
    &SolverParameter::_default_drop_state_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.drop_state)
}
#endif
void SolverParameter::set_drop_state(const char* value) {
  set_has_drop_state();
  drop_state_.SetNoArena(&SolverParameter::_default_drop_state_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.drop_state)
}
void SolverParameter::set_drop_state(const char* value, size_t size) {
  set_has_drop_state();
  drop_state_.SetNoArena(&SolverParameter::_default_drop_state_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.drop_state)
}
::std::string* SolverParameter::mutable_drop_state() {
  set_has_drop_state();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.drop_state)
  return drop_state_.MutableNoArena(&SolverParameter::_default_drop_state_.get());
}
::std::string* SolverParameter::release_drop_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.drop_state)
  clear_has_drop_state();
  return drop_state_.ReleaseNoArena(&SolverParameter::_default_drop_state_.get());
}
void SolverParameter::set_allocated_drop_state(::std::string* drop_state) {
  if (drop_state != NULL) {
    set_has_drop_state();
  } else {
    clear_has_drop_state();
  }
  drop_state_.SetAllocatedNoArena(&SolverParameter::_default_drop_state_.get(), drop_state);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.drop_state)
}

// optional bool second_pass = 20 [default = false];
bool SolverParameter::has_second_pass() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SolverParameter::set_has_second_pass() {
  _has_bits_[0] |= 0x04000000u;
}
void SolverParameter::clear_has_second_pass() {
  _has_bits_[0] &= ~0x04000000u;
}
void SolverParameter::clear_second_pass() {
  second_pass_ = false;
  clear_has_second_pass();
}
bool SolverParameter::second_pass() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.second_pass)
  return second_pass_;
}
void SolverParameter::set_second_pass(bool value) {
  set_has_second_pass();
  second_pass_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.second_pass)
}

// optional string test_net = 21;
bool SolverParameter::has_test_net() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SolverParameter::set_has_test_net() {
  _has_bits_[0] |= 0x00000040u;
}
void SolverParameter::clear_has_test_net() {
  _has_bits_[0] &= ~0x00000040u;
}
void SolverParameter::clear_test_net() {
  test_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_net();
}
const ::std::string& SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.GetNoArena();
}
void SolverParameter::set_test_net(const ::std::string& value) {
  set_has_test_net();
  test_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
}
#if LANG_CXX11
void SolverParameter::set_test_net(::std::string&& value) {
  set_has_test_net();
  test_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.test_net)
}
#endif
void SolverParameter::set_test_net(const char* value) {
  set_has_test_net();
  test_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
void SolverParameter::set_test_net(const char* value, size_t size) {
  set_has_test_net();
  test_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
::std::string* SolverParameter::mutable_test_net() {
  set_has_test_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_test_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.test_net)
  clear_has_test_net();
  return test_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_test_net(::std::string* test_net) {
  if (test_net != NULL) {
    set_has_test_net();
  } else {
    clear_has_test_net();
  }
  test_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.test_net)
}

// optional .caffe.NetOptimizer g_net_opt = 100;
bool SolverParameter::has_g_net_opt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SolverParameter::set_has_g_net_opt() {
  _has_bits_[0] |= 0x00002000u;
}
void SolverParameter::clear_has_g_net_opt() {
  _has_bits_[0] &= ~0x00002000u;
}
void SolverParameter::clear_g_net_opt() {
  if (g_net_opt_ != NULL) g_net_opt_->::caffe::NetOptimizer::Clear();
  clear_has_g_net_opt();
}
const ::caffe::NetOptimizer& SolverParameter::g_net_opt() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.g_net_opt)
  return g_net_opt_ != NULL ? *g_net_opt_
                         : *::caffe::NetOptimizer::internal_default_instance();
}
::caffe::NetOptimizer* SolverParameter::mutable_g_net_opt() {
  set_has_g_net_opt();
  if (g_net_opt_ == NULL) {
    g_net_opt_ = new ::caffe::NetOptimizer;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.g_net_opt)
  return g_net_opt_;
}
::caffe::NetOptimizer* SolverParameter::release_g_net_opt() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.g_net_opt)
  clear_has_g_net_opt();
  ::caffe::NetOptimizer* temp = g_net_opt_;
  g_net_opt_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_g_net_opt(::caffe::NetOptimizer* g_net_opt) {
  delete g_net_opt_;
  g_net_opt_ = g_net_opt;
  if (g_net_opt) {
    set_has_g_net_opt();
  } else {
    clear_has_g_net_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.g_net_opt)
}

// optional .caffe.NetOptimizer d_net_opt = 101;
bool SolverParameter::has_d_net_opt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SolverParameter::set_has_d_net_opt() {
  _has_bits_[0] |= 0x00004000u;
}
void SolverParameter::clear_has_d_net_opt() {
  _has_bits_[0] &= ~0x00004000u;
}
void SolverParameter::clear_d_net_opt() {
  if (d_net_opt_ != NULL) d_net_opt_->::caffe::NetOptimizer::Clear();
  clear_has_d_net_opt();
}
const ::caffe::NetOptimizer& SolverParameter::d_net_opt() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.d_net_opt)
  return d_net_opt_ != NULL ? *d_net_opt_
                         : *::caffe::NetOptimizer::internal_default_instance();
}
::caffe::NetOptimizer* SolverParameter::mutable_d_net_opt() {
  set_has_d_net_opt();
  if (d_net_opt_ == NULL) {
    d_net_opt_ = new ::caffe::NetOptimizer;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.d_net_opt)
  return d_net_opt_;
}
::caffe::NetOptimizer* SolverParameter::release_d_net_opt() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.d_net_opt)
  clear_has_d_net_opt();
  ::caffe::NetOptimizer* temp = d_net_opt_;
  d_net_opt_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_d_net_opt(::caffe::NetOptimizer* d_net_opt) {
  delete d_net_opt_;
  d_net_opt_ = d_net_opt;
  if (d_net_opt) {
    set_has_d_net_opt();
  } else {
    clear_has_d_net_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.d_net_opt)
}

// optional string g_net = 102;
bool SolverParameter::has_g_net() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SolverParameter::set_has_g_net() {
  _has_bits_[0] |= 0x00000080u;
}
void SolverParameter::clear_has_g_net() {
  _has_bits_[0] &= ~0x00000080u;
}
void SolverParameter::clear_g_net() {
  g_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_g_net();
}
const ::std::string& SolverParameter::g_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.g_net)
  return g_net_.GetNoArena();
}
void SolverParameter::set_g_net(const ::std::string& value) {
  set_has_g_net();
  g_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.g_net)
}
#if LANG_CXX11
void SolverParameter::set_g_net(::std::string&& value) {
  set_has_g_net();
  g_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.g_net)
}
#endif
void SolverParameter::set_g_net(const char* value) {
  set_has_g_net();
  g_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.g_net)
}
void SolverParameter::set_g_net(const char* value, size_t size) {
  set_has_g_net();
  g_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.g_net)
}
::std::string* SolverParameter::mutable_g_net() {
  set_has_g_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.g_net)
  return g_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_g_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.g_net)
  clear_has_g_net();
  return g_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_g_net(::std::string* g_net) {
  if (g_net != NULL) {
    set_has_g_net();
  } else {
    clear_has_g_net();
  }
  g_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), g_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.g_net)
}

// optional .caffe.NetParameter g_net_param = 103;
bool SolverParameter::has_g_net_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SolverParameter::set_has_g_net_param() {
  _has_bits_[0] |= 0x00008000u;
}
void SolverParameter::clear_has_g_net_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void SolverParameter::clear_g_net_param() {
  if (g_net_param_ != NULL) g_net_param_->::caffe::NetParameter::Clear();
  clear_has_g_net_param();
}
const ::caffe::NetParameter& SolverParameter::g_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.g_net_param)
  return g_net_param_ != NULL ? *g_net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_g_net_param() {
  set_has_g_net_param();
  if (g_net_param_ == NULL) {
    g_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.g_net_param)
  return g_net_param_;
}
::caffe::NetParameter* SolverParameter::release_g_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.g_net_param)
  clear_has_g_net_param();
  ::caffe::NetParameter* temp = g_net_param_;
  g_net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_g_net_param(::caffe::NetParameter* g_net_param) {
  delete g_net_param_;
  g_net_param_ = g_net_param;
  if (g_net_param) {
    set_has_g_net_param();
  } else {
    clear_has_g_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.g_net_param)
}

// optional string d_net = 106;
bool SolverParameter::has_d_net() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SolverParameter::set_has_d_net() {
  _has_bits_[0] |= 0x00000100u;
}
void SolverParameter::clear_has_d_net() {
  _has_bits_[0] &= ~0x00000100u;
}
void SolverParameter::clear_d_net() {
  d_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_d_net();
}
const ::std::string& SolverParameter::d_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.d_net)
  return d_net_.GetNoArena();
}
void SolverParameter::set_d_net(const ::std::string& value) {
  set_has_d_net();
  d_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.d_net)
}
#if LANG_CXX11
void SolverParameter::set_d_net(::std::string&& value) {
  set_has_d_net();
  d_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.d_net)
}
#endif
void SolverParameter::set_d_net(const char* value) {
  set_has_d_net();
  d_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.d_net)
}
void SolverParameter::set_d_net(const char* value, size_t size) {
  set_has_d_net();
  d_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.d_net)
}
::std::string* SolverParameter::mutable_d_net() {
  set_has_d_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.d_net)
  return d_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_d_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.d_net)
  clear_has_d_net();
  return d_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_d_net(::std::string* d_net) {
  if (d_net != NULL) {
    set_has_d_net();
  } else {
    clear_has_d_net();
  }
  d_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), d_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.d_net)
}

// optional .caffe.NetParameter d_net_param = 107;
bool SolverParameter::has_d_net_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SolverParameter::set_has_d_net_param() {
  _has_bits_[0] |= 0x00010000u;
}
void SolverParameter::clear_has_d_net_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void SolverParameter::clear_d_net_param() {
  if (d_net_param_ != NULL) d_net_param_->::caffe::NetParameter::Clear();
  clear_has_d_net_param();
}
const ::caffe::NetParameter& SolverParameter::d_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.d_net_param)
  return d_net_param_ != NULL ? *d_net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_d_net_param() {
  set_has_d_net_param();
  if (d_net_param_ == NULL) {
    d_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.d_net_param)
  return d_net_param_;
}
::caffe::NetParameter* SolverParameter::release_d_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.d_net_param)
  clear_has_d_net_param();
  ::caffe::NetParameter* temp = d_net_param_;
  d_net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_d_net_param(::caffe::NetParameter* d_net_param) {
  delete d_net_param_;
  d_net_param_ = d_net_param;
  if (d_net_param) {
    set_has_d_net_param();
  } else {
    clear_has_d_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.d_net_param)
}

// optional string d_interp_net = 110;
bool SolverParameter::has_d_interp_net() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SolverParameter::set_has_d_interp_net() {
  _has_bits_[0] |= 0x00000200u;
}
void SolverParameter::clear_has_d_interp_net() {
  _has_bits_[0] &= ~0x00000200u;
}
void SolverParameter::clear_d_interp_net() {
  d_interp_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_d_interp_net();
}
const ::std::string& SolverParameter::d_interp_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.d_interp_net)
  return d_interp_net_.GetNoArena();
}
void SolverParameter::set_d_interp_net(const ::std::string& value) {
  set_has_d_interp_net();
  d_interp_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.d_interp_net)
}
#if LANG_CXX11
void SolverParameter::set_d_interp_net(::std::string&& value) {
  set_has_d_interp_net();
  d_interp_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.d_interp_net)
}
#endif
void SolverParameter::set_d_interp_net(const char* value) {
  set_has_d_interp_net();
  d_interp_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.d_interp_net)
}
void SolverParameter::set_d_interp_net(const char* value, size_t size) {
  set_has_d_interp_net();
  d_interp_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.d_interp_net)
}
::std::string* SolverParameter::mutable_d_interp_net() {
  set_has_d_interp_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.d_interp_net)
  return d_interp_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_d_interp_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.d_interp_net)
  clear_has_d_interp_net();
  return d_interp_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_d_interp_net(::std::string* d_interp_net) {
  if (d_interp_net != NULL) {
    set_has_d_interp_net();
  } else {
    clear_has_d_interp_net();
  }
  d_interp_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), d_interp_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.d_interp_net)
}

// optional string d_aux_net = 111;
bool SolverParameter::has_d_aux_net() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SolverParameter::set_has_d_aux_net() {
  _has_bits_[0] |= 0x00000400u;
}
void SolverParameter::clear_has_d_aux_net() {
  _has_bits_[0] &= ~0x00000400u;
}
void SolverParameter::clear_d_aux_net() {
  d_aux_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_d_aux_net();
}
const ::std::string& SolverParameter::d_aux_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.d_aux_net)
  return d_aux_net_.GetNoArena();
}
void SolverParameter::set_d_aux_net(const ::std::string& value) {
  set_has_d_aux_net();
  d_aux_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.d_aux_net)
}
#if LANG_CXX11
void SolverParameter::set_d_aux_net(::std::string&& value) {
  set_has_d_aux_net();
  d_aux_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.d_aux_net)
}
#endif
void SolverParameter::set_d_aux_net(const char* value) {
  set_has_d_aux_net();
  d_aux_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.d_aux_net)
}
void SolverParameter::set_d_aux_net(const char* value, size_t size) {
  set_has_d_aux_net();
  d_aux_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.d_aux_net)
}
::std::string* SolverParameter::mutable_d_aux_net() {
  set_has_d_aux_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.d_aux_net)
  return d_aux_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_d_aux_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.d_aux_net)
  clear_has_d_aux_net();
  return d_aux_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_d_aux_net(::std::string* d_aux_net) {
  if (d_aux_net != NULL) {
    set_has_d_aux_net();
  } else {
    clear_has_d_aux_net();
  }
  d_aux_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), d_aux_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.d_aux_net)
}

// optional .caffe.NetParameter d_interp_param = 112;
bool SolverParameter::has_d_interp_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SolverParameter::set_has_d_interp_param() {
  _has_bits_[0] |= 0x00020000u;
}
void SolverParameter::clear_has_d_interp_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void SolverParameter::clear_d_interp_param() {
  if (d_interp_param_ != NULL) d_interp_param_->::caffe::NetParameter::Clear();
  clear_has_d_interp_param();
}
const ::caffe::NetParameter& SolverParameter::d_interp_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.d_interp_param)
  return d_interp_param_ != NULL ? *d_interp_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_d_interp_param() {
  set_has_d_interp_param();
  if (d_interp_param_ == NULL) {
    d_interp_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.d_interp_param)
  return d_interp_param_;
}
::caffe::NetParameter* SolverParameter::release_d_interp_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.d_interp_param)
  clear_has_d_interp_param();
  ::caffe::NetParameter* temp = d_interp_param_;
  d_interp_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_d_interp_param(::caffe::NetParameter* d_interp_param) {
  delete d_interp_param_;
  d_interp_param_ = d_interp_param;
  if (d_interp_param) {
    set_has_d_interp_param();
  } else {
    clear_has_d_interp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.d_interp_param)
}

// optional .caffe.NetParameter d_aux_param = 113;
bool SolverParameter::has_d_aux_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SolverParameter::set_has_d_aux_param() {
  _has_bits_[0] |= 0x00040000u;
}
void SolverParameter::clear_has_d_aux_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void SolverParameter::clear_d_aux_param() {
  if (d_aux_param_ != NULL) d_aux_param_->::caffe::NetParameter::Clear();
  clear_has_d_aux_param();
}
const ::caffe::NetParameter& SolverParameter::d_aux_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.d_aux_param)
  return d_aux_param_ != NULL ? *d_aux_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_d_aux_param() {
  set_has_d_aux_param();
  if (d_aux_param_ == NULL) {
    d_aux_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.d_aux_param)
  return d_aux_param_;
}
::caffe::NetParameter* SolverParameter::release_d_aux_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.d_aux_param)
  clear_has_d_aux_param();
  ::caffe::NetParameter* temp = d_aux_param_;
  d_aux_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_d_aux_param(::caffe::NetParameter* d_aux_param) {
  delete d_aux_param_;
  d_aux_param_ = d_aux_param;
  if (d_aux_param) {
    set_has_d_aux_param();
  } else {
    clear_has_d_aux_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.d_aux_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PoolingParameter::_default_pool_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kGlobalPoolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PoolingParameter)
}
PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pool_.UnsafeSetDefault(&PoolingParameter::_default_pool_.get());
  if (from.has_pool()) {
    pool_.AssignWithDefault(&PoolingParameter::_default_pool_.get(), from.pool_);
  }
  ::memcpy(&pad_, &from.pad_,
    reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&pad_) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:caffe.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  pool_.UnsafeSetDefault(&PoolingParameter::_default_pool_.get());
  ::memset(&pad_, 0, reinterpret_cast<char*>(&global_pool_) -
    reinterpret_cast<char*>(&pad_) + sizeof(global_pool_));
  stride_ = 1u;
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
  pool_.DestroyNoArena(&PoolingParameter::_default_pool_.get());
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[31].descriptor;
}

const PoolingParameter& PoolingParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoolingParameter* PoolingParameter::New(::google::protobuf::Arena* arena) const {
  PoolingParameter* n = new PoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PoolingParameter)
  if (has_pool()) {
    GOOGLE_DCHECK(!pool_.IsDefault(&PoolingParameter::_default_pool_.get()));
    (*pool_.UnsafeRawStringPointer())->assign(*&PoolingParameter::_default_pool_.get());
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&pad_, 0, reinterpret_cast<char*>(&global_pool_) -
      reinterpret_cast<char*>(&pad_) + sizeof(global_pool_));
    stride_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pool = 1 [default = "ave"];
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pool().data(), this->pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PoolingParameter.pool");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 2 [default = 0];
      case 2: {
        if (tag == 16u) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_size = 3;
      case 3: {
        if (tag == 24u) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 4 [default = 1];
      case 4: {
        if (tag == 32u) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool global_pool = 5 [default = false];
      case 5: {
        if (tag == 40u) {
          set_has_global_pool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PoolingParameter)
  // optional string pool = 1 [default = "ave"];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PoolingParameter.pool");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pool(), output);
  }

  // optional uint32 pad = 2 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pad(), output);
  }

  // optional uint32 kernel_size = 3;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kernel_size(), output);
  }

  // optional uint32 stride = 4 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stride(), output);
  }

  // optional bool global_pool = 5 [default = false];
  if (has_global_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->global_pool(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingParameter)
  // optional string pool = 1 [default = "ave"];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PoolingParameter.pool");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pool(), target);
  }

  // optional uint32 pad = 2 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pad(), target);
  }

  // optional uint32 kernel_size = 3;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kernel_size(), target);
  }

  // optional uint32 stride = 4 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stride(), target);
  }

  // optional bool global_pool = 5 [default = false];
  if (has_global_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->global_pool(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingParameter)
  return target;
}

size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string pool = 1 [default = "ave"];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool());
    }

    // optional uint32 pad = 2 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernel_size = 3;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional bool global_pool = 5 [default = false];
    if (has_global_pool()) {
      total_size += 1 + 1;
    }

    // optional uint32 stride = 4 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PoolingParameter)
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_pool()) {
      set_has_pool();
      pool_.AssignWithDefault(&PoolingParameter::_default_pool_.get(), from.pool_);
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_global_pool()) {
      set_global_pool(from.global_pool());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
  }
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {
  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParameter::InternalSwap(PoolingParameter* other) {
  pool_.Swap(&other->pool_);
  std::swap(pad_, other->pad_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(global_pool_, other->global_pool_);
  std::swap(stride_, other->stride_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParameter

// optional string pool = 1 [default = "ave"];
bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoolingParameter::clear_pool() {
  pool_.ClearToDefaultNoArena(&PoolingParameter::_default_pool_.get());
  clear_has_pool();
}
const ::std::string& PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return pool_.GetNoArena();
}
void PoolingParameter::set_pool(const ::std::string& value) {
  set_has_pool();
  pool_.SetNoArena(&PoolingParameter::_default_pool_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}
#if LANG_CXX11
void PoolingParameter::set_pool(::std::string&& value) {
  set_has_pool();
  pool_.SetNoArena(
    &PoolingParameter::_default_pool_.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PoolingParameter.pool)
}
#endif
void PoolingParameter::set_pool(const char* value) {
  set_has_pool();
  pool_.SetNoArena(&PoolingParameter::_default_pool_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoolingParameter.pool)
}
void PoolingParameter::set_pool(const char* value, size_t size) {
  set_has_pool();
  pool_.SetNoArena(&PoolingParameter::_default_pool_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoolingParameter.pool)
}
::std::string* PoolingParameter::mutable_pool() {
  set_has_pool();
  // @@protoc_insertion_point(field_mutable:caffe.PoolingParameter.pool)
  return pool_.MutableNoArena(&PoolingParameter::_default_pool_.get());
}
::std::string* PoolingParameter::release_pool() {
  // @@protoc_insertion_point(field_release:caffe.PoolingParameter.pool)
  clear_has_pool();
  return pool_.ReleaseNoArena(&PoolingParameter::_default_pool_.get());
}
void PoolingParameter::set_allocated_pool(::std::string* pool) {
  if (pool != NULL) {
    set_has_pool();
  } else {
    clear_has_pool();
  }
  pool_.SetAllocatedNoArena(&PoolingParameter::_default_pool_.get(), pool);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 2 [default = 0];
bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 kernel_size = 3;
bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000004u;
}
void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 stride = 4 [default = 1];
bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000010u;
}
void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional bool global_pool = 5 [default = false];
bool PoolingParameter::has_global_pool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PoolingParameter::set_has_global_pool() {
  _has_bits_[0] |= 0x00000008u;
}
void PoolingParameter::clear_has_global_pool() {
  _has_bits_[0] &= ~0x00000008u;
}
void PoolingParameter::clear_global_pool() {
  global_pool_ = false;
  clear_has_global_pool();
}
bool PoolingParameter::global_pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pool)
  return global_pool_;
}
void PoolingParameter::set_global_pool(bool value) {
  set_has_global_pool();
  global_pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pool)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParameter::kIgnoreLabelFieldNumber;
const int LossParameter::kKeepPortionFieldNumber;
const int LossParameter::kSingleTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParameter::LossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LossParameter)
}
LossParameter::LossParameter(const LossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    reinterpret_cast<char*>(&keep_portion_) -
    reinterpret_cast<char*>(&ignore_label_) + sizeof(keep_portion_));
  // @@protoc_insertion_point(copy_constructor:caffe.LossParameter)
}

void LossParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ignore_label_, 0, reinterpret_cast<char*>(&single_term_) -
    reinterpret_cast<char*>(&ignore_label_) + sizeof(single_term_));
  keep_portion_ = 0.5f;
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.LossParameter)
  SharedDtor();
}

void LossParameter::SharedDtor() {
}

void LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[32].descriptor;
}

const LossParameter& LossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LossParameter* LossParameter::New(::google::protobuf::Arena* arena) const {
  LossParameter* n = new LossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LossParameter)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ignore_label_, 0, reinterpret_cast<char*>(&single_term_) -
      reinterpret_cast<char*>(&ignore_label_) + sizeof(single_term_));
    keep_portion_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ignore_label = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float keep_portion = 2 [default = 0.5];
      case 2: {
        if (tag == 21u) {
          set_has_keep_portion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &keep_portion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool single_term = 3 [default = false];
      case 3: {
        if (tag == 24u) {
          set_has_single_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LossParameter)
  return false;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ignore_label(), output);
  }

  // optional float keep_portion = 2 [default = 0.5];
  if (has_keep_portion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->keep_portion(), output);
  }

  // optional bool single_term = 3 [default = false];
  if (has_single_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->single_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LossParameter)
}

::google::protobuf::uint8* LossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ignore_label(), target);
  }

  // optional float keep_portion = 2 [default = 0.5];
  if (has_keep_portion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->keep_portion(), target);
  }

  // optional bool single_term = 3 [default = false];
  if (has_single_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->single_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LossParameter)
  return target;
}

size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ignore_label = 1;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional bool single_term = 3 [default = false];
    if (has_single_term()) {
      total_size += 1 + 1;
    }

    // optional float keep_portion = 2 [default = 0.5];
    if (has_keep_portion()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LossParameter)
    MergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
    if (from.has_single_term()) {
      set_single_term(from.single_term());
    }
    if (from.has_keep_portion()) {
      set_keep_portion(from.keep_portion());
    }
  }
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {
  return true;
}

void LossParameter::Swap(LossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParameter::InternalSwap(LossParameter* other) {
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(single_term_, other->single_term_);
  std::swap(keep_portion_, other->keep_portion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParameter

// optional int32 ignore_label = 1;
bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional float keep_portion = 2 [default = 0.5];
bool LossParameter::has_keep_portion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LossParameter::set_has_keep_portion() {
  _has_bits_[0] |= 0x00000004u;
}
void LossParameter::clear_has_keep_portion() {
  _has_bits_[0] &= ~0x00000004u;
}
void LossParameter::clear_keep_portion() {
  keep_portion_ = 0.5f;
  clear_has_keep_portion();
}
float LossParameter::keep_portion() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.keep_portion)
  return keep_portion_;
}
void LossParameter::set_keep_portion(float value) {
  set_has_keep_portion();
  keep_portion_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.keep_portion)
}

// optional bool single_term = 3 [default = false];
bool LossParameter::has_single_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LossParameter::set_has_single_term() {
  _has_bits_[0] |= 0x00000002u;
}
void LossParameter::clear_has_single_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void LossParameter::clear_single_term() {
  single_term_ = false;
  clear_has_single_term();
}
bool LossParameter::single_term() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.single_term)
  return single_term_;
}
void LossParameter::set_single_term(bool value) {
  set_has_single_term();
  single_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.single_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)
